@page "/{tenantName}/certificates"
@inherits PageBase

<div class="tab-content">
    <div class="d-flex">
        <div class="info-text mr-auto pt-0">
            The certificate is the environments and thus the Identity Provider's unique <DocsLink Page="certificates">certificate</DocsLink>. The are two different certificate container types to choose from.
        </div>

        <div class="pb-2 d-block d-lg-none d-xl-none">
            <div class="row">
                <div class="col-12">
                    <button type="button" class="btn btn-primary" @onclick="ShowContainerTypeAsync">
                        Change container type
                    </button>
                </div>
            </div>
            @if (trackKey?.Type == TrackKeyTypes.Contained)
            {
                @if (certificates.Any(c => !c.IsPrimary && !c.CreateMode))
                {
                    <div class="row">
                        <div class="col-12 pt-2">
                            <button type="button" class="btn btn-sm btn-outline-dark" @onclick="@(() => { swapCertificateError = null; swapCertificateModal.Show(); })">
                                Swap certificate
                            </button>
                        </div>
                    </div>
                }
                else
                {
                    <div class="row">
                        <div class="col-12 pt-2">
                            <button type="button" class="btn btn-sm btn-outline-dark" disabled="disabled">
                                Swap certificate
                            </button>
                        </div>
                    </div>
                }
            }
        </div>
        <div class="pb-2 d-none d-lg-block d-xl-block">
            <div class="btn-group">
                @if (trackKey?.Type == TrackKeyTypes.Contained)
                {
                    @if (certificates.Any(c => !c.IsPrimary && !c.CreateMode))
                    {
                        <button type="button" class="btn btn-outline-dark" @onclick="@(() => { swapCertificateError = null; swapCertificateModal.Show(); })">
                            Swap certificate
                        </button>
                    }
                    else
                    {
                        <button type="button" class="btn btn-outline-dark" disabled="disabled">
                            Swap certificate
                        </button>
                    }
                }
                <button type="button" class="btn btn-primary" @onclick="ShowContainerTypeAsync">
                    Change container type
                </button>
            </div>
        </div>
    </div>

    <div class="pt-4">
        @if (!certificateLoadError.IsNullOrWhiteSpace())
        {
            <div class="alert alert-danger" role="alert">
                @certificateLoadError
            </div>
        }

        @if (trackKey?.Type == TrackKeyTypes.Contained)
        {
            @foreach (var certificate in certificates.OrderByDescending(c => c.IsPrimary))
            {
                <h4 class="@(certificate.IsPrimary ? "" : "pt-4")">@(certificate.IsPrimary ? "Primary" : "Secondary") certificate</h4>
                <div class="card">
                    <div class="card-body @(certificate.Edit ? "active" : string.Empty)">
                        @if (!certificate.Error.IsNullOrWhiteSpace())
                        {
                            <div class="alert alert-danger" role="alert">
                                @certificate.Error
                            </div>
                        }
                        @if (certificate.Edit)
                        {
                            <PageEditForm @ref="certificate.Form" TModel="TrackCertificateInfoViewModel" OnAfterInit="@(m => CertificateViewModelAfterInit(certificate, m))" OnValidSubmit="@(async (editContext) => await OnEditCertificateValidSubmitAsync(certificate, editContext))">
                                <div class="modal-header">
                                    Configure certificate
                                </div>
                                <div class="modal-body">
                                    <FInputPassword @bind-Value="certificate.Form.Model.Password" For="@(() => certificate.Form.Model.Password)" />
                                    <div class="form-group active-group active">
                                        <div class="drag-drop-zone input-control">
                                            <InputFile OnChange="@(async (e) => await OnCertificateFileSelectedAsync(certificate, e))" />
                                            @certificate.CertificateFileStatus
                                        </div>
                                        <label class="label-control">Certificate</label>
                                        <ValidationMessage For="@(() => certificate.Form.Model.Key)" />
                                        <ul class="list-group">
                                            <li class="list-group-item p-0">
                                                @if (!certificate.Form.Model.Subject.IsNullOrWhiteSpace())
                                                {
                                                    <div class="d-flex">
                                                        <div class="mr-auto p-2">
                                                            <strong>@certificate.Form.Model.Subject</strong><br />
                                                            <span class="@(certificate.Form.Model.IsValid ? "" : "text-danger")">Valid from @certificate.Form.Model.ValidFrom.ToShortDateString() to @certificate.Form.Model.ValidTo.ToShortDateString()</span><br />
                                                            <span>Thumbprint: @certificate.Form.Model.Thumbprint</span>
                                                        </div>
                                                    </div>
                                                }
                                            </li>
                                        </ul>
                                        @if (!certificate.Form.Model.CertificateBase64.IsNullOrWhiteSpace())
                                        {
                                            <div class="mt-4">
                                                <FFieldTextClipboard Class="pb-0" @bind-Value="certificate.Form.Model.CertificateBase64" For="@(() => certificate.Form.Model.CertificateBase64)" />
                                                <button type="button" class="btn btn-link btn-xs py-2 pl-0" @onclick="@(async () => await DownloadCertificateAsync(certificate.Form.Model.Subject, certificate.Form.Model.CertificateBase64))"><span class="oi oi-cloud-download" aria-hidden="true"></span> Download certificate</button>
                                            </div>
                                        }
                                    </div>
                                </div>
                                @if (!certificate.IsPrimary && !certificate.CreateMode && certificate.DeleteAcknowledge)
                                {
                                    <div class="modal-footer">
                                        <div class="alert alert-danger" role="alert">
                                            <div>
                                                You are about to delete Secondary Certificate "@certificate.Subject", are you sure?
                                            </div>

                                            <div class="mt-3">
                                                <button type="button" class="btn btn-secondary" @onclick="@(async () => await DeleteSecondaryCertificateAsync(certificate))">Yes delete</button>
                                                <button type="button" class="btn btn-secondary" @onclick="@(() => certificate.DeleteAcknowledge = false)">No</button>
                                            </div>
                                        </div>
                                    </div>
                                }
                                <div class="modal-footer">
                                    @if (!certificate.IsPrimary && !certificate.CreateMode)
                                    {
                                        <button type="button" class="btn btn-link" @onclick="@(() => certificate.DeleteAcknowledge = true)">Delete</button>
                                    }
                                    @if (certificate.Form.Model.Key == null)
                                    {
                                        <button type="button" class="btn btn-primary" @onclick="@(async () => await CreateSelfSignedCertificateAsync(certificate))">Create new self-signed certificate</button>
                                    }
                                    else
                                    {
                                        <button type="submit" class="btn btn-primary">@(certificate.CreateMode ? "Save" : "Update")</button>
                                    }
                                    <button type="button" class="btn btn-secondary" @onclick="@(() => CertificateCancel(certificate))">Cancel</button>
                                </div>
                            </PageEditForm>
                        }
                        else
                        {
                            @if (!certificate.IsPrimary && certificate.CreateMode)
                            {
                                <button type="button" class="btn btn-link p-0" @onclick="@(() => ShowCreateSecondaryCertificate(certificate))"><span class="oi oi-plus" aria-hidden="true"></span> Add Secondary Certificate</button>
                            }
                            else
                            {
                                <button type="button" class="btn btn-link text-left p-0 btn-wrap" @onclick="@(() => ShowUpdateCertificate(certificate))">
                                    <strong>@certificate.Subject</strong>
                                </button><br />
                                <span class="small @(certificate.IsValid ? "" : "text-danger")">Valid from @certificate.ValidFrom.ToShortDateString() to @certificate.ValidTo.ToShortDateString()</span><br />
                                <span class="small">Thumbprint: @certificate.Thumbprint</span>
                                @if (!certificate.CertificateBase64.IsNullOrWhiteSpace())
                                {
                                    <div class="mt-4">
                                        <FFieldTextClipboard Class="pb-0" @bind-Value="certificate.CertificateBase64" For="@(() => certificate.CertificateBase64)" LabelText="Certificate (Base64)" />
                                        <button type="button" class="btn btn-link btn-xs py-2 pl-0" @onclick="@(async () => await DownloadCertificateAsync(certificate.Subject, certificate.CertificateBase64))"><span class="oi oi-cloud-download" aria-hidden="true"></span> Download certificate</button>
                                    </div>
                                }
                            }
                        }
                    </div>
                </div>
            }
        }
        else if (trackKey?.Type == TrackKeyTypes.KeyVaultRenewSelfSigned)
        {
            <div class="card bg-light">
                <div class="card-body">
                    <div><strong>Key Vault renewed self-signed certificates</strong></div>
                    <div>The self-signed certificates is automatically renewed by Key Vault.</div>
                </div>
            </div>
        }
        else if (trackKey?.Type == TrackKeyTypes.ContainedRenewSelfSigned)
        {
            <div class="card bg-light mb-3">
                <div class="card-body">
                    <div><strong>Renewed self-signed certificates</strong></div>
                    <div>Automatically renewed with 3 month validity period. Renewed 10 days before expiration and promoted to primary certificate 5 days before expiration.</div>
                </div>
            </div>
            @if (certificates.Any(c => !c.CreateMode))
            {
                foreach (var certificate in certificates.Where(c => !c.CreateMode).OrderByDescending(c => c.IsPrimary))
                {
                    <h4 class="@(certificate.IsPrimary ? "pt-2" : "pt-4")">@(certificate.IsPrimary ? "Primary" : "Secondary") certificate</h4>
                    <div class="card border">
                        <div class="card-body">
                            <div><strong>@certificate.Subject</strong></div>
                            <div class="small @(certificate.IsValid ? "" : "text-danger")">Valid from @certificate.ValidFrom.ToShortDateString() to @certificate.ValidTo.ToShortDateString()</div>
                            <div class="small">Thumbprint: @certificate.Thumbprint</div>
                            @if (!certificate.CertificateBase64.IsNullOrWhiteSpace())
                            {
                                <div class="mt-4">
                                    <FFieldTextClipboard Class="pb-0" @bind-Value="certificate.CertificateBase64" For="@(() => certificate.CertificateBase64)" LabelText="Certificate (Base64)" />
                                    <button type="button" class="btn btn-link btn-xs py-2 pl-0" @onclick="@(async () => await DownloadCertificateAsync(certificate.Subject, certificate.CertificateBase64))"><span class="oi oi-cloud-download" aria-hidden="true"></span> Download certificate</button>
                                </div>
                            }
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="alert alert-info" role="alert">
                    Certificates are being prepared. Please check back shortly.
                </div>
            }
        }
    </div>
</div>

<Modal @ref="swapCertificateModal" Title="Swap certificate">
    <div class="modal-body">
        @if (!swapCertificateError.IsNullOrWhiteSpace())
        {
            <div class="alert alert-danger" role="alert">
                @swapCertificateError
            </div>
        }
        <div class="alert alert-danger" role="alert">
            <div>
                You are about to swap the primary and secondary certificate, are you sure?
            </div>

            <div class="mt-3">
                <button type="button" class="btn btn-secondary" @onclick="@(async () => await ShowSwapCertificateAsync())">Yes swap certificate</button>
                <button type="button" class="btn btn-secondary" @onclick="@(() => swapCertificateModal.Hide())">No</button>
            </div>
        </div>
    </div>
</Modal>

<Modal @ref="changeContainerTypeModal" Title="Change container type">
    <div class="modal-body">
        @if (!changeContainerTypeError.IsNullOrWhiteSpace())
        {
            <div class="alert alert-danger" role="alert">
                @changeContainerTypeError
            </div>
        }

        <div class="mb-3 alert alert-warning" role="alert">
            Changing the container type will change the current certificate, which may cause downtime until the applications and trusted SAML 2.0 identity providers are updated to use the new certificate.
        </div>

        <div class="card bg-light">
            <div class="card-body">
                <div><strong>Renewed self-signed certificates</strong></div>
                <div>
                    <ul>
                        <li>Automatically created self-signed certificates.</li>
                        <li>Automatically renewed with 3 month validity period. Renewed 10 days before expiration and promoted to primary certificate 5 days before expiration.</li>
                    </ul>
                </div>
                @if (trackKey?.Type == TrackKeyTypes.ContainedRenewSelfSigned)
                {
                    <div><i>Current container type.</i></div>
                }
                else
                {
                    <button type="button" class="btn btn-primary" @onclick="@(async () => await SelectContainerTypeAsync(TrackKeyTypes.ContainedRenewSelfSigned))">Change to this container type</button>
                }
            </div>
        </div>

        <div class="card bg-light">
            <div class="card-body">
                <div><strong>Self-signed or your certificates</strong></div>
                <div>
                    <ul>
                        <li>Automatically created self-signed certificates valid for 3 years.</li>
                        <li>Upload your one certificates.</li>
                        <li>NOT automatically renewed.</li>
                    </ul>
                </div>
                @if (trackKey?.Type == TrackKeyTypes.Contained)
                {
                    <div><i>Current container type.</i></div>
                }
                else
                {
                    <button type="button" class="btn btn-primary" @onclick="@(async () => await SelectContainerTypeAsync(TrackKeyTypes.Contained))">Change to this container type</button>
                }
            </div>
        </div>

    </div>
    <div class="modal-footer">
        <button type="button" class="btn btn-secondary" @onclick="@(() => changeContainerTypeModal.Hide())">Cancel</button>
    </div>
</Modal>
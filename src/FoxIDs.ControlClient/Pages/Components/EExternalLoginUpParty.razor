@inherits UpPartyBase

@{
    var extLoginUpParty = UpParty as GeneralExternalLoginUpPartyViewModel;
}

<PageEditForm @ref="extLoginUpParty.Form" TModel="ExternalLoginUpPartyViewModel" OnAfterInit="@(async m => await ExternalLoginUpPartyViewModelAfterInitAsync(extLoginUpParty, m))" OnValidSubmit="@(async (editContext) => await OnEditExternalLoginUpPartyValidSubmitAsync(extLoginUpParty, editContext))">
    <div class="modal-header sticky-header">
        <div class="h5 d-flex flex-nowrap align-items-center mb-0 hide-owerflow">
            <span class="text-nowrap first-header">External API Login</span>
            <span class="ml-2 text-muted text-truncate second-header">@GetUpPartyDisplayName(extLoginUpParty.Form.Model)</span>
        </div>
        <FInputSwitchAdvancedOptions @bind-Value="extLoginUpParty.ShowAdvanced" />
    </div>
    <div class="modal-body">
        <div class="info-text">
            Authenticate <DocsLink Page="users">users</DocsLink> in an external user store. FoxIDs will call an <DocsLink Page="external-login">external API</DocsLink> to validate the user.
            <br />
            The user interface is customizable.
        </div>
        <FInputText @bind-Value="extLoginUpParty.Form.Model.DisplayName" For="@(() => extLoginUpParty.Form.Model.DisplayName)" Focus="extLoginUpParty.CreateMode" />
        @if (extLoginUpParty.ShowAdvanced) 
        {
            <FInputText @bind-Value="extLoginUpParty.Form.Model.Name" For="@(() => extLoginUpParty.Form.Model.Name)" />
        }
        @if (extLoginUpParty.ShowAdvanced)
        {
            <FInputText @bind-Value="extLoginUpParty.Form.Model.Note" For="@(() => extLoginUpParty.Form.Model.Note)" />
        }

        <ul class="nav nav-tabs">
            <li class="nav-item">
                @if (extLoginUpParty.ShowExternalLoginTab)
                {
                    <a class="nav-link active">External API Login</a>
                }
                else
                {
                    <button type="button" class="btn btn-link nav-link" @onclick="@(() => ShowExternalLoginTab(extLoginUpParty, ExternalLoginTabTypes.ExternalLogin))">External API Login</button>
                }
            </li>
            <li class="nav-item">
                @if (extLoginUpParty.ShowClaimTransformTab)
                {
                    <a class="nav-link active">Claim Transform</a>
                }
                else
                {
                    <button type="button" class="btn btn-link nav-link" @onclick="@(() => ShowExternalLoginTab(extLoginUpParty, ExternalLoginTabTypes.ClaimsTransform))">Claim Transform</button>
                }
            </li>
            <li class="nav-item">
                @if (extLoginUpParty.ShowExtendedUiTab)
                {
                    <a class="nav-link active">Extended UI</a>
                }
                else
                {
                    <button type="button" class="btn btn-link nav-link" @onclick="@(() => ShowExternalLoginTab(extLoginUpParty, ExternalLoginTabTypes.ExtendedUi))">Extended UI</button>
                }
            </li>
            <li class="nav-item">
                @if (extLoginUpParty.ShowLinkExternalUserTab)
                {
                    <a class="nav-link active">Create Users</a>
                }
                else
                {
                    <button type="button" class="btn btn-link nav-link" @onclick="@(() => ShowExternalLoginTab(extLoginUpParty, ExternalLoginTabTypes.LinkExternalUser))">Create Users</button>
                }
            </li>
            <li class="nav-item">
                @if (extLoginUpParty.ShowHrdTab)
                {
                    <a class="nav-link active">HRD</a>
                }
                else
                {
                    <button type="button" class="btn btn-link nav-link" @onclick="@(() => ShowExternalLoginTab(extLoginUpParty, ExternalLoginTabTypes.Hrd))">HRD</button>
                }
            </li>

            @if (UpParty.ShowAdvanced)
            {
                <li class="nav-item">
                    @if (extLoginUpParty.ShowProfileTab)
                    {
                        <a class="nav-link active">Profiles</a>
                    }
                    else
                    {
                        <button type="button" class="btn btn-link nav-link" @onclick="@(() => ShowExternalLoginTab(extLoginUpParty, ExternalLoginTabTypes.Profile))">Profiles</button>
                    }
                </li>
                <li class="nav-item">
                    @if (extLoginUpParty.ShowSessionTab)
                    {
                        <a class="nav-link active">User Session</a>
                    }
                    else
                    {
                        <button type="button" class="btn btn-link nav-link" @onclick="@(() => ShowExternalLoginTab(extLoginUpParty, ExternalLoginTabTypes.Session))">User Session</button>
                    }
                </li>
            }

        </ul>

        <div class="tab-content pt-3">
            @if (extLoginUpParty.ShowExternalLoginTab)
            {
                <FInputSelect @bind-Value="extLoginUpParty.Form.Model.UsernameType" For="@(() => extLoginUpParty.Form.Model.UsernameType)">
                    <option value="@ExternalLoginUsernameTypes.Email">Email as username</option>
                    <option value="@ExternalLoginUsernameTypes.Text">Text-based username</option>
                </FInputSelect>

                <FInputText @bind-Value="extLoginUpParty.Form.Model.ApiUrl" For="@(() => extLoginUpParty.Form.Model.ApiUrl)" />
                <FInputText @bind-Value="extLoginUpParty.Form.Model.Secret" For="@(() => extLoginUpParty.Form.Model.Secret)" />

                <FInputToggle @bind-Value="extLoginUpParty.Form.Model.EnableCancelLogin" For="@(() => extLoginUpParty.Form.Model.EnableCancelLogin)" TextType="e.d" />
                <FInputTextList @bind-ValueList="extLoginUpParty.Form.Model.Claims" For="@(() => extLoginUpParty.Form.Model.Claims)" DynamicFirstRow="true" />

                @if (extLoginUpParty.ShowAdvanced)
                {
                    <OAuthAdditionalParameters Model="extLoginUpParty.Form.Model" />
                    <FInputSelect @bind-Value="extLoginUpParty.Form.Model.LogoutConsent" For="@(() => extLoginUpParty.Form.Model.LogoutConsent)">
                        <option value="@LoginUpPartyLogoutConsents.IfRequired">If required</option>
                        <option value="@LoginUpPartyLogoutConsents.Always">Always</option>
                        <option value="@LoginUpPartyLogoutConsents.Never">Never</option>
                    </FInputSelect>
                    <FInputToggle @bind-Value="extLoginUpParty.Form.Model.DisableSingleLogout" For="@(() => extLoginUpParty.Form.Model.DisableSingleLogout)" Negation="true" TextType="e.d" />
                    <FInputText @bind-Value="extLoginUpParty.Form.Model.Title" For="@(() => extLoginUpParty.Form.Model.Title)" />
                    <FInputText @bind-Value="extLoginUpParty.Form.Model.IconUrl" For="@(() => extLoginUpParty.Form.Model.IconUrl)" />
                    <FInputTextArea @bind-Value="extLoginUpParty.Form.Model.Css" For="@(() => extLoginUpParty.Form.Model.Css)" />
                }
            }
            else if (extLoginUpParty.ShowClaimTransformTab)
            {
                <div class="active-group active">
                    <div class="card">
                        <div class="card-body">
                            <div class="info-text" role="alert">
                                The first-level claim transforms is executed after the user has logged in and before the optional extended UI and the optional external users is created or loaded.
                            </div>
                            <OAuthClaimTransforms ClaimTransforms="extLoginUpParty.Form.Model.ClaimTransforms" />
                        </div>
                    </div>
                    <label class="label-control">First-level claim transforms</label>
                </div>
                <div class="active-group active">
                    <div class="card">
                        <div class="card-body">
                            <div class="info-text" role="alert">
                                The second-level claim transforms are executed after the optional extended UI and the optional external users claims have been included in the claim collection.
                            </div>
                            <OAuthClaimTransforms ClaimTransforms="extLoginUpParty.Form.Model.ExitClaimTransforms" />
                        </div>
                    </div>
                    <label class="label-control">Second-level claim transforms</label>
                </div>
                <div class="alert alert-info" role="alert">
                    If you create a new claim in the claim transforms the claim is local in this authentication method unless you add the claim or '*' (default) to the 'Forward claims' list.
                    In the application registration you need to add the claim or '*' to the 'Issue claims' list or alternative add the claim to a scopes 'Voluntary claims' list.
                </div>
            }
            else if (extLoginUpParty.ShowExtendedUiTab)
            {
                @if (extLoginUpParty.Form.Model.ExtendedUis != null)
                {
                    <ExtendedUi Model="extLoginUpParty.Form.Model.ExtendedUis" />
                }
            }
            else if (extLoginUpParty.ShowLinkExternalUserTab)
            {
                @if (extLoginUpParty.Form.Model.LinkExternalUser != null)
                {
                    <LinkExternalUser Model="extLoginUpParty.Form.Model.LinkExternalUser" />
                }
            }
            else if (extLoginUpParty.ShowHrdTab)
            {
                <UpPartyHrd Model="extLoginUpParty.Form.Model" HideDomains="@(extLoginUpParty.Form.Model.UsernameType == ExternalLoginUsernameTypes.Text)" />
            }
            else if (extLoginUpParty.ShowProfileTab)
            {
                <div class="form-group active-group active">
                    <Label For="@(() => extLoginUpParty.Form.Model.Profiles)" class="label-control" />
                    @if (extLoginUpParty.Form.Model.Profiles.Count() <= 0)
                    {
                        <div class="card">
                            <div class="card-body">
                            </div>
                        </div>
                    }
                    <ul class="list-group">
                        @foreach (var profile in extLoginUpParty.Form.Model.Profiles)
                        {
                            <li class="list-group-item">
                                <div class="row">
                                    <div class="col-11">
                                        <FInputText @bind-Value="profile.DisplayName" For="@(() => profile.DisplayName)" />
                                        <FInputText @bind-Value="profile.Name" For="@(() => profile.Name)" />
                                        <OAuthAdditionalParameters Model="profile" />
                                    </div>
                                    <div class="col-1 text-right">
                                        <button type="button" class="btn btn-link px-0" title="Remove" @onclick="@(e => RemoveProfile(e, extLoginUpParty.Form.Model.Profiles, profile))"><span class="oi oi-circle-x" aria-hidden="true"></span></button>
                                    </div>
                                </div>
                            </li>
                        }
                    </ul>
                    <ValidationMessage For="@(() => extLoginUpParty.Form.Model.Profiles)" />
                    <button type="button" class="btn btn-link btn-xs" @onclick="@(e => AddProfile(e,  extLoginUpParty.Form.Model.Profiles))"><span class="oi oi-plus" aria-hidden="true"></span> Add Profile</button>
                </div>
            }
            else if (extLoginUpParty.ShowSessionTab)
            {
                <UpPartySessionLifetime Model="extLoginUpParty.Form.Model" />
            }
        </div>
    </div>
    @if (!extLoginUpParty.CreateMode && extLoginUpParty.DeleteAcknowledge)
    {
        <div class="modal-footer">
            <div class="alert alert-danger" role="alert">
                <div>
                    You are about to delete login application "@(UpParty.DisplayName ?? UpParty.Name)", are you sure?
                </div>

                <div class="mt-3">
                    <button type="button" class="btn btn-secondary" @onclick="@(async () => await DeleteExternalLoginUpPartyAsync(extLoginUpParty))">Yes delete</button>
                    <button type="button" class="btn btn-secondary" @onclick="@(() => extLoginUpParty.DeleteAcknowledge = false)">No</button>
                </div>
            </div>
        </div>
    }
    <div class="modal-footer">
        @if (!extLoginUpParty.CreateMode)
        {
            <button type="button" class="btn btn-link" @onclick="@(() => extLoginUpParty.DeleteAcknowledge = true)">Delete</button>
            <button type="button" class="btn btn-outline-dark" @onclick="@(async () => await OnTestUpParty.InvokeAsync(extLoginUpParty))">
                Test authentication
            </button>
        }
        <button type="submit" class="btn btn-primary">@(@extLoginUpParty.CreateMode ? "Create" : "Update")</button>
        <button type="button" class="btn btn-secondary" @onclick="@(() => UpPartyCancelAsync(UpParty))">@(@extLoginUpParty.CreateMode ? "Cancel" : "Close")</button>
    </div>
</PageEditForm>











@inherits ComponentBase

<div>

    @if (Item.Type == LogItemTypes.CriticalError || Item.Type == LogItemTypes.Error || Item.Type == LogItemTypes.Warning)
    {
        @if (Item.Type == LogItemTypes.CriticalError || Item.Type == LogItemTypes.Error)
        {
            <div class="text-danger"><b>@(Item.Type == LogItemTypes.CriticalError ? "Critical error" : Item.Type.ToString())</b> @Item.Timestamp.TimeToString()</div>
        }
        else
        {
            <div class="text-warning"><b>@Item.Type.ToString()</b> @Item.Timestamp.TimeToString()</div>
        }

        @if (Item.Details != null)
        {
            <ul class="list-group">
                @foreach (var detailItem in Item.Details)
                {
                    <li class="list-group-item" style="overflow:auto">
                        <div class="row">
                            <div class="col-11">
                                <div>@detailItem.Name</div>
                                @if (detailItem.ShowDetails)
                                {
                                    @foreach (var detail in detailItem.Details)
                                    {
                                        <div>@detail</div>
                                    }
                                }
                            </div>
                            <div class="col-1 text-right">
                                @if (detailItem.Details != null) 
                                {
                                    @if (detailItem.ShowDetails)
                                    {
                                        <button type="button" class="btn btn-link p-0" title="Hide" @onclick="@(e => detailItem.ShowDetails = false)"><span class="oi oi-collapse-up" aria-hidden="true"></span></button>
                                    }
                                    else
                                    {
                                        <button type="button" class="btn btn-link p-0" title="Show" @onclick="@(e => detailItem.ShowDetails = true)"><span class="oi oi-collapse-down" aria-hidden="true"></span></button>
                                    }
                                }
                            </div>
                        </div>


                    </li>
                }
            </ul>
        }

        @foreach (var value in Item.Values?.Where(v => v.Key != Constants.Logs.Results.TenantName && v.Key != Constants.Logs.Results.TrackName))
        {
            <div>@value.Key.GetDisplayLogKey(): @value.Value.GetDisplayLogValue()</div>
        }
    }
    else if (Item.Type == LogItemTypes.Trace)
    {
        <div><b>@Item.Type.ToString()</b> @Item.Timestamp.TimeToString()</div>

        @if (Item.Details != null)
        {
            <ul class="list-group">
                @foreach (var detailItem in Item.Details)
                {
                    <li class="list-group-item" style="overflow:auto">
                        <div>@detailItem.Name</div>
                    </li>
                }
            </ul>
        }

        @foreach (var value in Item.Values?.Where(v => v.Key != Constants.Logs.Results.TenantName && v.Key != Constants.Logs.Results.TrackName))
        {
            <div>@value.Key.GetDisplayLogKey(): @value.Value.GetDisplayLogValue()</div>
        }
    }
    else if (Item.Type == LogItemTypes.Event)
    {
        <div><b>@Item.Type.ToString()</b> @Item.Timestamp.TimeToString(), @Item.Values.GetValue(Constants.Logs.Results.Name).GetDisplayName()</div>

        var machineName = @Item.Values.GetValue(Constants.Logs.Results.MachineName);
        if (!machineName.IsNullOrWhiteSpace())
        {
            <div>@Constants.Logs.Results.MachineName.GetDisplayLogKey(): @machineName.GetDisplayLogValue()</div>
        }
        var clientIp = @Item.Values.GetValue(Constants.Logs.Results.ClientIp);
        if (!clientIp.IsNullOrWhiteSpace())
        {
            <div>@Constants.Logs.Results.ClientIp.GetDisplayLogKey(): @clientIp.GetDisplayLogValue()</div>
        }
        var userAgent = @Item.Values.GetValue(Constants.Logs.Results.UserAgent);
        if (!userAgent.IsNullOrWhiteSpace())
        {
            <div>@Constants.Logs.Results.UserAgent.GetDisplayLogKey(): @userAgent.GetDisplayLogValue()</div>
        }
        var sessionId = @Item.Values.GetValue(Constants.Logs.Results.SessionId);
        if (!sessionId.IsNullOrWhiteSpace())
        {
            <div>@Constants.Logs.Results.SessionId.GetDisplayLogKey(): @sessionId.GetDisplayLogValue()</div>
        }
        var downPartyId = @Item.Values.GetValue(Constants.Logs.Results.DownPartyId);
        if (!downPartyId.IsNullOrWhiteSpace())
        {
            <div>@Constants.Logs.Results.DownPartyId.GetDisplayLogKey(): @downPartyId.GetDisplayLogValue()</div>
        }
        var upPartyId = @Item.Values.GetValue(Constants.Logs.Results.UpPartyId);
        if (!upPartyId.IsNullOrWhiteSpace())
        {
            <div>@Constants.Logs.Results.UpPartyId.GetDisplayLogKey(): @upPartyId.GetDisplayLogValue()</div>
        }
        var userId = @Item.Values.GetValue(Constants.Logs.Results.UserId);
        if (!userId.IsNullOrWhiteSpace())
        {
            <div>@Constants.Logs.Results.UserId.GetDisplayLogKey(): @userId.GetDisplayLogValue()</div>
        }
        var email = @Item.Values.GetValue(Constants.Logs.Results.Email);
        if (!email.IsNullOrWhiteSpace())
        {
            <div>@Constants.Logs.Results.Email.GetDisplayLogKey(): @email.GetDisplayLogValue()</div>
        }
        var failingLoginCount = @Item.Values.GetValue(Constants.Logs.Results.FailingLoginCount);
        if (!failingLoginCount.IsNullOrWhiteSpace() && failingLoginCount != "0")
        {
            <div>@Constants.Logs.Results.FailingLoginCount.GetDisplayLogKey(): @failingLoginCount.GetDisplayLogValue()</div>
        }

    }
    else if (Item.Type == LogItemTypes.Metric)
    {
        <div><b>@Item.Type.ToString()</b> @Item.Timestamp.TimeToString()</div>

        @if (Item.Values.TryGetValue(Constants.Logs.Results.Name, out var metricsName))
        {
            <div>@metricsName</div>
        }
        @if (Item.Values.TryGetValue(Constants.Logs.Results.Sum, out var metricsValue))
        {
            <div>Sum: @metricsValue</div>
        }

        var machineName = @Item.Values.GetValue(Constants.Logs.Results.MachineName);
        if (!machineName.IsNullOrWhiteSpace())
        {
            <div>@Constants.Logs.Results.MachineName.GetDisplayLogKey(): @machineName.GetDisplayLogValue()</div>
        }
        var clientIp = @Item.Values.GetValue(Constants.Logs.Results.ClientIp);
        if (!clientIp.IsNullOrWhiteSpace())
        {
            <div>@Constants.Logs.Results.ClientIp.GetDisplayLogKey(): @clientIp.GetDisplayLogValue()</div>
        }
        var userAgent = @Item.Values.GetValue(Constants.Logs.Results.UserAgent);
        if (!userAgent.IsNullOrWhiteSpace())
        {
            <div>@Constants.Logs.Results.UserAgent.GetDisplayLogKey(): @userAgent.GetDisplayLogValue()</div>
        }

        var downPartyId = @Item.Values.GetValue(Constants.Logs.Results.DownPartyId);
        if (!downPartyId.IsNullOrWhiteSpace())
        {
            <div>@Constants.Logs.Results.DownPartyId.GetDisplayLogKey(): @downPartyId.GetDisplayLogValue()</div>
        }
        var upPartyId = @Item.Values.GetValue(Constants.Logs.Results.UpPartyId);
        if (!upPartyId.IsNullOrWhiteSpace())
        {
            <div>@Constants.Logs.Results.UpPartyId.GetDisplayLogKey(): @upPartyId.GetDisplayLogValue()</div>
        }
    }

    @if (IsMasterTenant)
    {
        var tenantName = @Item.Values.GetValue(Constants.Logs.Results.TenantName);
        if (!tenantName.IsNullOrWhiteSpace())
        {
            <div>@Constants.Logs.Results.TenantName.GetDisplayLogKey(): @tenantName.GetDisplayLogValue()</div>
        }
    }
    @if (IsMasterTenant || IsMasterTrack)
    {
        var trackName = @Item.Values.GetValue(Constants.Logs.Results.TrackName);
        if (!trackName.IsNullOrWhiteSpace())
        {
            <div>@Constants.Logs.Results.TrackName.GetDisplayLogKey(): @trackName.GetDisplayLogValue()</div>
        }
    }
</div>

@code {
    [Parameter]
    public LogItemViewModel Item { get; set; }

    [Parameter]
    public bool IsMasterTenant { get; set; }

    [Parameter]
    public bool IsMasterTrack { get; set; }
}


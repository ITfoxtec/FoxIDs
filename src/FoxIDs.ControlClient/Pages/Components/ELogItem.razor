@inherits ComponentBase

<div>

    @if (Item.Type == LogItemTypes.CriticalError || Item.Type == LogItemTypes.Error || Item.Type == LogItemTypes.Warning)
    {
        @if (Item.Type == LogItemTypes.CriticalError || Item.Type == LogItemTypes.Error)
        {
            <div class="text-danger"><b>@(Item.Type == LogItemTypes.CriticalError ? "Critical error" : Item.Type.ToString())</b> @Item.Timestamp.TimeToString()</div>
        }
        else
        {
            <div class="text-warning"><b>@Item.Type.ToString()</b> @Item.Timestamp.TimeToString()</div>
        }

        @if (Item.Details != null)
        {
            <ul class="list-group">
                @foreach (var detailItem in Item.Details)
                {
                    <li class="list-group-item" style="overflow:auto">
                        <div class="row">
                            <div class="col-11">
                                <div>@detailItem.Name</div>
                                @if (detailItem.ShowDetails)
                                {
                                    @foreach (var detail in detailItem.Details)
                                    {
                                        <div>@detail</div>
                                    }
                                }
                            </div>
                            <div class="col-1 text-right">
                                @if (detailItem.Details != null) 
                                {
                                    @if (detailItem.ShowDetails)
                                    {
                                        <button type="button" class="btn btn-link p-0" title="Hide" @onclick="@(e => detailItem.ShowDetails = false)"><span class="oi oi-collapse-up" aria-hidden="true"></span></button>
                                    }
                                    else
                                    {
                                        <button type="button" class="btn btn-link p-0" title="Show" @onclick="@(e => detailItem.ShowDetails = true)"><span class="oi oi-collapse-down" aria-hidden="true"></span></button>
                                    }
                                }
                            </div>
                        </div>


                    </li>
                }
            </ul>
        }

        @foreach (var value in Item.Values)
        {
            <div>@value.Key.GetDisplayLogKey(): @value.Value.GetDisplayLogValue()</div>
        }
    }
    else if (Item.Type == LogItemTypes.Trace)
    {
        <div><b>@Item.Type.ToString()</b> @Item.Timestamp.TimeToString()</div>

        @if (Item.Details != null)
        {
            <ul class="list-group">
                @foreach (var detailItem in Item.Details)
                {
                    <li class="list-group-item" style="overflow:auto">
                        <div>@detailItem.Name</div>
                    </li>
                }
            </ul>
        }

        @foreach (var value in Item.Values)
        {
            <div>@value.Key.GetDisplayLogKey(): @value.Value.GetDisplayLogValue()</div>
        }
    }
    else if (Item.Type == LogItemTypes.Event)
    {
        <div><b>@Item.Type.ToString()</b> @Item.Timestamp.TimeToString(), @Item.Values.GetValue(Constants.Logs.Results.Name)</div>

        <div>@Constants.Logs.Results.ClientIp.GetDisplayLogKey(): @Item.Values.GetValue(Constants.Logs.Results.ClientIp).GetDisplayLogValue()</div>
        <div>@Constants.Logs.Results.UserAgent.GetDisplayLogKey(): @Item.Values.GetValue(Constants.Logs.Results.UserAgent).GetDisplayLogValue()</div>

        var appId = @Item.Values.GetValue(Constants.Logs.Results.DownPartyId);
        if(!appId.IsNullOrWhiteSpace())
        {
            <div>@Constants.Logs.Results.DownPartyId.GetDisplayLogKey(): @appId.GetDisplayLogValue()</div>
        }
        var authMethodId = @Item.Values.GetValue(Constants.Logs.Results.UpPartyId);
        if (!authMethodId.IsNullOrWhiteSpace())
        {
            <div>@Constants.Logs.Results.UpPartyId.GetDisplayLogKey(): @authMethodId.GetDisplayLogValue()</div>
        }
    }
    else if (Item.Type == LogItemTypes.Metric)
    {
        <div><b>@Item.Type.ToString()</b> @Item.Timestamp.TimeToString()</div>

        @if (Item.Values.TryGetValue(Constants.Logs.Results.Name, out var metricsName))
        {
            <div>@metricsName</div>
        }
        @if (Item.Values.TryGetValue(Constants.Logs.Results.Sum, out var metricsValue))
        {
            <div>Sum: @metricsValue</div>
        }

        <div>@Constants.Logs.Results.ClientIp.GetDisplayLogKey(): @Item.Values.GetValue(Constants.Logs.Results.ClientIp).GetDisplayLogValue()</div>
        <div>@Constants.Logs.Results.UserAgent.GetDisplayLogKey(): @Item.Values.GetValue(Constants.Logs.Results.UserAgent).GetDisplayLogValue()</div>

        var appId = @Item.Values.GetValue(Constants.Logs.Results.DownPartyId);
        if (!appId.IsNullOrWhiteSpace())
        {
            <div>@Constants.Logs.Results.DownPartyId.GetDisplayLogKey(): @appId.GetDisplayLogValue()</div>
        }
        var authMethodId = @Item.Values.GetValue(Constants.Logs.Results.UpPartyId);
        if (!authMethodId.IsNullOrWhiteSpace())
        {
            <div>@Constants.Logs.Results.UpPartyId.GetDisplayLogKey(): @authMethodId.GetDisplayLogValue()</div>
        }
    }
</div>

@code {
    [Parameter]
    public LogItemViewModel Item { get; set; }
}


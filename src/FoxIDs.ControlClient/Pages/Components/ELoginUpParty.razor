@inherits UpPartyBase

@{
    var loginUpParty = UpParty as GeneralLoginUpPartyViewModel;
}

<PageEditForm @ref="loginUpParty.Form" TModel="LoginUpPartyViewModel" OnAfterInit="LoginUpPartyViewModelAfterInit" OnValidSubmit="@(async (editContext) => await OnEditLoginUpPartyValidSubmitAsync(loginUpParty, editContext))">
    <div class="modal-header">
        <div>
            Login
        </div>
        <FInputSwitchAdvancedOptions @bind-Value="loginUpParty.ShowAdvanced" />
    </div>
    <div class="modal-body">
        @if (loginUpParty.CreateMode)
        {
            <div class="mb-3 alert alert-info" role="alert">
                The user is authenticated with the track's user repository and the user session is connected to this up-party login configuration.
            </div>
            <FInputText @bind-Value="loginUpParty.Form.Model.Name" For="@(() => loginUpParty.Form.Model.Name)" Focus="true" />
        }
        else
        {
            <FFieldText @bind-Value="loginUpParty.Form.Model.Name" For="@(() => loginUpParty.Form.Model.Name)" />
        }
        @if (loginUpParty.ShowAdvanced)
        {
            <FInputText @bind-Value="loginUpParty.Form.Model.Note" For="@(() => loginUpParty.Form.Model.Note)" />
        }

        <ul class="nav nav-tabs">
            <li class="nav-item">
                @if (loginUpParty.ShowLoginTab)
                {
                    <a class="nav-link active">Login</a>
                }
                else
                {
                    <button type="button" class="btn btn-link nav-link" @onclick="@(() => ShowLoginTab(loginUpParty, LoginTabTypes.Login))">Login</button>
                }
            </li>
            <li class="nav-item">
                @if (loginUpParty.ShowClaimTransformTab)
                {
                    <a class="nav-link active">Claim transform</a>
                }
                else
                {
                    <button type="button" class="btn btn-link nav-link" @onclick="@(() => ShowLoginTab(loginUpParty, LoginTabTypes.ClaimsTransform))">Claim transform</button>
                }
            </li>
            @if (loginUpParty.Form.Model.EnableCreateUser) {
                <li class="nav-item">
                    @if (loginUpParty.ShowCreateUserTab)
                    {
                        <a class="nav-link active">Create user</a>
                    }
                    else
                    {
                        <button type="button" class="btn btn-link nav-link" @onclick="@(() => ShowLoginTab(loginUpParty, LoginTabTypes.CreateUser))">Create user</button>
                    }
                </li>
            }
            <li class="nav-item">
                @if (loginUpParty.ShowSessionTab)
                {
                    <a class="nav-link active">User session</a>
                }
                else
                {
                    <button type="button" class="btn btn-link nav-link" @onclick="@(() => ShowLoginTab(loginUpParty, LoginTabTypes.Session))">User session</button>
                }
            </li>
            <li class="nav-item">
                @if (loginUpParty.ShowHrdTab)
                {
                    <a class="nav-link active">Home Realm Discovery</a>
                }
                else
                {
                    <button type="button" class="btn btn-link nav-link" @onclick="@(() => ShowLoginTab(loginUpParty, LoginTabTypes.Hrd))">Home Realm Discovery</button>
                }
            </li>
        </ul>

        <div class="tab-content pt-3">
            @if (loginUpParty.ShowLoginTab)
            {
                <FInputToggle @bind-Value="loginUpParty.Form.Model.EnableCancelLogin" For="@(() => loginUpParty.Form.Model.EnableCancelLogin)" TextType="e.d" />
                <FInputToggle @bind-Value="loginUpParty.Form.Model.EnableCreateUser" For="@(() => loginUpParty.Form.Model.EnableCreateUser)" TextType="e.d" />
                <FInputToggle @bind-Value="loginUpParty.Form.Model.EnableResetPassword" For="@(() => loginUpParty.Form.Model.EnableResetPassword)" TextType="e.d" />
                <FInputText @bind-Value="loginUpParty.Form.Model.TwoFactorAppName" For="@(() => loginUpParty.Form.Model.TwoFactorAppName)" />
                <FInputToggle @bind-Value="loginUpParty.Form.Model.RequireTwoFactor" For="@(() => loginUpParty.Form.Model.RequireTwoFactor)" TextType="y.n" />                
                @if (loginUpParty.ShowAdvanced)
                {
                    <FInputSelect @bind-Value="loginUpParty.Form.Model.LogoutConsent" For="@(() => loginUpParty.Form.Model.LogoutConsent)">
                        <option value="@LoginUpPartyLogoutConsents.IfRequired">If required</option>
                        <option value="@LoginUpPartyLogoutConsents.Always">Always</option>
                        <option value="@LoginUpPartyLogoutConsents.Never">Never</option>
                    </FInputSelect>
                    <FInputToggle @bind-Value="loginUpParty.Form.Model.EnableSingleLogout" For="@(() => loginUpParty.Form.Model.EnableSingleLogout)" TextType="e.d" />
                    <FInputText @bind-Value="loginUpParty.Form.Model.Title" For="@(() => loginUpParty.Form.Model.Title)" />
                    <FInputText @bind-Value="loginUpParty.Form.Model.IconUrl" For="@(() => loginUpParty.Form.Model.IconUrl)" />
                    <FInputTextArea @bind-Value="loginUpParty.Form.Model.Css" For="@(() => loginUpParty.Form.Model.Css)" />
                }
            }
            else if (loginUpParty.ShowClaimTransformTab)
            {
                <OAuthClaimTransforms Model="loginUpParty.Form.Model" />
            }
            else if (loginUpParty.ShowCreateUserTab)
            {
                <FInputToggle @bind-Value="loginUpParty.Form.Model.CreateUser.ConfirmAccount" For="@(() => loginUpParty.Form.Model.CreateUser.ConfirmAccount)" TextType="y.n" />
                <FInputToggle @bind-Value="loginUpParty.Form.Model.CreateUser.RequireMultiFactor" For="@(() => loginUpParty.Form.Model.CreateUser.RequireMultiFactor)" TextType="y.n" />
                <DynamicElements Model="loginUpParty.Form.Model.CreateUser" />
                <OAuthClaimTransforms Model="loginUpParty.Form.Model.CreateUser" />
            }
            else if (loginUpParty.ShowSessionTab)
            {
                <UpPartySessionLifetime Model="loginUpParty.Form.Model" />
            }
            else if (loginUpParty.ShowHrdTab)
            {
                <UpPartyHrd Model="loginUpParty.Form.Model" />
            }
        </div>
    </div>
    @if (!loginUpParty.CreateMode && loginUpParty.DeleteAcknowledge)
    {
        <div class="modal-footer">
            <div class="alert alert-danger" role="alert">
                <div>
                    You are about to delete login up-party "@UpParty.Name", are you sure?
                </div>

                <div class="mt-3">
                    <button type="button" class="btn btn-secondary" @onclick="@(async () => await DeleteLoginUpPartyAsync(loginUpParty))">Yes delete</button>
                    <button type="button" class="btn btn-secondary" @onclick="@(() => loginUpParty.DeleteAcknowledge = false)">No</button>
                </div>
            </div>
        </div>
    }
    <div class="modal-footer">
        @if (!loginUpParty.CreateMode)
        {
            <button type="button" class="btn btn-link" @onclick="@(() => loginUpParty.DeleteAcknowledge = true)">Delete</button>
        }
        <button type="submit" class="btn btn-primary">@(@loginUpParty.CreateMode ? "Create" : "Update")</button>
        <button type="button" class="btn btn-secondary" @onclick="@(() => UpPartyCancelAsync(UpParty))">@(@loginUpParty.CreateMode ? "Cancel" : "Close")</button>
    </div>
</PageEditForm>
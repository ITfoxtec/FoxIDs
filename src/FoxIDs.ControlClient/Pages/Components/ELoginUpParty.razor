@inherits UpPartyBase

@{
    var loginUpParty = UpParty as GeneralLoginUpPartyViewModel;
}

<PageEditForm @ref="loginUpParty.Form" TModel="LoginUpPartyViewModel" OnAfterInit="@(async m => await LoginUpPartyViewModelAfterInitAsync(loginUpParty, m))" OnValidSubmit="@(async (editContext) => await OnEditLoginUpPartyValidSubmitAsync(loginUpParty, editContext))">
    <div class="modal-header">
        <div class="h5 d-flex flex-nowrap align-items-center mb-0" style="min-width: 0; overflow: hidden;">
            <span class="text-nowrap flex-shrink-1" style="flex: 1 1 auto; min-width: 0; overflow: hidden;">User Login UI</span>
            <span class="ml-2 text-muted flex-fill text-truncate" style="flex: 1 1 auto; min-width: 0; overflow: hidden;">@loginUpParty.Form.Model.DisplayName</span>
        </div>
        <FInputSwitchAdvancedOptions @bind-Value="loginUpParty.ShowAdvanced" />
    </div>
    <div class="modal-body">
        <div class="info-text">
            <DocsLink Page="users">Users</DocsLink> can authenticate with the environment's user store or choose another authentication method. The user interface is customizable.
            <br />
            The users' sessions are associated with this  <DocsLink Page="login">Login</DocsLink> authentication method.
        </div>

        <FInputText @bind-Value="loginUpParty.Form.Model.DisplayName" For="@(() => loginUpParty.Form.Model.DisplayName)" Focus="loginUpParty.CreateMode" />
        @if (loginUpParty.ShowAdvanced)
        {
            @if (loginUpParty.CreateMode || loginUpParty.Form.Model.Name != Constants.DefaultLogin.Name)
            {
                <FInputText @bind-Value="loginUpParty.Form.Model.Name" For="@(() => loginUpParty.Form.Model.Name)" />
            }
            else
            {
                <FFieldText @bind-Value="loginUpParty.Form.Model.Name" For="@(() => loginUpParty.Form.Model.Name)" />
            }

            <FInputText @bind-Value="loginUpParty.Form.Model.Note" For="@(() => loginUpParty.Form.Model.Note)" />
        }

        <ul class="nav nav-tabs">
            <li class="nav-item">
                @if (loginUpParty.ShowLoginTab)
                {
                    <a class="nav-link active">Login</a>
                }
                else
                {
                    <button type="button" class="btn btn-link nav-link" @onclick="@(() => ShowLoginTab(loginUpParty, LoginTabTypes.Login))">Login</button>
                }
            </li>
            <li class="nav-item">
                @if (loginUpParty.ShowLoginUiTab)
                {
                    <a class="nav-link active">Login UI</a>
                }
                else
                {
                    <button type="button" class="btn btn-link nav-link" @onclick="@(() => ShowLoginTab(loginUpParty, LoginTabTypes.LoginUi))">Login UI</button>
                }
            </li>
            <li class="nav-item">
                @if (loginUpParty.ShowClaimTransformTab)
                {
                    <a class="nav-link active">Claim Transform</a>
                }
                else
                {
                    <button type="button" class="btn btn-link nav-link" @onclick="@(() => ShowLoginTab(loginUpParty, LoginTabTypes.ClaimsTransform))">Claim Transform</button>
                }
            </li>
            @if (loginUpParty.ShowAdvanced)
            {
                <li class="nav-item">
                    @if (loginUpParty.ShowExtendedUiTab)
                    {
                        <a class="nav-link active">Extended UI</a>
                    }
                    else
                    {
                        <button type="button" class="btn btn-link nav-link" @onclick="@(() => ShowLoginTab(loginUpParty, LoginTabTypes.ExtendedUi))">Extended UI</button>
                    }
                </li>
            }
            @if (loginUpParty.Form.Model.EnableCreateUser)
            {
                <li class="nav-item">
                    @if (loginUpParty.ShowCreateUserTab)
                    {
                        <a class="nav-link active">Create Users</a>
                    }
                    else
                    {
                        <button type="button" class="btn btn-link nav-link" @onclick="@(() => ShowLoginTab(loginUpParty, LoginTabTypes.CreateUser))">Create Users</button>
                    }
                </li>
            }
            else
            {
                loginUpParty.Form.Model.CreateUser = null;
            }
            @if (loginUpParty.ShowAdvanced)
            {
                <li class="nav-item">
                    @if (loginUpParty.ShowSessionTab)
                    {
                        <a class="nav-link active">User Session</a>
                    }
                    else
                    {
                        <button type="button" class="btn btn-link nav-link" @onclick="@(() => ShowLoginTab(loginUpParty, LoginTabTypes.Session))">User Session</button>
                    }
                </li>
            }
            <li class="nav-item">
                @if (loginUpParty.ShowHrdTab)
                {
                    <a class="nav-link active">HRD</a>
                }
                else
                {
                    <button type="button" class="btn btn-link nav-link" @onclick="@(() => ShowLoginTab(loginUpParty, LoginTabTypes.Hrd))">HRD</button>
                }
            </li>
        </ul>

        <div class="tab-content pt-3">
            @if (loginUpParty.ShowLoginTab)
            {
                <FInputToggle @bind-Value="loginUpParty.Form.Model.EnableCreateUser" For="@(() => loginUpParty.Form.Model.EnableCreateUser)" TextType="e.d" />
                <div class="active-group active">
                    <div class="card">
                        <div class="card-body pb-0">
                            <div class="info-text">Select which user identifier texts to display in the login UI. All user identifiers defined on a user can always be used.</div>
                            <FInputToggle @bind-Value="loginUpParty.Form.Model.EnableUsernameIdentifier" For="@(() => loginUpParty.Form.Model.EnableUsernameIdentifier)" TextType="e.d" />
                            <FInputToggle @bind-Value="loginUpParty.Form.Model.EnablePhoneIdentifier" For="@(() => loginUpParty.Form.Model.EnablePhoneIdentifier)" TextType="e.d" />
                            <FInputToggle @bind-Value="loginUpParty.Form.Model.EnableEmailIdentifier" For="@(() => loginUpParty.Form.Model.EnableEmailIdentifier)" TextType="e.d" />
                        </div>
                    </div>
                    <label class="label-control">User identifiers</label>
                </div>
                <div class="active-group active">
                    <div class="card">
                        <div class="card-body pt-3 pb-0">
                            <FInputToggleN @bind-Value="loginUpParty.Form.Model.DisablePasswordAuth" For="@(() => loginUpParty.Form.Model.DisablePasswordAuth)" Negation="true" TextType="e.d" />
                            <FInputToggleN @bind-Value="loginUpParty.Form.Model.EnablePasswordlessEmail" For="@(() => loginUpParty.Form.Model.EnablePasswordlessEmail)" TextType="e.d" />
                            <FInputToggleN @bind-Value="loginUpParty.Form.Model.EnablePasswordlessSms" For="@(() => loginUpParty.Form.Model.EnablePasswordlessSms)" TextType="e.d" />
                        </div>
                    </div>
                    <label class="label-control">Authentication</label>
                </div>
                @if (loginUpParty.ShowAdvanced)
                {
                    @if (!(loginUpParty.Form.Model.DisablePasswordAuth == true))
                    {
                        <FInputToggle @bind-Value="loginUpParty.Form.Model.DisableSetPassword" For="@(() => loginUpParty.Form.Model.DisableSetPassword)" Negation="true" TextType="e.d" />
                    }
                    <FInputToggle @bind-Value="loginUpParty.Form.Model.DeleteRefreshTokenGrantsOnChangePassword" For="@(() => loginUpParty.Form.Model.DeleteRefreshTokenGrantsOnChangePassword)" TextType="e.d" />
                }
                @if (loginUpParty.ShowAdvanced)
                {
                    <div class="active-group active">
                        <div class="card">
                            <div class="card-body pt-2 pb-0">
                                <div class="info-text">Choose which two-factor options should be available to the users.</div>
                                <FInputToggle @bind-Value="loginUpParty.Form.Model.DisableTwoFactorApp" For="@(() => loginUpParty.Form.Model.DisableTwoFactorApp)" Negation="true" TextType="e.d" />
                                <FInputToggle @bind-Value="loginUpParty.Form.Model.DisableTwoFactorSms" For="@(() => loginUpParty.Form.Model.DisableTwoFactorSms)" Negation="true" TextType="e.d" />
                                <FInputToggle @bind-Value="loginUpParty.Form.Model.DisableTwoFactorEmail" For="@(() => loginUpParty.Form.Model.DisableTwoFactorEmail)" Negation="true" TextType="e.d" />
                                <FInputText @bind-Value="loginUpParty.Form.Model.TwoFactorAppName" For="@(() => loginUpParty.Form.Model.TwoFactorAppName)" />
                                <FInputToggle @bind-Value="loginUpParty.Form.Model.RequireTwoFactor" For="@(() => loginUpParty.Form.Model.RequireTwoFactor)" TextType="y.n" />
                            </div>
                        </div>
                        <label class="label-control">Two-factor</label>
                    </div>
                    <FInputToggle @bind-Value="loginUpParty.Form.Model.EnableCancelLogin" For="@(() => loginUpParty.Form.Model.EnableCancelLogin)" TextType="e.d" />
                    <FInputSelect @bind-Value="loginUpParty.Form.Model.LogoutConsent" For="@(() => loginUpParty.Form.Model.LogoutConsent)">
                        <option value="@LoginUpPartyLogoutConsents.IfRequired">If required</option>
                        <option value="@LoginUpPartyLogoutConsents.Always">Always</option>
                        <option value="@LoginUpPartyLogoutConsents.Never">Never</option>
                    </FInputSelect>
                    <FInputToggle @bind-Value="loginUpParty.Form.Model.DisableSingleLogout" For="@(() => loginUpParty.Form.Model.DisableSingleLogout)" Negation="true" TextType="e.d" />
                }
            }
            else if (loginUpParty.ShowLoginUiTab)
            {
                <div class="active-group active">
                    <div class="card">
                        <div class="card-body pt-2 pb-0">
                            <FInputText @bind-Value="loginUpParty.Form.Model.Title" For="@(() => loginUpParty.Form.Model.Title)" />
                            <FInputText @bind-Value="loginUpParty.Form.Model.IconUrl" For="@(() => loginUpParty.Form.Model.IconUrl)" />
                            <FInputTextArea @bind-Value="loginUpParty.Form.Model.Css" For="@(() => loginUpParty.Form.Model.Css)" rows="@CssTextAreaRows" />
                            <div class="mb-2">
                                <button type="button" class="btn btn-link btn-sm pl-0 pt-0" @onclick="OpenCssGenerator">Generate CSS snippets</button>
                            </div>
                        </div>
                    </div>
                    <label class="label-control">Customize login UI</label>
                </div>
                @if (loginUpParty.ShowAdvanced)
                {
                    <LoginDynamicElements Model="loginUpParty.Form.Model.Elements" />
                }
            }
            else if (loginUpParty.ShowClaimTransformTab)
            {
                <div class="active-group active">
                    <div class="card">
                        <div class="card-body">
                            <div class="info-text" role="alert">
                                The first-level claim transforms is executed after the user has logged in and before the optional extended UI.
                            </div>
                            <OAuthClaimTransforms ClaimTransforms="loginUpParty.Form.Model.ClaimTransforms" />
                        </div>
                    </div>
                    <label class="label-control">First-level claim transforms</label>
                </div>
                <div class="active-group active">
                    <div class="card">
                        <div class="card-body">
                            <div class="info-text" role="alert">
                                The second-level claim transforms are executed after the optional extended UI.
                            </div>
                            <OAuthClaimTransforms ClaimTransforms="loginUpParty.Form.Model.ExitClaimTransforms" />
                        </div>
                    </div>
                    <label class="label-control">Second-level claim transforms</label>
                </div>
                <div class="alert alert-info" role="alert">
                    If you create a new claim in the claim transforms the claim is forwarded to the application registration where you need to add the claim or '*' to the 'Issue claims' list or alternative add the claim to a scopes 'Voluntary claims' list.
                </div>
            }
            else if (loginUpParty.ShowExtendedUiTab)
            {
                @if (loginUpParty.Form.Model.ExtendedUis != null)
                {
                    <ExtendedUi Model="loginUpParty.Form.Model.ExtendedUis" />
                }
            }
            else if (loginUpParty.ShowCreateUserTab)
            {
                @if (loginUpParty.Form.Model.CreateUser != null)
                {
                    <FInputToggle @bind-Value="loginUpParty.Form.Model.CreateUser.ConfirmAccount" For="@(() => loginUpParty.Form.Model.CreateUser.ConfirmAccount)" TextType="y.n" />
                    <FInputToggle @bind-Value="loginUpParty.Form.Model.CreateUser.RequireMultiFactor" For="@(() => loginUpParty.Form.Model.CreateUser.RequireMultiFactor)" TextType="y.n" />

                    <div class="active-group active">
                        <div class="card">
                            <div class="card-body">
                                <div class="info-text">
                                    Add a sign-up UI with required and optional fields using dynamic elements.
                                    <div class="pb-2"></div>
                                    In order to support multiple languages, the different texts are written as English texts and translations are added under Settings and Texts.
                                </div>
                                <DynamicElements Model="loginUpParty.Form.Model.CreateUser" InternalUsers="true" />
                            </div>
                        </div>
                        <label class="label-control">Sign-up UI</label>
                    </div>

                    <div class="active-group active">
                        <div class="card">
                            <div class="card-body">
                                <div class="info-text pb-0 mb-0">The claim transforms is performed after the user has signed up, but before the user is saved.</div>
                                <OAuthClaimTransforms ClaimTransforms="loginUpParty.Form.Model.CreateUser.ClaimTransforms" ExcludeDkPrivilege="true" IsLoginCreateUser="true" />
                            </div>
                        </div>
                        <label class="label-control">Create user claim transforms</label>
                    </div>
                }
            }
            else if (loginUpParty.ShowSessionTab)
            {
                <UpPartySessionLifetime Model="loginUpParty.Form.Model" />
            }
            else if (loginUpParty.ShowHrdTab)
            {
                <UpPartyHrd Model="loginUpParty.Form.Model" />
            }
        </div>
    </div>
    @if (!loginUpParty.CreateMode && loginUpParty.DeleteAcknowledge)
    {
        <div class="modal-footer">
            <div class="alert alert-danger" role="alert">
                <div>
                    You are about to delete login application "@(UpParty.DisplayName ?? UpParty.Name)", are you sure?
                </div>

                <div class="mt-3">
                    <button type="button" class="btn btn-secondary" @onclick="@(async () => await DeleteLoginUpPartyAsync(loginUpParty))">Yes delete</button>
                    <button type="button" class="btn btn-secondary" @onclick="@(() => loginUpParty.DeleteAcknowledge = false)">No</button>
                </div>
            </div>
        </div>
    }
    <div class="modal-footer">
        @if (!loginUpParty.CreateMode)
        {
            <button type="button" class="btn btn-link" @onclick="@(() => loginUpParty.DeleteAcknowledge = true)">Delete</button>
            <button type="button" class="btn btn-outline-dark" @onclick="@(async () => await OnTestUpParty.InvokeAsync(loginUpParty))">
                Test authentication
            </button>
        }
        <button type="submit" class="btn btn-primary">@(@loginUpParty.CreateMode ? "Create" : "Update")</button>
        <button type="button" class="btn btn-secondary" @onclick="@(() => UpPartyCancelAsync(UpParty))">@(@loginUpParty.CreateMode ? "Cancel" : "Close")</button>
    </div>

    @if (showCssGenerator)
    {
        <div class="modal fade show d-block" tabindex="-1" role="dialog" aria-modal="true" aria-labelledby="cssGeneratorTitle">
            <div class="modal-dialog modal-lg modal-dialog-scrollable" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="cssGeneratorTitle">CSS snippet generator</h5>
                        <button type="button" class="close" aria-label="Close" @onclick="CloseCssGenerator">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="info-text mb-3">
                            Quickly build login UI styles. See more examples in <a href="https://www.foxids.com/docs/name-title-icon-css#css-examples" target="_blank" rel="noopener noreferrer">FoxIDs documentation</a>.
                        </div>

                        <ul class="list-group">
                            <li class="list-group-item @(themeSectionExpanded ? "active p-0" : "d-flex justify-content-between align-items-center")">
                                @if (!themeSectionExpanded)
                                {
                                    <button type="button" class="btn btn-link" @onclick="ToggleThemeSection">
                                        Input and button color
                                    </button>
                                }
                                else
                                {
                                    <div class="modal-header">
                                        <button type="button" class="btn btn-link" @onclick="ToggleThemeSection">
                                            Input and button color
                                        </button>
                                    </div>
                                    <div class="modal-body">
                                        <div class="row">
                                            <div class="col-md-4 col-sm-6 mb-3">
                                                <label class="col-form-label-sm">Primary color (hex)</label>
                                                <input type="text" class="form-control" placeholder="#a4c700" @bind="themeColorHex" @bind:event="oninput" />
                                            </div>
                                            <div class="col-md-4 col-sm-6 mb-3">
                                                <label class="col-form-label-sm">Border color (hex)</label>
                                                <input type="text" class="form-control" placeholder="#454545" @bind="themeBorderHex" @bind:event="oninput" />
                                            </div>
                                            <div class="col-md-4 col-sm-6 mb-3">
                                                <label class="col-form-label-sm">Active darken %</label>
                                                <input type="number" class="form-control" min="0" max="100" step="1" @bind="themeActiveDarkenPercent" />
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-md-4 col-sm-6 mb-3">
                                                <label class="col-form-label-sm d-block">Preview</label>
                                                <div class="d-flex align-items-center">
                                                    <input type="text" class="form-control" value="@ThemeColorHexDisplay" readonly />
                                                    <span class="color-preview ml-2" style="width: 2rem; height: 2rem; border: 1px solid #ced4da; background-color: @ThemeColorHexDisplay;"></span>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="mb-3">
                                            <button type="button" class="btn btn-primary btn-sm mr-2" @onclick="GenerateThemeCssSnippet">Generate</button>
                                            <button type="button" class="btn btn-secondary btn-sm mr-2" disabled="@(!HasThemeCss)" @onclick="AppendThemeCssToModel">Add to CSS field</button>
                                            <a href="" class="btn btn-link btn-sm px-0 @(HasThemeCss ? string.Empty : "disabled")" @onclick="CopyThemeCssAsync" @onclick:preventDefault>Copy to clipboard</a>
                                        </div>
                                        @if (!string.IsNullOrWhiteSpace(themeCssError))
                                        {
                                            <div class="text-danger small">@themeCssError</div>
                                        }
                                        @if (HasThemeCss)
                                        {
                                            <textarea class="form-control" rows="12" readonly>@themeCssSnippet</textarea>
                                        }
                                    </div>
                                }
                            </li>
                            <li class="list-group-item @(backgroundSectionExpanded ? "active p-0" : "d-flex justify-content-between align-items-center")">
                                @if (!backgroundSectionExpanded)
                                {
                                    <button type="button" class="btn btn-link" @onclick="ToggleBackgroundSection">
                                        Background color
                                    </button>
                                }
                                else
                                {
                                    <div class="modal-header">
                                        <button type="button" class="btn btn-link" @onclick="ToggleBackgroundSection">
                                            Background color
                                        </button>
                                    </div>
                                    <div class="modal-body">
                                        <div class="row">
                                            <div class="col-md-4 col-sm-6 mb-3">
                                                <label class="col-form-label-sm">Background color (hex)</label>
                                                <input type="text" class="form-control" placeholder="#ddddc0" @bind="backgroundColorHex" @bind:event="oninput" />
                                            </div>
                                            <div class="col-md-4 col-sm-6 mb-3">
                                                <label class="col-form-label-sm d-block">Preview</label>
                                                <div class="d-flex align-items-center">
                                                    <input type="text" class="form-control" value="@BackgroundColorHexDisplay" readonly />
                                                    <span class="color-preview ml-2" style="width: 2rem; height: 2rem; border: 1px solid #ced4da; background-color: @BackgroundColorHexDisplay;"></span>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="mb-3">
                                            <button type="button" class="btn btn-primary btn-sm mr-2" @onclick="GenerateBackgroundCssSnippet">Generate</button>
                                            <button type="button" class="btn btn-secondary btn-sm mr-2" disabled="@(!HasBackgroundCss)" @onclick="AppendBackgroundCssToModel">Add to CSS field</button>
                                            <a href="" class="btn btn-link btn-sm px-0 @(HasBackgroundCss ? string.Empty : "disabled")" @onclick="CopyBackgroundCssAsync" @onclick:preventDefault>Copy to clipboard</a>
                                        </div>
                                        @if (!string.IsNullOrWhiteSpace(backgroundCssError))
                                        {
                                            <div class="text-danger small">@backgroundCssError</div>
                                        }
                                        @if (HasBackgroundCss)
                                        {
                                            <textarea class="form-control" rows="4" readonly>@backgroundCssSnippet</textarea>
                                        }
                                    </div>
                                }
                            </li>
                        </ul>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseCssGenerator">Close</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }
</PageEditForm>








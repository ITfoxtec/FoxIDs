@inherits UpPartyBase

@{
    var loginUpParty = UpParty as GeneralLoginUpPartyViewModel;
}

<PageEditForm @ref="loginUpParty.Form" TModel="LoginUpPartyViewModel" OnAfterInit="@(async m => await LoginUpPartyViewModelAfterInitAsync(loginUpParty, m))" OnValidSubmit="@(async (editContext) => await OnEditLoginUpPartyValidSubmitAsync(loginUpParty, editContext))">
    <div class="modal-header">
        <div class="h5">
            User Login UI
        </div>
        <FInputSwitchAdvancedOptions @bind-Value="loginUpParty.ShowAdvanced" />
    </div>
    <div class="modal-body">
        <div class="info-text">
            <DocsLink Page="users">Users</DocsLink> can authenticate with the environment's user store or choose another authentication method. The user interface is customizable.
            <br />
            The users' sessions are associated with this  <DocsLink Page="login">Login</DocsLink> authentication method.
        </div>

        <FInputText @bind-Value="loginUpParty.Form.Model.DisplayName" For="@(() => loginUpParty.Form.Model.DisplayName)" Focus="loginUpParty.CreateMode" />
        @if (loginUpParty.ShowAdvanced)
        {
            @if (loginUpParty.CreateMode || loginUpParty.Form.Model.Name != Constants.DefaultLogin.Name)
            {
                <FInputText @bind-Value="loginUpParty.Form.Model.Name" For="@(() => loginUpParty.Form.Model.Name)" />
            }
            else
            {
                <FFieldText @bind-Value="loginUpParty.Form.Model.Name" For="@(() => loginUpParty.Form.Model.Name)" />
            }

            <FInputText @bind-Value="loginUpParty.Form.Model.Note" For="@(() => loginUpParty.Form.Model.Note)" />
        }

        <ul class="nav nav-tabs">
            <li class="nav-item">
                @if (loginUpParty.ShowLoginTab)
                {
                    <a class="nav-link active">Login</a>
                }
                else
                {
                    <button type="button" class="btn btn-link nav-link" @onclick="@(() => ShowLoginTab(loginUpParty, LoginTabTypes.Login))">Login</button>
                }
            </li>
            <li class="nav-item">
                @if (loginUpParty.ShowClaimTransformTab)
                {
                    <a class="nav-link active">Claim Transform</a>
                }
                else
                {
                    <button type="button" class="btn btn-link nav-link" @onclick="@(() => ShowLoginTab(loginUpParty, LoginTabTypes.ClaimsTransform))">Claim Transform</button>
                }
            </li>
            @if (loginUpParty.Form.Model.EnableCreateUser) {
                <li class="nav-item">
                    @if (loginUpParty.ShowCreateUserTab)
                    {
                        <a class="nav-link active">Create Users</a>
                    }
                    else
                    {
                        <button type="button" class="btn btn-link nav-link" @onclick="@(() => ShowLoginTab(loginUpParty, LoginTabTypes.CreateUser))">Create Users</button>
                    }
                </li>
            }
            else
            {
                loginUpParty.Form.Model.CreateUser = null;
            }
            @if (loginUpParty.ShowAdvanced)
            {
                <li class="nav-item">
                    @if (loginUpParty.ShowSessionTab)
                    {
                        <a class="nav-link active">User Session</a>
                    }
                    else
                    {
                        <button type="button" class="btn btn-link nav-link" @onclick="@(() => ShowLoginTab(loginUpParty, LoginTabTypes.Session))">User Session</button>
                    }
                </li>
            }
            <li class="nav-item">
                @if (loginUpParty.ShowHrdTab)
                {
                    <a class="nav-link active">Home Realm Discovery</a>
                }
                else
                {
                    <button type="button" class="btn btn-link nav-link" @onclick="@(() => ShowLoginTab(loginUpParty, LoginTabTypes.Hrd))">Home Realm Discovery</button>
                }
            </li>
        </ul>

        <div class="tab-content pt-3">
            @if (loginUpParty.ShowLoginTab)
            {
                <FInputToggle @bind-Value="loginUpParty.Form.Model.EnableCreateUser" For="@(() => loginUpParty.Form.Model.EnableCreateUser)" TextType="e.d" />
                <div class="active-group active">
                    <div class="card">
                        <div class="card-body pb-0">
                            <div class="info-text">Select which user identifier texts to display in the login UI. All user identifiers defined on a user can always be used.</div>
                            <FInputToggle @bind-Value="loginUpParty.Form.Model.EnableUsernameIdentifier" For="@(() => loginUpParty.Form.Model.EnableUsernameIdentifier)" TextType="e.d" />
                            <FInputToggle @bind-Value="loginUpParty.Form.Model.EnablePhoneIdentifier" For="@(() => loginUpParty.Form.Model.EnablePhoneIdentifier)" TextType="e.d" />
                            <FInputToggle @bind-Value="loginUpParty.Form.Model.EnableEmailIdentifier" For="@(() => loginUpParty.Form.Model.EnableEmailIdentifier)" TextType="e.d" />
                        </div>
                    </div>
                    <label class="label-control">User identifiers</label>
                </div>
                <div class="active-group active">
                    <div class="card">
                    <div class="card-body pt-3 pb-0">
                        <FInputToggleN @bind-Value="loginUpParty.Form.Model.DisablePasswordAuth" For="@(() => loginUpParty.Form.Model.DisablePasswordAuth)" Negation="true" TextType="e.d" />
                        <FInputToggleN @bind-Value="loginUpParty.Form.Model.EnablePasswordlessEmail" For="@(() => loginUpParty.Form.Model.EnablePasswordlessEmail)" TextType="e.d" />
                        <FInputToggleN @bind-Value="loginUpParty.Form.Model.EnablePasswordlessSms" For="@(() => loginUpParty.Form.Model.EnablePasswordlessSms)" TextType="e.d" />
                    </div>
                    </div>
                    <label class="label-control">Authentication</label>
                </div>
                @if (loginUpParty.ShowAdvanced)
                {
                    @if (!(loginUpParty.Form.Model.DisablePasswordAuth == true))
                    {
                        <FInputToggle @bind-Value="loginUpParty.Form.Model.DisableSetPassword" For="@(() => loginUpParty.Form.Model.DisableSetPassword)" Negation="true" TextType="e.d" />
                    }
                    <FInputToggle @bind-Value="loginUpParty.Form.Model.DeleteRefreshTokenGrantsOnChangePassword" For="@(() => loginUpParty.Form.Model.DeleteRefreshTokenGrantsOnChangePassword)" TextType="e.d" />
                }
                @if (loginUpParty.ShowAdvanced)
                {
                    <div class="active-group active">
                        <div class="card">
                            <div class="card-body pt-2 pb-0">
                                <div class="info-text">Choose which two-factor options should be available to the users.</div>
                                <FInputToggle @bind-Value="loginUpParty.Form.Model.DisableTwoFactorApp" For="@(() => loginUpParty.Form.Model.DisableTwoFactorApp)" Negation="true" TextType="e.d" />
                                <FInputToggle @bind-Value="loginUpParty.Form.Model.DisableTwoFactorSms" For="@(() => loginUpParty.Form.Model.DisableTwoFactorSms)" Negation="true" TextType="e.d" />
                                <FInputToggle @bind-Value="loginUpParty.Form.Model.DisableTwoFactorEmail" For="@(() => loginUpParty.Form.Model.DisableTwoFactorEmail)" Negation="true" TextType="e.d" />
                                <FInputText @bind-Value="loginUpParty.Form.Model.TwoFactorAppName" For="@(() => loginUpParty.Form.Model.TwoFactorAppName)" />
                                <FInputToggle @bind-Value="loginUpParty.Form.Model.RequireTwoFactor" For="@(() => loginUpParty.Form.Model.RequireTwoFactor)" TextType="y.n" />
                            </div>
                        </div>
                        <label class="label-control">Two-factor</label>
                    </div>
                    <FInputToggle @bind-Value="loginUpParty.Form.Model.EnableCancelLogin" For="@(() => loginUpParty.Form.Model.EnableCancelLogin)" TextType="e.d" />
                    <FInputSelect @bind-Value="loginUpParty.Form.Model.LogoutConsent" For="@(() => loginUpParty.Form.Model.LogoutConsent)">
                        <option value="@LoginUpPartyLogoutConsents.IfRequired">If required</option>
                        <option value="@LoginUpPartyLogoutConsents.Always">Always</option>
                        <option value="@LoginUpPartyLogoutConsents.Never">Never</option>
                    </FInputSelect>
                    <FInputToggle @bind-Value="loginUpParty.Form.Model.DisableSingleLogout" For="@(() => loginUpParty.Form.Model.DisableSingleLogout)" Negation="true" TextType="e.d" />
                }
                <div class="active-group active">
                    <div class="card">
                        <div class="card-body pt-2 pb-0">
                            <FInputText @bind-Value="loginUpParty.Form.Model.Title" For="@(() => loginUpParty.Form.Model.Title)" />
                            <FInputText @bind-Value="loginUpParty.Form.Model.IconUrl" For="@(() => loginUpParty.Form.Model.IconUrl)" />
                            <FInputTextArea @bind-Value="loginUpParty.Form.Model.Css" For="@(() => loginUpParty.Form.Model.Css)" />
                        </div>
                    </div>
                    <label class="label-control">Customize login UI</label>
                </div>
            }
            else if (loginUpParty.ShowClaimTransformTab)
            {
                <div class="active-group active">
                    <div class="card">
                        <div class="card-body">
                            <div class="info-text" role="alert">
                                The first-level claim transforms is executed after the user has logged in and before the optional extended UI.
                            </div>
                            <OAuthClaimTransforms ClaimTransforms="loginUpParty.Form.Model.ClaimTransforms" />
                        </div>
                    </div>
                    <label class="label-control">First-level claim transforms</label>
                </div>
                <div class="active-group active">
                    <div class="card">
                        <div class="card-body">
                            <div class="info-text" role="alert">
                                The second-level claim transforms are executed after the optional extended UI.
                            </div>
                            <OAuthClaimTransforms ClaimTransforms="loginUpParty.Form.Model.ExitClaimTransforms" />
                        </div>
                    </div>
                    <label class="label-control">Second-level claim transforms</label>
                </div>
                <div class="alert alert-info" role="alert">
                    If you create a new claim in the claim transforms the claim is forwarded to the application registration where you need to add the claim or '*' to the 'Issue claims' list or alternative add the claim to a scopes 'Voluntary claims' list.
                </div>
            }
            else if (loginUpParty.ShowCreateUserTab)
            {
                @if (loginUpParty.Form.Model.CreateUser != null)
                {
                    <FInputToggle @bind-Value="loginUpParty.Form.Model.CreateUser.ConfirmAccount" For="@(() => loginUpParty.Form.Model.CreateUser.ConfirmAccount)" TextType="y.n" />
                    <FInputToggle @bind-Value="loginUpParty.Form.Model.CreateUser.RequireMultiFactor" For="@(() => loginUpParty.Form.Model.CreateUser.RequireMultiFactor)" TextType="y.n" />

                    <div class="active-group active">
                        <div class="card">
                            <div class="card-body">
                                <div class="info-text">Add a sign-up UI with required and optional fields using dynamic elements.</div>
                                <DynamicElements Model="loginUpParty.Form.Model.CreateUser" InternalUsers="true" />
                            </div>
                        </div>
                        <label class="label-control">Sign-up UI</label>
                    </div>

                    <div class="active-group active">
                        <div class="card">
                            <div class="card-body">
                                <div class="info-text pb-0 mb-0">The claim transforms is performed after the user has signed up, but before the user is saved.</div>
                                <OAuthClaimTransforms ClaimTransforms="loginUpParty.Form.Model.CreateUser.ClaimTransforms" ExcludeDkPrivilege="true" IsLoginCreateUser="true" />
                            </div>
                        </div>
                        <label class="label-control">Create user claim transforms</label>
                    </div>
                }
            }
            else if (loginUpParty.ShowSessionTab)
            {
                <UpPartySessionLifetime Model="loginUpParty.Form.Model" />
            }
            else if (loginUpParty.ShowHrdTab)
            {
                <UpPartyHrd Model="loginUpParty.Form.Model" />
            }
        </div>
    </div>
    @if (!loginUpParty.CreateMode && loginUpParty.DeleteAcknowledge)
    {
        <div class="modal-footer">
            <div class="alert alert-danger" role="alert">
                <div>
                    You are about to delete login application "@(UpParty.DisplayName ?? UpParty.Name)", are you sure?
                </div>

                <div class="mt-3">
                    <button type="button" class="btn btn-secondary" @onclick="@(async () => await DeleteLoginUpPartyAsync(loginUpParty))">Yes delete</button>
                    <button type="button" class="btn btn-secondary" @onclick="@(() => loginUpParty.DeleteAcknowledge = false)">No</button>
                </div>
            </div>
        </div>
    }
    <div class="modal-footer">
        @if (!loginUpParty.CreateMode)
        {
            <button type="button" class="btn btn-link" @onclick="@(() => loginUpParty.DeleteAcknowledge = true)">Delete</button>
            <button type="button" class="btn btn-outline-dark" @onclick="@(async () => await OnTestUpParty.InvokeAsync(loginUpParty))">
                Test authentication
            </button>
        }
        <button type="submit" class="btn btn-primary">@(@loginUpParty.CreateMode ? "Create" : "Update")</button>
        <button type="button" class="btn btn-secondary" @onclick="@(() => UpPartyCancelAsync(UpParty))">@(@loginUpParty.CreateMode ? "Cancel" : "Close")</button>
    </div>
</PageEditForm>
@inherits DownPartyBase
@using ITfoxtec.Identity.Saml2

@{
    var samlDownParty = DownParty as GeneralSamlDownPartyViewModel;
}

<PageEditForm @ref="samlDownParty.Form" TModel="SamlDownPartyViewModel" OnValidSubmit="@(async (editContext) => await OnEditSamlDownPartyValidSubmitAsync(samlDownParty, editContext))">
    <div class="modal-header">
        <div class="h5 d-flex align-items-center mb-0">
            <span>SAML 2.0</span>
            <span class="ml-2 text-muted flex-fill text-truncate">@samlDownParty.Form.Model.DisplayName</span>
        </div>
        <FInputSwitchAdvancedOptions @bind-Value="DownParty.ShowAdvanced" />
    </div>
    <div class="modal-body">
        <FInputText @bind-Value="samlDownParty.Form.Model.DisplayName" For="@(() => samlDownParty.Form.Model.DisplayName)" />
        @if (samlDownParty.ShowAdvanced)
        {
            <FInputText @bind-Value="samlDownParty.Form.Model.Name" For="@(() => samlDownParty.Form.Model.Name)" />
        }
        @if (samlDownParty.ShowAdvanced)
        {
            <FInputText @bind-Value="samlDownParty.Form.Model.Note" For="@(() => samlDownParty.Form.Model.Note)" />
        }

        @if (!samlDownParty.Form.Model.Name.IsNullOrWhiteSpace())
        {
            <div class="mb-3 alert alert-info" role="alert">
                @{
                    var samlMetadata = @MetadataLogic.GetDownSamlMetadata(samlDownParty.Form.Model.Name, samlDownParty.Form.Model.PartyBindingPattern);
                }
                <div>SAML 2.0 Metadata: <FTextLinkClipboard Text="@samlMetadata" /></div>
            </div>
        }
        @if (DownParty.ShowAdvanced)
        {
            <FInputSelect @bind-Value="samlDownParty.Form.Model.PartyBindingPattern" For="@(() => samlDownParty.Form.Model.PartyBindingPattern)">
                <option value="@PartyBindingPatterns.Brackets">Brackets pattern .../application(auth-method)/... - default</option>
                <option value="@PartyBindingPatterns.Tildes">Tildes pattern .../application~auth-method~/...</option>
                <option value="@PartyBindingPatterns.Dot">Dot pattern .../application.auth-method./...</option>
            </FInputSelect>
        }

        <ul class="nav nav-tabs">
            <li class="nav-item">
                @if (samlDownParty.ShowSamlTab)
                {
                    <a class="nav-link active">SAML</a>
                }
                else
                {
                    <button type="button" class="btn btn-link nav-link" @onclick="@(() => ShowSamlTab(samlDownParty, SamlTabTypes.Saml))">SAML</button>
                }
            </li>
            <li class="nav-item">
                @if (samlDownParty.ShowClaimTransformTab)
                {
                    <a class="nav-link active">Claim Transform</a>
                }
                else
                {
                    <button type="button" class="btn btn-link nav-link" @onclick="@(() => ShowSamlTab(samlDownParty, SamlTabTypes.ClaimsTransform))">Claim Transform</button>
                }
            </li>
        </ul>

        <div class="tab-content pt-3">
            @if (samlDownParty.ShowSamlTab)
            {
                <SelectUpParties @ref="samlDownParty.SelectAllowUpPartyName" EditDownPartyForm="samlDownParty.Form" TModel="SamlDownPartyViewModel" OnUpdateUpParties="@((arg) => UpdateAllowUpParties(arg, true))" OnRemoveUpParty="@((arg) => RemoveAllowUpParty(arg, true))" />
                <FInputText @bind-Value="samlDownParty.Form.Model.Issuer" For="@(() => samlDownParty.Form.Model.Issuer)" />
                <FInputTextList @bind-ValueList="samlDownParty.Form.Model.AcsUrls" For="@(() => samlDownParty.Form.Model.AcsUrls)" />
                <FInputToggle @bind-Value="samlDownParty.Form.Model.DisableAbsoluteUrls" For="@(() => samlDownParty.Form.Model.DisableAbsoluteUrls)" Negation="true" TextType="e.d" />
                @if (samlDownParty.ShowAdvanced)
                {
                    <div class="row active-group-outline">
                        <div class="col">
                            <FInputSelect @bind-Value="samlDownParty.Form.Model.AuthnRequestBinding" For="@(() => samlDownParty.Form.Model.AuthnRequestBinding)">
                                <option value="@SamlBindingTypes.Redirect">@SamlBindingTypes.Redirect</option>
                                <option value="@SamlBindingTypes.Post">@SamlBindingTypes.Post</option>
                            </FInputSelect>
                        </div>
                        <div class="col">
                            <FInputSelect @bind-Value="samlDownParty.Form.Model.AuthnResponseBinding" For="@(() => samlDownParty.Form.Model.AuthnResponseBinding)">
                                <option value="@SamlBindingTypes.Redirect">@SamlBindingTypes.Redirect</option>
                                <option value="@SamlBindingTypes.Post">@SamlBindingTypes.Post</option>
                            </FInputSelect>
                        </div>
                    </div>

                    <FInputToggle @bind-Value="samlDownParty.Form.Model.EncryptAuthnResponse" For="@(() => samlDownParty.Form.Model.EncryptAuthnResponse)" TextType="y.n" />
                    @if (samlDownParty.Form.Model.EncryptAuthnResponse)
                    {
                        <div class="form-group active-group active">
                            <div class="drag-drop-zone input-control">
                                <InputFile OnChange="@(async (e) => await OnSamlDownPartyEncryptionCertificateFileSelectedAsync(samlDownParty, e))" multiple />
                                @samlDownParty.EncryptionCertificateFileStatus
                            </div>
                            <Label For="@(() => samlDownParty.Form.Model.EncryptionKey)" class="label-control" />
                            <ValidationMessage For="@(() => samlDownParty.Form.Model.EncryptionKey)" />
                            <ul class="list-group">
                                @if (samlDownParty.EncryptionKeyInfo != null)
                                {
                                    <li class="list-group-item">
                                        <div class="d-flex">
                                            <div class="mr-auto p-2">
                                                <strong>@samlDownParty.EncryptionKeyInfo.Subject</strong><br />
                                                Valid from @samlDownParty.EncryptionKeyInfo.ValidFrom.ToShortDateString() to @samlDownParty.EncryptionKeyInfo.ValidTo.ToShortDateString()<br />
                                                Thumbprint: @samlDownParty.EncryptionKeyInfo.Thumbprint
                                            </div>
                                            <div class="p-2">
                                                <button type="button" class="btn btn-link" title="Remove" @onclick="@(() => RemoveSamlDownPartyEncryptionCertificate(samlDownParty, samlDownParty.EncryptionKeyInfo))"><span class="oi oi-delete" aria-hidden="true"></span></button>
                                            </div>
                                        </div>
                                    </li>
                                }
                            </ul>
                        </div>
                    }

                    <div class="info-text">By default, the Name ID value is the user's unique ID. If you configure <code>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</code> as Name ID Format, the Name ID value becomes the user's email.</div>
                    <FInputText @bind-Value="samlDownParty.Form.Model.NameIdFormat" For="@(() => samlDownParty.Form.Model.NameIdFormat)" />
                }

                <FInputText @bind-Value="samlDownParty.Form.Model.LoggedOutUrl" For="@(() => samlDownParty.Form.Model.LoggedOutUrl)" />
                @if (samlDownParty.ShowAdvanced)
                {
                    <FInputText @bind-Value="samlDownParty.Form.Model.SingleLogoutUrl" For="@(() => samlDownParty.Form.Model.SingleLogoutUrl)" />
                    <div class="row active-group-outline">
                        <div class="col">
                            <FInputSelect @bind-Value="samlDownParty.Form.Model.LogoutRequestBinding" For="@(() => samlDownParty.Form.Model.LogoutRequestBinding)">
                                <option value="@SamlBindingTypes.Redirect">@SamlBindingTypes.Redirect</option>
                                <option value="@SamlBindingTypes.Post">@SamlBindingTypes.Post</option>
                            </FInputSelect>
                        </div>
                        <div class="col">
                            <FInputSelect @bind-Value="samlDownParty.Form.Model.LogoutResponseBinding" For="@(() => samlDownParty.Form.Model.LogoutResponseBinding)">
                                <option value="@SamlBindingTypes.Redirect">@SamlBindingTypes.Redirect</option>
                                <option value="@SamlBindingTypes.Post">@SamlBindingTypes.Post</option>
                            </FInputSelect>
                        </div>
                    </div>
                }
                <FInputTextList @bind-ValueList="samlDownParty.Form.Model.Claims" For="@(() => samlDownParty.Form.Model.Claims)" DynamicFirstRow="true" />
                <div class="form-group active-group active">
                    <div class="drag-drop-zone input-control">
                        <InputFile OnChange="@(async (e) => await OnSamlDownPartyCertificateFileSelectedAsync(samlDownParty, e))" multiple />
                        @samlDownParty.CertificateFileStatus
                    </div>
                    <Label For="@(() => samlDownParty.Form.Model.Keys)" class="label-control" />
                    <ValidationMessage For="@(() => samlDownParty.Form.Model.Keys)" />
                    <ul class="list-group">
                        @foreach (var keyInfo in samlDownParty.KeyInfoList)
                        {
                            <li class="list-group-item">
                                <div class="d-flex">
                                    <div class="mr-auto p-2">
                                        <strong>@keyInfo.Subject</strong><br />
                                        Valid from @keyInfo.ValidFrom.ToShortDateString() to @keyInfo.ValidTo.ToShortDateString()<br />
                                        Thumbprint: @keyInfo.Thumbprint
                                    </div>
                                    <div class="p-2">
                                        <button type="button" class="btn btn-link" title="Remove" @onclick="@(() => RemoveSamlDownPartyCertificate(samlDownParty, keyInfo))"><span class="oi oi-delete" aria-hidden="true"></span></button>
                                    </div>
                                </div>
                            </li>
                        }
                    </ul>
                </div>
                @if (DownParty.ShowAdvanced)
                {
                    <FInputSelect @bind-Value="samlDownParty.Form.Model.SignatureAlgorithm" For="@(() => samlDownParty.Form.Model.SignatureAlgorithm)">
                        <option value="@Saml2SecurityAlgorithms.RsaSha1Signature">RSA-SHA-1</option>
                        <option value="@Saml2SecurityAlgorithms.RsaSha256Signature">RSA-SHA-256</option>
                        <option value="@Saml2SecurityAlgorithms.RsaSha384Signature">RSA-SHA-384</option>
                        <option value="@Saml2SecurityAlgorithms.RsaSha512Signature">RSA-SHA-512</option>
                    </FInputSelect>
                    <FInputSelect @bind-Value="samlDownParty.Form.Model.CertificateValidationMode" For="@(() => samlDownParty.Form.Model.CertificateValidationMode)">
                        <option value="@X509CertificateValidationMode.None">None</option>
                        <option value="@X509CertificateValidationMode.ChainTrust">Chain trust</option>
                        <option value="@X509CertificateValidationMode.PeerTrust">Peer trust</option>
                        <option value="@X509CertificateValidationMode.PeerOrChainTrust">Peer or chain trust</option>
                    </FInputSelect>
                    <FInputSelect @bind-Value="samlDownParty.Form.Model.RevocationMode" For="@(() => samlDownParty.Form.Model.RevocationMode)">
                        <option value="@X509RevocationMode.NoCheck">No check</option>
                        <option value="@X509RevocationMode.Offline">Offline</option>
                        <option value="@X509RevocationMode.Online">Online</option>
                    </FInputSelect>
                    <FInputSelect @bind-Value="samlDownParty.Form.Model.AuthnResponseSignType" For="@(() => samlDownParty.Form.Model.AuthnResponseSignType)">
                        <option value="@Saml2AuthnResponseSignTypes.SignResponse">Sign response</option>
                        <option value="@Saml2AuthnResponseSignTypes.SignAssertion">Sign assertion</option>
                        <option value="@Saml2AuthnResponseSignTypes.SignAssertionAndResponse">Sign assertion and response</option>
                    </FInputSelect>
                    <FInputText @bind-Value="samlDownParty.Form.Model.IdPIssuer" For="@(() => samlDownParty.Form.Model.IdPIssuer)" />
                    <FInputNumber @bind-Value="samlDownParty.Form.Model.SubjectConfirmationLifetime" For="@(() => samlDownParty.Form.Model.SubjectConfirmationLifetime)" />
                    <FInputNumber @bind-Value="samlDownParty.Form.Model.IssuedTokenLifetime" For="@(() => samlDownParty.Form.Model.IssuedTokenLifetime)" />
                    <FInputToggle @bind-Value="samlDownParty.Form.Model.MetadataAddLogoutResponseLocation" For="@(() => samlDownParty.Form.Model.MetadataAddLogoutResponseLocation)" TextType="y.n" />
                    <FInputToggle @bind-Value="samlDownParty.Form.Model.SignMetadata" For="@(() => samlDownParty.Form.Model.SignMetadata)" TextType="y.n" />
                    <FInputToggle @bind-Value="samlDownParty.Form.Model.MetadataIncludeEncryptionCertificates" For="@(() => samlDownParty.Form.Model.MetadataIncludeEncryptionCertificates)" TextType="y.n" />
                    <FInputTextList @bind-ValueList="samlDownParty.Form.Model.MetadataNameIdFormats" For="@(() => samlDownParty.Form.Model.MetadataNameIdFormats)" DynamicFirstRow="true" />
                    <SamlMetadataOrganization Model="samlDownParty.Form.Model" />
                    <SamlMetadataContactPersons Model="samlDownParty.Form.Model" />
                }
            }
            else if (samlDownParty.ShowClaimTransformTab)
            {
                <div class="mb-3 alert alert-info" role="alert">
                    If you create a new claim the claim is local in this application registration unless you add the claim or '*' to the 'Issue claims' list.
                </div>
                <SamlClaimTransforms ClaimTransforms="samlDownParty.Form.Model.ClaimTransforms" IsDownParty="true" />
            }
        </div>
    </div>
    @if (DownParty.DeleteAcknowledge)
    {
        <div class="modal-footer">
            <div class="alert alert-danger" role="alert">
                <div>
                    You are about to delete SAML 2.0 application registration "@(DownParty.DisplayName ?? DownParty.Name)", are you sure?
                </div>

                <div class="mt-3">
                    <button type="button" class="btn btn-secondary" @onclick="@(async () => await DeleteSamlDownPartyAsync(samlDownParty))">Yes delete</button>
                    <button type="button" class="btn btn-secondary" @onclick="@(() => DownParty.DeleteAcknowledge = false)">No</button>
                </div>
            </div>
        </div>
    }
    <div class="modal-footer">
        <button type="button" class="btn btn-link" @onclick="@(() => DownParty.DeleteAcknowledge = true)">Delete</button>
        <button type="submit" class="btn btn-primary">Update</button>
        <button type="button" class="btn btn-secondary" @onclick="@(() => DownPartyCancelAsync(DownParty))">Close</button>
    </div>
</PageEditForm>



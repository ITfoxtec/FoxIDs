@inherits UpPartyBase

@{
    var samlUpParty = UpParty as GeneralSamlUpPartyViewModel;
}

<PageEditForm @ref="samlUpParty.Form" TModel="SamlUpPartyViewModel" OnAfterInit="@(m => SamlUpPartyViewModelAfterInit(samlUpParty, m))" OnValidSubmit="@(async (editContext) => await OnEditSamlUpPartyValidSubmitAsync(samlUpParty, editContext))">
    <div class="modal-header">
        <div class="d-flex">
            SAML 2.0
        </div>
        <div class="d-flex">
            <button type="button" class="btn btn-link btn-xs" @onclick="@(() => samlUpParty.ShowAdvanced = !samlUpParty.ShowAdvanced)">@(samlUpParty.ShowAdvanced ? "Hide" : "Show") advanced settings</button>
        </div>
    </div>
    <div class="modal-body">
        @if (samlUpParty.CreateMode)
        {
            <FInputText @bind-Value="samlUpParty.Form.Model.Name" For="@(() => samlUpParty.Form.Model.Name)" Focus="true" />
        }
        else
        {
            <FFieldText @bind-Value="samlUpParty.Form.Model.Name" For="@(() => samlUpParty.Form.Model.Name)" />
        }
        <FInputText @bind-Value="samlUpParty.Form.Model.Note" For="@(() => samlUpParty.Form.Model.Note)" />

        @if (!samlUpParty.Form.Model.DisableUserAuthenticationTrust)
        {
            <div class="mb-3 alert alert-info" role="alert">
                @{ var samlMetadata = @GetSamlMetadata(samlUpParty.Form.Model.Name, samlUpParty.Form.Model.PartyBindingPattern); }
                <div>SAML 2.0 Metadata: <FTextLinkClipboard Text="@samlMetadata" /></div>
            </div>
            @if (UpParty.ShowAdvanced)
            {
                <FInputSelect @bind-Value="samlUpParty.Form.Model.PartyBindingPattern" For="@(() => samlUpParty.Form.Model.PartyBindingPattern)">
                    <option value="@PartyBindingPatterns.Brackets">Brackets pattern .../(up-party)/... - default</option>
                    <option value="@PartyBindingPatterns.Tildes">Tildes pattern .../~up-party~/...</option>
                    <option value="@PartyBindingPatterns.Dot">Dot pattern .../.up-party./...</option>
                </FInputSelect>        
            }
        }

        @if (UpParty.ShowAdvanced)
        {
            <FInputNumber @bind-Value="samlUpParty.Form.Model.MetadataUpdateRate" For="@(() => samlUpParty.Form.Model.MetadataUpdateRate)" />
            @if (!samlUpParty.Form.Model.DisableUserAuthenticationTrust)
            {
                <FInputToggle @bind-Value="samlUpParty.Form.Model.EnableSingleLogout" For="@(() => samlUpParty.Form.Model.EnableSingleLogout)" TextType="e.d" />
            }
        }

        @if (UpParty.ShowAdvanced || samlUpParty.Form.Model.DisableUserAuthenticationTrust || samlUpParty.Form.Model.DisableTokenExchangeTrust)
        {
            <FInputToggle @bind-Value="samlUpParty.Form.Model.DisableUserAuthenticationTrust" For="@(() => samlUpParty.Form.Model.DisableUserAuthenticationTrust)" TextType="e.d" />
        }
        @if (UpParty.ShowAdvanced || samlUpParty.Form.Model.DisableUserAuthenticationTrust || samlUpParty.Form.Model.DisableTokenExchangeTrust)
        {
            <FInputToggle @bind-Value="samlUpParty.Form.Model.DisableTokenExchangeTrust" For="@(() => samlUpParty.Form.Model.DisableTokenExchangeTrust)" TextType="e.d" />
        }

        @if (samlUpParty.Form.Model.AutomaticStopped)
        {
            <div class="mb-3 alert alert-warning" role="alert">
                <i>Automatic configuration update by metadata is currently stopped.</i>
                <div>Restart the automatic configuration update process by clicking the update button.</div>
            </div>
        }

        <ul class="nav nav-tabs">
            <li class="nav-item">
                @if (samlUpParty.ShowSamlTab)
                {
                    <a class="nav-link active">SAML</a>
                }
                else
                {
                    <button type="button" class="btn btn-link nav-link" @onclick="@(() => ShowSamlTab(samlUpParty, SamlTabTypes.Saml))">SAML</button>
                }
            </li>
            <li class="nav-item">
                @if (samlUpParty.ShowClaimTransformTab)
                {
                    <a class="nav-link active">Claim transform</a>
                }
                else
                {
                    <button type="button" class="btn btn-link nav-link" @onclick="@(() => ShowSamlTab(samlUpParty, SamlTabTypes.ClaimsTransform))">Claim transform</button>
                }
            </li>
            @if (!samlUpParty.Form.Model.DisableUserAuthenticationTrust)
            {
                <li class="nav-item">
                    @if (samlUpParty.ShowSessionTab)
                    {
                        <a class="nav-link active">Logout session</a>
                    }
                    else
                    {
                        <button type="button" class="btn btn-link nav-link" @onclick="@(() => ShowSamlTab(samlUpParty, SamlTabTypes.Session))">Logout session</button>
                    }
                </li>
                <li class="nav-item">
                    @if (samlUpParty.ShowHrdTab)
                    {
                        <a class="nav-link active">Home Realm Discovery</a>
                    }
                    else
                    {
                        <button type="button" class="btn btn-link nav-link" @onclick="@(() => ShowSamlTab(samlUpParty, SamlTabTypes.Hrd))">Home Realm Discovery</button>
                    }
                </li>
            }
        </ul>

        <div class="tab-content pt-3">
            @if (samlUpParty.ShowSamlTab)
            {
                @if (samlUpParty.Form.Model.IsManual)
                {
                    <label class="btn btn-link pl-0">
                        Read metadata from file
                        <input hidden type="file" @ref=readMetadataFileElement @onchange="@(async () => await OnReadMetadataFileAsync(samlUpParty))" />
                    </label>
                }
                else
                {
                    <FInputText @bind-Value="samlUpParty.Form.Model.MetadataUrl" For="@(() => samlUpParty.Form.Model.MetadataUrl)" />
                }

                <FInputToggle @bind-Value="samlUpParty.Form.Model.AutomaticUpdate" For="@(() => samlUpParty.Form.Model.AutomaticUpdate)" TextType="e.d" />

                @if (samlUpParty.Form.Model.IsManual)
                {
                    <FInputText @bind-Value="samlUpParty.Form.Model.Issuer" For="@(() => samlUpParty.Form.Model.Issuer)" Focus="!samlUpParty.CreateMode" />
                }
                else if (!samlUpParty.CreateMode)
                {
                    <FFieldText @bind-Value="samlUpParty.Form.Model.Issuer" For="@(() => samlUpParty.Form.Model.Issuer)" />
                }

                @if (samlUpParty.Form.Model.IsManual || (!samlUpParty.Form.Model.IsManual && !samlUpParty.CreateMode))
                {
                    <div class="form-group active-group active">
                        @if (samlUpParty.Form.Model.IsManual)
                        {
                            <div class="drag-drop-zone input-control">
                                <BlazorInputFile.InputFile multiple OnChange="@(async (files) => await OnSamlUpPartyCertificateFileSelectedAsync(samlUpParty, files))" />
                                @samlUpParty.CertificateFileStatus
                            </div>
                        }
                        <Label For="@(() => samlUpParty.Form.Model.Keys)" class="label-control" />
                        <ValidationMessage For="@(() => samlUpParty.Form.Model.Keys)" />
                        <ul class="list-group">
                            @foreach (var keyInfo in samlUpParty.KeyInfoList)
                            {
                                <li class="list-group-item p-0 @(samlUpParty.Form.Model.IsManual ? string.Empty : "bg-light")">
                                    <div class="d-flex">
                                        <div class="mr-auto p-2">
                                            <strong>@keyInfo.Subject</strong><br />
                                            <span class="@(keyInfo.IsValid ? "" : "text-danger")">Valid from @keyInfo.ValidFrom.ToShortDateString() to @keyInfo.ValidTo.ToShortDateString()</span><br />
                                            Thumbprint: @keyInfo.Thumbprint
                                        </div>
                                        @if (samlUpParty.Form.Model.IsManual)
                                        {
                                            <div class="p-2">
                                                <button type="button" class="btn btn-link p-0" title="Remove" @onclick="@(() => RemoveSamlUpPartyCertificate(samlUpParty, keyInfo))"><span class="oi oi-delete" aria-hidden="true"></span></button>
                                            </div>
                                        }
                                    </div>
                                </li>
                            }
                        </ul>
                    </div>
                }

                @if(!samlUpParty.Form.Model.DisableUserAuthenticationTrust) 
                {
                    @if (samlUpParty.Form.Model.IsManual)
                    {
                        <FInputText @bind-Value="samlUpParty.Form.Model.AuthnUrl" For="@(() => samlUpParty.Form.Model.AuthnUrl)" />
                    }
                    else if (!samlUpParty.CreateMode)
                    {
                        <FFieldText @bind-Value="samlUpParty.Form.Model.AuthnUrl" For="@(() => samlUpParty.Form.Model.AuthnUrl)" />
                    }

                    <div class="row active-group-outline">
                        @if (samlUpParty.Form.Model.IsManual || (!samlUpParty.Form.Model.IsManual && !samlUpParty.CreateMode))
                        {
                            <div class="col">
                                @if (samlUpParty.Form.Model.IsManual)
                                {
                                    <div class="form-group active-group">
                                        <FInputSelect @bind-Value="samlUpParty.Form.Model.AuthnRequestBinding" For="@(() => samlUpParty.Form.Model.AuthnRequestBinding)" IncludeActiveFormGroup="false">
                                            <option value="@SamlBindingTypes.Redirect">@SamlBindingTypes.Redirect</option>
                                            <option value="@SamlBindingTypes.Post">@SamlBindingTypes.Post</option>
                                        </FInputSelect>
                                    </div>
                                }
                                else if (!samlUpParty.CreateMode)
                                {
                                    <div class="active-group active">
                                        <div class="card bg-light">
                                            <div class="card-body px-3 py-2">
                                                @samlUpParty.Form.Model.AuthnRequestBinding.ToString()
                                            </div>
                                        </div>
                                        <Label For="@(() => samlUpParty.Form.Model.AuthnRequestBinding)" class="label-control" />
                                    </div>
                                }
                            </div>
                        }
                        <div class="col">
                            <div class="form-group active-group">
                                <FInputSelect @bind-Value="samlUpParty.Form.Model.AuthnResponseBinding" For="@(() => samlUpParty.Form.Model.AuthnResponseBinding)" IncludeActiveFormGroup="false">
                                    <option value="@SamlBindingTypes.Redirect">@SamlBindingTypes.Redirect</option>
                                    <option value="@SamlBindingTypes.Post">@SamlBindingTypes.Post</option>
                                </FInputSelect>
                            </div>
                        </div>
                    </div>
                    @if (samlUpParty.ShowAdvanced)
                    {
                        <FInputToggle @bind-Value="samlUpParty.Form.Model.SignAuthnRequest" For="@(() => samlUpParty.Form.Model.SignAuthnRequest)" TextType="y.n" />
                    }

                    @if (samlUpParty.Form.Model.IsManual)
                    {
                        <FInputText @bind-Value="samlUpParty.Form.Model.LogoutUrl" For="@(() => samlUpParty.Form.Model.LogoutUrl)" />
                    }
                    else if (!samlUpParty.CreateMode)
                    {
                        <FFieldText @bind-Value="samlUpParty.Form.Model.LogoutUrl" For="@(() => samlUpParty.Form.Model.LogoutUrl)" />
                    }

                    @if (samlUpParty.ShowAdvanced)
                    {
                        @if (samlUpParty.Form.Model.IsManual)
                        {
                            <FInputText @bind-Value="samlUpParty.Form.Model.SingleLogoutResponseUrl" For="@(() => samlUpParty.Form.Model.SingleLogoutResponseUrl)" />
                        }
                        else if (!samlUpParty.CreateMode && !samlUpParty.Form.Model.SingleLogoutResponseUrl.IsNullOrEmpty())
                        {
                            <FFieldText @bind-Value="samlUpParty.Form.Model.SingleLogoutResponseUrl" For="@(() => samlUpParty.Form.Model.SingleLogoutResponseUrl)" />
                        }
                    }
                    <div class="row active-group-outline">
                        @if (samlUpParty.Form.Model.IsManual || (!samlUpParty.Form.Model.IsManual && !samlUpParty.CreateMode))
                        {
                            <div class="col">
                                @if (samlUpParty.Form.Model.IsManual)
                                {
                                    <div class="form-group active-group">
                                        <FInputSelect @bind-Value="samlUpParty.Form.Model.LogoutRequestBinding" For="@(() => samlUpParty.Form.Model.LogoutRequestBinding)" IncludeActiveFormGroup="false">
                                            <option value="@SamlBindingTypes.Redirect">@SamlBindingTypes.Redirect</option>
                                            <option value="@SamlBindingTypes.Post">@SamlBindingTypes.Post</option>
                                        </FInputSelect>
                                    </div>
                                }
                                else if (!samlUpParty.CreateMode)
                                {
                                    <div class="active-group active">
                                        <div class="card bg-light">
                                            <div class="card-body px-3 py-2">
                                                @samlUpParty.Form.Model.LogoutRequestBinding.ToString()
                                            </div>
                                        </div>
                                        <Label For="@(() => samlUpParty.Form.Model.LogoutRequestBinding)" class="label-control" />
                                    </div>
                                }
                            </div>
                        }
                        <div class="col">
                            <div class="form-group active-group">
                                <FInputSelect @bind-Value="samlUpParty.Form.Model.LogoutResponseBinding" For="@(() => samlUpParty.Form.Model.LogoutResponseBinding)" IncludeActiveFormGroup="false">
                                    <option value="@SamlBindingTypes.Redirect">@SamlBindingTypes.Redirect</option>
                                    <option value="@SamlBindingTypes.Post">@SamlBindingTypes.Post</option>
                                </FInputSelect>
                            </div>
                        </div>
                    </div>
                }
                @if (samlUpParty.ShowAdvanced)
                {
                    <FInputText @bind-Value="samlUpParty.Form.Model.SpIssuer" For="@(() => samlUpParty.Form.Model.SpIssuer)" />
                }
                <FInputTextList @bind-ValueList="samlUpParty.Form.Model.Claims" For="@(() => samlUpParty.Form.Model.Claims)" DynamicFirstRow="true" />
                @if (samlUpParty.ShowAdvanced)
                {
                    @if (!samlUpParty.Form.Model.DisableUserAuthenticationTrust)
                    {
                        <div class="form-group active-group">
                            <FInputSelect @bind-Value="samlUpParty.Form.Model.AuthnContextComparisonViewModel" For="@(() => samlUpParty.Form.Model.AuthnContextComparisonViewModel)" IncludeActiveFormGroup="false">
                            <option value="@SamlAuthnContextComparisonTypesVievModel.Null"></option>
                            <option value="@SamlAuthnContextComparisonTypesVievModel.Exact">@SamlAuthnContextComparisonTypesVievModel.Exact</option>
                            <option value="@SamlAuthnContextComparisonTypesVievModel.Minimum">@SamlAuthnContextComparisonTypesVievModel.Minimum</option>
                            <option value="@SamlAuthnContextComparisonTypesVievModel.Maximum">@SamlAuthnContextComparisonTypesVievModel.Maximum</option>
                            <option value="@SamlAuthnContextComparisonTypesVievModel.Better">@SamlAuthnContextComparisonTypesVievModel.Better</option>
                        </FInputSelect>
                        </div>
                        <FInputTextList @bind-ValueList="samlUpParty.Form.Model.AuthnContextClassReferences" For="@(() => samlUpParty.Form.Model.AuthnContextClassReferences)" DynamicFirstRow="true" />
                    }
                    <FInputSelect @bind-Value="samlUpParty.Form.Model.SignatureAlgorithm" For="@(() => samlUpParty.Form.Model.SignatureAlgorithm)">
                        <option value="@Saml2SecurityAlgorithms.RsaSha1Signature">RSA-SHA-1</option>
                        <option value="@Saml2SecurityAlgorithms.RsaSha256Signature">RSA-SHA-256</option>
                        <option value="@Saml2SecurityAlgorithms.RsaSha384Signature">RSA-SHA-384</option>
                        <option value="@Saml2SecurityAlgorithms.RsaSha512Signature">RSA-SHA-512</option>
                    </FInputSelect>
                    <FInputSelect @bind-Value="samlUpParty.Form.Model.CertificateValidationMode" For="@(() => samlUpParty.Form.Model.CertificateValidationMode)">
                        <option value="@X509CertificateValidationMode.None">None</option>
                        <option value="@X509CertificateValidationMode.ChainTrust">Chain trust</option>
                        <option value="@X509CertificateValidationMode.PeerTrust">Peer trust</option>
                        <option value="@X509CertificateValidationMode.PeerOrChainTrust">Peer or chain trust</option>
                    </FInputSelect>
                    <FInputSelect @bind-Value="samlUpParty.Form.Model.RevocationMode" For="@(() => samlUpParty.Form.Model.RevocationMode)">
                        <option value="@X509RevocationMode.NoCheck">No check</option>
                        <option value="@X509RevocationMode.Offline">Offline</option>
                        <option value="@X509RevocationMode.Online">Online</option>
                    </FInputSelect>
                    @if (!samlUpParty.Form.Model.DisableUserAuthenticationTrust)
                    {
                        <FInputToggle @bind-Value="samlUpParty.Form.Model.MetadataAddLogoutResponseLocation" For="@(() => samlUpParty.Form.Model.MetadataAddLogoutResponseLocation)" TextType="y.n" />
                        <FInputToggle @bind-Value="samlUpParty.Form.Model.SignMetadata" For="@(() => samlUpParty.Form.Model.SignMetadata)" TextType="y.n" />
                        <FInputToggle @bind-Value="samlUpParty.Form.Model.MetadataIncludeEncryptionCertificates" For="@(() => samlUpParty.Form.Model.MetadataIncludeEncryptionCertificates)" TextType="y.n" />
                        <FInputTextList @bind-ValueList="samlUpParty.Form.Model.MetadataNameIdFormats" For="@(() => samlUpParty.Form.Model.MetadataNameIdFormats)" DynamicFirstRow="true" />
                        <SamlMetadataAttributeConsumingServices Model="samlUpParty.Form.Model" />
                        <SamlMetadataOrganization Model="samlUpParty.Form.Model" />
                        <SamlMetadataContactPersons Model="samlUpParty.Form.Model" />
                    }
                }
            }
            else if (samlUpParty.ShowClaimTransformTab)
            {
                <div class="mb-3 alert alert-info" role="alert">
                    If you create a new claim the claim is local unless you add the claim to the 'Forward claims' list.
                </div>
                <SamlClaimTransforms Model="samlUpParty.Form.Model" />
            }
            else if (samlUpParty.ShowSessionTab)
            {
                <UpPartySessionLifetime Model="samlUpParty.Form.Model" />
            }
            else if (samlUpParty.ShowHrdTab)
            {
                <UpPartyHrd Model="samlUpParty.Form.Model" />
            }
        </div>
    </div>
    @if (!UpParty.CreateMode && UpParty.DeleteAcknowledge)
    {
        <div class="modal-footer">
            <div class="alert alert-danger" role="alert">
                <div>
                    You are about to delete SAML 2.0 up-party "@UpParty.Name", are you sure?
                </div>

                <div class="mt-3">
                    <button type="button" class="btn btn-secondary" @onclick="@(async () => await DeleteSamlUpPartyAsync(samlUpParty))">Yes delete</button>
                    <button type="button" class="btn btn-secondary" @onclick="@(() => UpParty.DeleteAcknowledge = false)">No</button>
                </div>
            </div>
        </div>
    }
    <div class="modal-footer">
        <button type="button" class="btn btn-link btn-xs" @onclick="@(() => samlUpParty.ShowAdvanced = !samlUpParty.ShowAdvanced)">@(samlUpParty.ShowAdvanced ? "Hide" : "Show") advanced settings</button>
        @if (!UpParty.CreateMode)
        {
            <button type="button" class="btn btn-link" @onclick="@(() => UpParty.DeleteAcknowledge = true)">Delete</button>
        }
        <button type="submit" class="btn btn-primary">@(@UpParty.CreateMode ? "Create" : "Update")</button>
        <button type="button" class="btn btn-secondary" @onclick="@(() => UpPartyCancelAsync(UpParty))">@(@UpParty.CreateMode ? "Cancel" : "Close")</button>
    </div>
</PageEditForm>
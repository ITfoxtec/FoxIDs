@inherits ComponentBase

<div class="row">
    <div class="col-6">
        <b>@GetTypeString(Item.Type)</b>
    </div>
    <div class="col-6 text-right">
        @Item.Value
    </div>
    @if (Item.SubItems?.Count() > 0 && Item.SubItems.Where(i => i.Value > 0).Any())
    {
        <div class="col-12 @(Item.Type == UsageLogTypes.Sms ? "pb-2" : "mt-2 py-2") bg-light">
            <small>
                @foreach (var item in Item.SubItems)
                {
                    <EUsageLogItem Item="item" />
                }
            </small>
        </div>
    }
</div>

@code {
    [Parameter]
    public UsageLogItem Item { get; set; }

    private string GetTypeString(UsageLogTypes type) 
    {
        switch (type)
        {
            case UsageLogTypes.Tenant:
                return UsageLogIncludeTypes.Tenants;
            case UsageLogTypes.Track:
                return UsageLogIncludeTypes.Tracks;
            case UsageLogTypes.User:
                return UsageLogIncludeTypes.Users;
            case UsageLogTypes.Login:
                return UsageLogIncludeTypes.Logins;
            case UsageLogTypes.TokenRequest:
                return UsageLogIncludeTypes.TokenRequests;
            case UsageLogTypes.ControlApiGet:
                return UsageLogIncludeTypes.ControlApiGets;
            case UsageLogTypes.ControlApiUpdate:
                return UsageLogIncludeTypes.ControlApiUpdates;
            case UsageLogTypes.Confirmation:
                return UsageLogIncludeTypes.Confirmation;
            case UsageLogTypes.SetPassword:
                return UsageLogIncludeTypes.SetPassword;
            case UsageLogTypes.Mfa:
                return UsageLogIncludeTypes.Mfa;
            case UsageLogTypes.RealCount:
                return UsageLogIncludeTypes.RealCount;
            case UsageLogTypes.ExtraCount:
                return UsageLogIncludeTypes.ExtraCount;
            case UsageLogTypes.Sms:
                return UsageLogIncludeTypes.Sms;
            case UsageLogTypes.SmsPrice:
                return UsageLogIncludeTypes.SmsPrice;
            case UsageLogTypes.Email:
                return UsageLogIncludeTypes.Email;
            default:
                throw new NotImplementedException();
        }
    }
}


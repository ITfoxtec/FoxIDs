@page "/{tenantName}/applications"
@inherits PageBase
@using System.Collections.Generic
@using System.Linq

<div class="tab-content">
    <div class="d-flex">
        <div class="mr-auto info-text pt-0">
            Register your applications and APIs with <DocsLink Page="app-reg-oidc">OpenID Connect</DocsLink>, <DocsLink Page="app-reg-oauth-2.0">OAuth 2.0</DocsLink> and <DocsLink Page="app-reg-saml-2.0">SAML 2.0</DocsLink>.
            <br />
            More about: <DocsLink Page="howto-connect">How to connect</DocsLink> | <DocsLink Page="bridge">SAML 2.0 bridge</DocsLink> | <DocsLink Page="token-exchange">Token exchange</DocsLink>
        </div>
        <div class="pb-2 d-block d-lg-none d-xl-none">
            <div class="row">
                <div class="col-12">
                    <button type="button" class="btn btn-primary" @onclick="ShowNewDownParty">
                        <span class="oi oi-plus" aria-hidden="true"></span> New application
                    </button>
                </div>
            </div>
            <div class="row">
                <div class="col-12 pt-2">
                    <button type="button" class="btn btn-sm btn-outline-dark" @onclick="@(async () => await InitAndShowTestUpPartyAsync())">
                        New test application
                    </button>
                </div>
            </div>
        </div>
        <div class="pb-2 d-none d-lg-block d-xl-block">
            <div class="btn-group">
                <button type="button" class="btn btn-outline-dark" @onclick="@(async () => await InitAndShowTestUpPartyAsync())">
                    New test application
                </button>
                <button type="button" class="btn btn-primary" @onclick="ShowNewDownParty">
                    <span class="oi oi-plus" aria-hidden="true"></span> New application
                </button>
            </div>
        </div>
    </div>
    <PageEditForm @ref="downPartyFilterForm" TModel="FilterDownPartyViewModel" OnValidSubmit="OnDownPartyFilterValidSubmitAsync">
        <FInputTextFilter @bind-Value="downPartyFilterForm.Model.FilterName" For="@(() => downPartyFilterForm.Model.FilterName)" />
    </PageEditForm>

    <ul class="list-group">
        @if (newDownPartyModal?.IsVisible == true)
        {
            <li class="list-group-item active">
                @if (newDownPartyModal.Type == null)
                {
                    <div class="modal-header sticky-header">
                        <div class="h5 d-flex flex-nowrap align-items-center mb-0 hide-owerflow">
                            <span class="text-nowrap first-header">New Application</span>
                            <span class="ml-2 text-muted text-truncate second-header">Select the application type to continue</span>
                        </div>
                        <FInputSwitchAdvancedOptions @bind-Value="newDownPartyModal.ShowAll" />
                    </div>
                    <div class="modal-body">
                        <div class="row">
                        <div class="col-12 col-md-6 py-3 @(newDownPartyModal.ShowAll ? "col-lg-4" : string.Empty)">
                            <button type="button" class="d-flex flex-column btn btn-wrap btn-max btn-outline-secondary" @onclick="@(() => ChangeNewDownPartyState("Web Application", PartyTypes.Oidc, DownPartyOAuthTypes.Client, DownPartyOAuthClientTypes.Confidential))">
                                    <h5 class="py-2">Web Application <div class="small pt-2"><div class="badge badge-light border">OpenID Connect</div></div></h5>
                                <div class="py-2 font-italic">E.g., ASP.NET Core, Blazor Server, Java, Node.js, PHP.</div>
                                <div class="py-2">Web application running on a server, optionally with a backend API.</div>
                            </button>
                        </div>
                        @if (newDownPartyModal.ShowAll)
                        {
                            <div class="col-12 col-md-6 py-3 col-lg-4">
                                <button type="button" class="d-flex flex-column btn btn-wrap btn-max btn-outline-secondary" @onclick="@(() => ChangeNewDownPartyState("Web Application", PartyTypes.Saml2))">
                                    <h5 class="py-2">Web Application <div class="small pt-2"><div class="badge badge-light border">SAML 2.0</div></div></h5>
                                    <div class="py-2 font-italic">E.g., ASP.NET Core, Java, PHP.</div>
                                    <div class="py-2">Web application running on a server.<br />SAML 2.0 is an old standard with its shortcomings, it is often better to use OpenID Connect.</div>
                                </button>
                            </div>
                        }
                        <div class="col-12 col-md-6 py-3 @(newDownPartyModal.ShowAll ? "col-lg-4" : string.Empty)">
                            <button type="button" class="d-flex flex-column btn btn-wrap btn-max btn-outline-secondary" @onclick="@(() => ChangeNewDownPartyState("Single Page Application", PartyTypes.Oidc, DownPartyOAuthTypes.Client, DownPartyOAuthClientTypes.Public))">
                                <h5 class="py-2">Single Page Application <div class="small pt-2"><div class="badge badge-light border">OpenID Connect</div></div></h5>
                                <div class="py-2">E.g., Blazor WebAssembly (WASM), React, Angular, Vue.</div>
                                <div class="py-2">Application running in the browser, often with a backend API.</div>
                            </button>
                        </div>
                        <div class="col-12 col-md-6 py-3 @(newDownPartyModal.ShowAll ? "col-lg-4" : string.Empty)">
                            <button type="button" class="d-flex flex-column btn btn-wrap btn-max btn-outline-secondary" @onclick="@(() => ChangeNewDownPartyState("Native Application", PartyTypes.Oidc, DownPartyOAuthTypes.Client, DownPartyOAuthClientTypes.PublicNative))">
                                <h5 class="py-2">Native Application <div class="small pt-2"><div class="badge badge-light border">OpenID Connect</div></div></h5>
                                <div class="py-2">E.g., .NET MAUI, React Native, Ionic, iOS, Android.</div>
                                <div class="py-2">Mobile, smart device or desktop applications, often with a backend API.</div>
                            </button>
                        </div>
                        <div class="col-12 col-md-6 py-3 @(newDownPartyModal.ShowAll ? "col-lg-4" : string.Empty)">
                            <button type="button" class="d-flex flex-column btn btn-wrap btn-max btn-outline-secondary" @onclick="@(() => ChangeNewDownPartyState("Backend Application", PartyTypes.OAuth2, DownPartyOAuthTypes.Client, DownPartyOAuthClientTypes.Confidential))">
                                <h5 class="py-2">Backend Application <div class="small pt-2"><div class="badge badge-light border">OAuth 2.0</div></div></h5>
                                <div class="py-2">E.g., .NET service, Java, script.</div>
                                <div class="py-2">Backend service or daemon applications, optionally with a backend API.</div>
                            </button>
                        </div>
                        @if (newDownPartyModal.ShowAll)
                        {
                            <div class="col-12 col-md-6 py-3 col-lg-4">
                                <button type="button" class="d-flex flex-column btn btn-wrap btn-max btn-outline-secondary" @onclick="@(() => ChangeNewDownPartyState("API", PartyTypes.OAuth2, DownPartyOAuthTypes.Resource))">
                                    <h5 class="py-2">API <div class="small pt-2"><div class="badge badge-light border">OAuth 2.0</div></div></h5>
                                    <div class="py-2">E.g., ASP.NET Core, Azure Functions, Java.</div>
                                    <div class="py-2">APIs or micro services.<br />Used for more advanced solutions where multiple applications need to call the API.</div>
                                </button>
                            </div>
                        }
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CancelNewDownParty">Cancel</button>
                    </div>
                }
                else if (newDownPartyModal.Type == PartyTypes.Oidc)
                {
                    <PageEditForm @ref="newDownPartyModal.OidcForm" TModel="NewDownPartyOidcViewModel" OnAfterInit="@(async m => await OnNewDownPartyOidcModalAfterInitAsync(m))" OnValidSubmit="@(async (editContext) => await OnNewDownPartyOidcModalValidSubmitAsync(newDownPartyModal, newDownPartyModal.OidcForm, editContext))">
                        <div class="modal-header sticky-header">
                            <div class="h5 d-flex flex-nowrap align-items-center mb-0 hide-owerflow">
                                <span class="text-nowrap first-header">@newDownPartyModal.AppTitle</span>
                                <span class="ml-2 text-muted text-truncate second-header">@((newDownPartyModal.Created ? newDownPartyModal.OidcForm.Model.DisplayName : null) ?? "Complete the OpenID Connect application")</span>
                            </div>
                            @if (!newDownPartyModal.Created)
                            {
                                <FInputSwitchAdvancedOptions @bind-Value="newDownPartyModal.ShowAdvanced" />
                            }
                        </div>
                        @{
                            EnsureNewDownPartyOidcSummaryDefaults();
                            var formColumnClass = newDownPartyModal.Created ? "d-none" : "col-12 col-lg-6";
                            var summaryColumnClass = newDownPartyModal.Created ? "col-12 mt-4 mt-lg-0" : "col-12 col-lg-6 mt-4 mt-lg-0";
                            var oidcScopes = newDownPartyModal.OidcForm.Model.Scopes?.Where(s => !s.IsNullOrWhiteSpace()).ToList() ?? new List<string>();
                        }
                        <div class="modal-body">
                            <div class="row">
                                <div class="@formColumnClass">
                                    @if (newDownPartyModal.OAuthClientType == DownPartyOAuthClientTypes.Public)
                                    {
                                        <div class="info-text">
                                            Add new <DocsLink Page="app-reg-oidc">OpenID Connect</DocsLink> registration for your single page application running in the browser, often with a backend API (called a Public Client).
                                        </div>
                                    }
                                    else if (newDownPartyModal.OAuthClientType == DownPartyOAuthClientTypes.PublicNative)
                                    {
                                        <div class="info-text">
                                            Add new <DocsLink Page="app-reg-oidc">OpenID Connect</DocsLink> registration for your native application often with a backend API (called a Public Client).
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="info-text">
                                            Add new <DocsLink Page="app-reg-oidc">OpenID Connect</DocsLink> registration for your web application running on a server, optionally with a backend API (called a Confidential Client).
                                        </div>
                                    }

                                    <div class="pt-2">
                                        <FInputText @bind-Value="newDownPartyModal.OidcForm.Model.DisplayName" For="@(() => newDownPartyModal.OidcForm.Model.DisplayName)" Focus="true" />
                                        @if (newDownPartyModal.ShowAdvanced)
                                        {
                                            <div class="info-text">Enter the Client ID / Resource name you want, otherwise auto generated.</div>
                                            <FInputText @bind-Value="newDownPartyModal.OidcForm.Model.Name" For="@(() => newDownPartyModal.OidcForm.Model.Name)" />
                                        }
                                        <div class="info-text pt-2">
                                            @if (newDownPartyModal.OAuthClientType == DownPartyOAuthClientTypes.PublicNative)
                                            {
                                                <div>Enter your application's URI as Redirect URI, e.g. 'myapp://', 'myapp://callback' or 'https://myapp.com/auth'.</div>
                                            }
                                            else
                                            {
                                                <div>Enter your application's base URL as Redirect URI, e.g. 'https://myapp.com/' or 'https://myapp.com/callback' or 'https://myapp.com/theappsite'.</div>
                                            }
                                        </div>
                                        <FInputText @bind-Value="newDownPartyModal.OidcForm.Model.RedirectUri" For="@(() => newDownPartyModal.OidcForm.Model.RedirectUri)" />
                                        @if (newDownPartyModal.ShowAdvanced)
                                        {
                                            <div class="info-text pt-2">
                                                @{
                                                    var uriText = newDownPartyModal.OAuthClientType == DownPartyOAuthClientTypes.PublicNative ? "URI" : "URL";
                                                }
                                                Enable Absolute @uriText values if you know the exact @uriText in your application that the user should be redirected back to when logged in, and enter the absolute @uriText as the Redirect URI.
                                            </div>
                                            <FInputToggle @bind-Value="newDownPartyModal.OidcForm.Model.DisableAbsoluteUris" For="@(() => newDownPartyModal.OidcForm.Model.DisableAbsoluteUris)" Negation="true" TextType="e.d" />
                                        }
                                    </div>
                                </div>
                                <div class="@summaryColumnClass">
                                    <div class="card bg-light border">
                                        <div class="card-body">
                                            <h6 class="card-title mb-4">
                                                @(!newDownPartyModal.Created ? "The application will have the following information" : "Application information")
                                            </h6>
                                            <div class="mb-3">
                                                <FFieldTextClipboard Class="@(newDownPartyModal.ShowOidcAuthorityDetails ? "" : "pb-1")" @bind-Value="newDownPartyModal.OidcForm.Model.Authority" For="@(() => newDownPartyModal.OidcForm.Model.Authority)" />
                                                @if (!newDownPartyModal.ShowOidcAuthorityDetails && !newDownPartyModal.OidcForm.Model.Name.IsNullOrWhiteSpace())
                                                {
                                                    <button type="button" class="btn btn-link btn-xs pl-1 pb-3" @onclick="() => newDownPartyModal.ShowOidcAuthorityDetails = true">Show more</button>
                                                }
                                                @if (newDownPartyModal.ShowOidcAuthorityDetails && !newDownPartyModal.OidcForm.Model.Name.IsNullOrWhiteSpace())
                                                {
                                                    <div class="mt-2">
                                                        <div class="mb-2">
                                                            <FFieldTextClipboard @bind-Value="newDownPartyModal.OidcForm.Model.OidcDiscovery" For="@(() => newDownPartyModal.OidcForm.Model.OidcDiscovery)" />
                                                        </div>
                                                        <div class="mb-2">
                                                            <FFieldTextClipboard @bind-Value="newDownPartyModal.OidcForm.Model.AuthorizeUrl" For="@(() => newDownPartyModal.OidcForm.Model.AuthorizeUrl)" />
                                                        </div>
                                                        <div>
                                                            <FFieldTextClipboard @bind-Value="newDownPartyModal.OidcForm.Model.TokenUrl" For="@(() => newDownPartyModal.OidcForm.Model.TokenUrl)" />
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                            <div class="mb-3">
                                                <FFieldTextClipboard @bind-Value="newDownPartyModal.OidcForm.Model.Name" For="@(() => newDownPartyModal.OidcForm.Model.Name)" />
                                            </div>
                                            @if (newDownPartyModal.OAuthClientType == DownPartyOAuthClientTypes.Confidential)
                                            {
                                                <div class="mb-3">
                                                    <FFieldTextClipboard @bind-Value="newDownPartyModal.OidcForm.Model.Secret" For="@(() => newDownPartyModal.OidcForm.Model.Secret)" />
                                                </div>
                                            }
                                            else if (newDownPartyModal.OAuthClientType == DownPartyOAuthClientTypes.Public || newDownPartyModal.OAuthClientType == DownPartyOAuthClientTypes.PublicNative)
                                            {
                                                <div class="mb-3">
                                                    <FFieldText @bind-Value="newDownPartyModal.OidcForm.Model.Pkce" For="@(() => newDownPartyModal.OidcForm.Model.Pkce)" />
                                                </div>
                                            }
                                            @if (oidcScopes.Any())
                                            {
                                                <div>
                                                    <FFieldTextListClipboard @bind-ValueList="newDownPartyModal.OidcForm.Model.Scopes" For="@(() => newDownPartyModal.OidcForm.Model.Scopes)" />
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            @if (!newDownPartyModal.Created)
                            {
                                <div class="mr-auto">
                                    <button type="button" class="btn btn-link pl-0 @(newDownPartyModal.CreateWorking ? "disabled" : "")" @onclick="@(() => ChangeNewDownPartyState())"><i class="bi bi-caret-left bi-right-space"></i>Back</button>
                                </div>
                                <div>
                                    <button type="submit" class="btn btn-primary @(newDownPartyModal.CreateWorking ? "disabled" : "")">Create</button>
                                    <button type="button" class="btn btn-secondary ml-2 @(newDownPartyModal.CreateWorking ? "disabled" : "")" @onclick="CancelNewDownParty">Cancel</button>
                                </div>
                            }
                            else
                            {
                                <button type="button" class="btn btn-link" @onclick="EditCreatedDownParty">Change application</button>
                                <div>
                                    <button type="button" class="btn btn-secondary" @onclick="CancelNewDownParty">Close</button>
                                </div>
                            }
                        </div>
                    </PageEditForm>
                }
                else if (newDownPartyModal.Type == PartyTypes.OAuth2 && newDownPartyModal.OAuthType == DownPartyOAuthTypes.Client)
                {
                    <PageEditForm @ref="newDownPartyModal.OAuthClientForm" TModel="NewDownPartyOAuthClientViewModel" OnAfterInit="@(async m => await OnNewDownPartyOAuthClientModalAfterInitAsync(m))" OnValidSubmit="@(async (editContext) => await OnNewDownPartyOAuthClientModalValidSubmitAsync(newDownPartyModal, newDownPartyModal.OAuthClientForm, editContext))">
                        <div class="modal-header sticky-header">
                            <div class="h5 d-flex flex-nowrap align-items-center mb-0 hide-owerflow">
                                <span class="text-nowrap first-header">@newDownPartyModal.AppTitle</span>
                                <span class="ml-2 text-muted text-truncate second-header">@((newDownPartyModal.Created ? newDownPartyModal.OAuthClientForm.Model.DisplayName : null) ?? "Complete the OAuth 2.0 client application")</span>
                            </div>
                            @if (!newDownPartyModal.Created)
                            {
                                <FInputSwitchAdvancedOptions @bind-Value="newDownPartyModal.ShowAdvanced" />
                            }
                        </div>
                        @{
                            EnsureNewDownPartyOAuthClientSummaryDefaults();
                            var formColumnClass = newDownPartyModal.Created ? "d-none" : "col-12 col-lg-6";
                            var summaryColumnClass = newDownPartyModal.Created ? "col-12 mt-4 mt-lg-0" : "col-12 col-lg-6 mt-4 mt-lg-0";
                        }
                        <div class="modal-body">
                            <div class="row">
                                <div class="@formColumnClass">
                                    <div class="info-text">
                                        Add new <DocsLink Page="app-reg-oauth-2.0" Fragment="client-credentials-grant">OAuth 2.0</DocsLink> registration for your backend application, optionally with a backend API (called a Confidential Client that requests an access token using Client Credential Grant).
                                    </div>

                                    <div class="pt-2">
                                        <FInputText @bind-Value="newDownPartyModal.OAuthClientForm.Model.DisplayName" For="@(() => newDownPartyModal.OAuthClientForm.Model.DisplayName)" Focus="true" />
                                        @if (newDownPartyModal.ShowAdvanced)
                                        {
                                            <div class="info-text">Enter the Client ID you want, otherwise auto generated.</div>
                                            <FInputText @bind-Value="newDownPartyModal.OAuthClientForm.Model.Name" For="@(() => newDownPartyModal.OAuthClientForm.Model.Name)" />
                                        }
                                    </div>
                                </div>
                                <div class="@summaryColumnClass">
                                    <div class="card bg-light border">
                                        <div class="card-body">
                                            <h6 class="card-title mb-4">
                                                @(!newDownPartyModal.Created ? "The application will have the following information" : "Application information")
                                            </h6>
                                            <div class="mb-3">
                                                <FFieldTextClipboard Class="@(newDownPartyModal.ShowOAuthClientAuthorityDetails ? "" : "pb-1")" @bind-Value="newDownPartyModal.OAuthClientForm.Model.Authority" For="@(() => newDownPartyModal.OAuthClientForm.Model.Authority)" />
                                                @if (!newDownPartyModal.ShowOAuthClientAuthorityDetails && !newDownPartyModal.OAuthClientForm.Model.Name.IsNullOrWhiteSpace())
                                                {
                                                    <button type="button" class="btn btn-link btn-xs pl-1 pb-3" @onclick="() => newDownPartyModal.ShowOAuthClientAuthorityDetails = true">Show more</button>
                                                }
                                                @if (newDownPartyModal.ShowOAuthClientAuthorityDetails && !newDownPartyModal.OAuthClientForm.Model.Name.IsNullOrWhiteSpace())
                                                {
                                                    <div class="mt-2">
                                                        <div class="mb-2">
                                                            <FFieldTextClipboard @bind-Value="newDownPartyModal.OAuthClientForm.Model.OidcDiscovery" For="@(() => newDownPartyModal.OAuthClientForm.Model.OidcDiscovery)" />
                                                        </div>
                                                        <div>
                                                            <FFieldTextClipboard @bind-Value="newDownPartyModal.OAuthClientForm.Model.TokenUrl" For="@(() => newDownPartyModal.OAuthClientForm.Model.TokenUrl)" />
                                                        </div>
                                                    </div>
                                                }
                                                <div class="mb-3">
                                                    <FFieldTextClipboard @bind-Value="newDownPartyModal.OAuthClientForm.Model.Name" For="@(() => newDownPartyModal.OAuthClientForm.Model.Name)" />
                                                </div>
                                                <div>
                                                    <FFieldTextClipboard @bind-Value="newDownPartyModal.OAuthClientForm.Model.Secret" For="@(() => newDownPartyModal.OAuthClientForm.Model.Secret)" />
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            @if (!newDownPartyModal.Created)
                            {
                                <div class="mr-auto">
                                    <button type="button" class="btn btn-link pl-0 @(newDownPartyModal.CreateWorking ? "disabled" : "")" @onclick="@(() => ChangeNewDownPartyState())"><i class="bi bi-caret-left bi-right-space"></i>Back</button>
                                </div>
                                <div>
                                    <button type="submit" class="btn btn-primary @(newDownPartyModal.CreateWorking ? "disabled" : "")">Create</button>
                                    <button type="button" class="btn btn-secondary ml-2 @(newDownPartyModal.CreateWorking ? "disabled" : "")" @onclick="CancelNewDownParty">Cancel</button>
                                </div>
                            }
                            else
                            {
                                <button type="button" class="btn btn-link" @onclick="EditCreatedDownParty">Change application</button>
                                <div>
                                    <button type="button" class="btn btn-secondary" @onclick="CancelNewDownParty">Close</button>
                                </div>
                            }
                        </div>
                    </PageEditForm>
                }
                else if (newDownPartyModal.Type == PartyTypes.OAuth2 && newDownPartyModal.OAuthType == DownPartyOAuthTypes.Resource)
                {
                    <PageEditForm @ref="newDownPartyModal.OAuthResourceForm" TModel="NewDownPartyOAuthResourceViewModel" OnAfterInit="@(async m => await OnNewDownPartyOAuthResourceModalAfterInitAsync(m))" OnValidSubmit="@(async (editContext) => await OnNewDownPartyOAuthResourceModalValidSubmitAsync(newDownPartyModal, newDownPartyModal.OAuthResourceForm, editContext))">
                        <div class="modal-header sticky-header">
                            <div class="h5 d-flex flex-nowrap align-items-center mb-0 hide-owerflow">
                                <span class="text-nowrap first-header">@newDownPartyModal.AppTitle</span>
                                <span class="ml-2 text-muted text-truncate second-header">@((newDownPartyModal.Created ? newDownPartyModal.OAuthResourceForm.Model.DisplayName : null) ?? "Complete the OAuth 2.0 resource application")</span>
                            </div>
                            @if (!newDownPartyModal.Created)
                            {
                                <FInputSwitchAdvancedOptions @bind-Value="newDownPartyModal.ShowAdvanced" />
                            }
                        </div>
                        @{
                            EnsureNewDownPartyOAuthResourceSummaryDefaults();
                            var formColumnClass = newDownPartyModal.Created ? "d-none" : "col-12 col-lg-6";
                            var summaryColumnClass = newDownPartyModal.Created ? "col-12 mt-4 mt-lg-0" : "col-12 col-lg-6 mt-4 mt-lg-0";
                            var resourceScopesShow = newDownPartyModal.OAuthResourceForm.Model.ScopesShow ?? new List<string>();
                            var resourceClientScopes = newDownPartyModal.OAuthResourceForm.Model.ClientScopes ?? new List<string>();
                        }
                        <div class="modal-body">
                            <div class="row">
                                <div class="@formColumnClass">
                                    <div class="info-text">
                                        Add new <DocsLink Page="app-reg-oauth-2.0" Fragment="client-credentials-grant">OAuth 2.0</DocsLink> registration for your API (called a Resource). Used for more advanced solutions where multiple applications need to call the API.
                                    </div>

                                    <div class="pt-2">
                                        <FInputText @bind-Value="newDownPartyModal.OAuthResourceForm.Model.DisplayName" For="@(() => newDownPartyModal.OAuthResourceForm.Model.DisplayName)" Focus="true" />
                                        @if (newDownPartyModal.ShowAdvanced)
                                        {
                                            <div class="info-text">Enter the Resource name you want, otherwise auto generated.</div>
                                            <FInputText @bind-Value="newDownPartyModal.OAuthResourceForm.Model.Name" For="@(() => newDownPartyModal.OAuthResourceForm.Model.Name)" />
                                        }

                                        <div class="info-text pt-2">
                                            Add scopes to restrict access from a calling client to the API.
                                        </div>
                                        <FInputTextList @bind-ValueList="newDownPartyModal.OAuthResourceForm.Model.Scopes" For="@(() => newDownPartyModal.OAuthResourceForm.Model.Scopes)" />
                                    </div>
                                </div>
                                <div class="@summaryColumnClass">
                                    <div class="card bg-light border">
                                        <div class="card-body">
                                            <h6 class="card-title mb-4">
                                                @(!newDownPartyModal.Created ? "The application will have the following information" : "Application information")
                                            </h6>
                                            <div class="mb-3">
                                                <FFieldTextClipboard Class="@(newDownPartyModal.ShowOAuthResourceAuthorityDetails ? "" : "pb-1")" @bind-Value="newDownPartyModal.OAuthResourceForm.Model.Authority" For="@(() => newDownPartyModal.OAuthResourceForm.Model.Authority)" />
                                                @if (!newDownPartyModal.ShowOAuthResourceAuthorityDetails && !newDownPartyModal.OAuthResourceForm.Model.Name.IsNullOrWhiteSpace())
                                                {
                                                    <button type="button" class="btn btn-link btn-xs pl-1 pb-3" @onclick="() => newDownPartyModal.ShowOAuthResourceAuthorityDetails = true">Show more</button>
                                                }
                                                @if (newDownPartyModal.ShowOAuthResourceAuthorityDetails && !newDownPartyModal.OAuthResourceForm.Model.Name.IsNullOrWhiteSpace())
                                                {
                                                    <div class="mt-2">
                                                        <FFieldTextClipboard @bind-Value="newDownPartyModal.OAuthResourceForm.Model.OidcDiscovery" For="@(() => newDownPartyModal.OAuthResourceForm.Model.OidcDiscovery)" />
                                                    </div>
                                                }
                                            </div>
                                            <div class="mb-3">
                                                <FFieldTextClipboard @bind-Value="newDownPartyModal.OAuthResourceForm.Model.Name" For="@(() => newDownPartyModal.OAuthResourceForm.Model.Name)" />
                                            </div>
                                            @if (resourceScopesShow.Any())
                                            {
                                                <div class="mb-3">
                                                    <FFieldTextListClipboard @bind-ValueList="newDownPartyModal.OAuthResourceForm.Model.ScopesShow" For="@(() => newDownPartyModal.OAuthResourceForm.Model.ScopesShow)" />
                                                </div>
                                            }
                                            @if (resourceClientScopes.Any())
                                            {
                                                <div>
                                                    <FFieldTextListClipboard @bind-ValueList="newDownPartyModal.OAuthResourceForm.Model.ClientScopes" For="@(() => newDownPartyModal.OAuthResourceForm.Model.ClientScopes)" />
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            @if (!newDownPartyModal.Created)
                            {
                                <div class="mr-auto">
                                    <button type="button" class="btn btn-link pl-0 @(newDownPartyModal.CreateWorking ? "disabled" : "")" @onclick="@(() => ChangeNewDownPartyState())"><i class="bi bi-caret-left bi-right-space"></i>Back</button>
                                </div>
                                <div>
                                    <button type="submit" class="btn btn-primary @(newDownPartyModal.CreateWorking ? "disabled" : "")">Create</button>
                                    <button type="button" class="btn btn-secondary ml-2 @(newDownPartyModal.CreateWorking ? "disabled" : "")" @onclick="CancelNewDownParty">Cancel</button>
                                </div>
                            }
                            else
                            {
                                <button type="button" class="btn btn-link" @onclick="EditCreatedDownParty">Change application</button>
                                <div>
                                    <button type="button" class="btn btn-secondary" @onclick="CancelNewDownParty">Close</button>
                                </div>
                            }
                        </div>
                    </PageEditForm>
                }
                else if (newDownPartyModal.Type == PartyTypes.Saml2)
                {
                    <PageEditForm @ref="newDownPartyModal.SamlForm" TModel="NewDownPartySamlViewModel" OnAfterInit="@(async m => await OnNewDownPartySamlModalAfterInitAsync(m))" OnValidSubmit="@(async (editContext) => await OnNewDownPartySamlModalValidSubmitAsync(newDownPartyModal, newDownPartyModal.SamlForm, editContext))">
                        <div class="modal-header sticky-header">
                            <div class="h5 d-flex flex-nowrap align-items-center mb-0 hide-owerflow">
                                <span class="text-nowrap first-header">@newDownPartyModal.AppTitle</span>
                                <span class="ml-2 text-muted text-truncate second-header">@((newDownPartyModal.Created ? newDownPartyModal.SamlForm.Model.DisplayName : null) ?? "Complete the SAML 2.0 application")</span>
                            </div>
                            @if (!newDownPartyModal.Created)
                            {
                                <FInputSwitchAdvancedOptions @bind-Value="newDownPartyModal.ShowAdvanced" />
                            }
                        </div>
                        @{
                            EnsureNewDownPartySamlSummaryDefaults();
                            var formColumnClass = newDownPartyModal.Created ? "d-none" : "col-12 col-lg-6";
                            var summaryColumnClass = newDownPartyModal.Created ? "col-12 mt-4 mt-lg-0" : "col-12 col-lg-6 mt-4 mt-lg-0";
                        }
                        <div class="modal-body">
                            <div class="row">
                                <div class="@formColumnClass">
                                    <div class="info-text">
                                        Add new <DocsLink Page="app-reg-saml-2.0">SAML 2.0</DocsLink> registration for your web application running on a server.
                                        <br />
                                        SAML 2.0 is an old standard with its shortcomings, it is often better to use <DocsLink Page="app-reg-oidc">OpenID Connect</DocsLink>.
                                    </div>

                                    <div class="pt-2">
                                        <FInputText @bind-Value="newDownPartyModal.SamlForm.Model.DisplayName" For="@(() => newDownPartyModal.SamlForm.Model.DisplayName)" Focus="true" />
                                        <div class="info-text">Enter the application's issuer, otherwise auto generated.</div>
                                        <FInputText @bind-Value="newDownPartyModal.SamlForm.Model.Issuer" For="@(() => newDownPartyModal.SamlForm.Model.Issuer)" />
                                        @if (newDownPartyModal.ShowAdvanced)
                                        {
                                            <div class="info-text">Enter the technical name you want for the registration, otherwise auto generated.</div>
                                            <FInputText @bind-Value="newDownPartyModal.SamlForm.Model.Name" For="@(() => newDownPartyModal.SamlForm.Model.Name)" />
                                        }
                                        <div class="info-text pt-2">
                                            <div>Enter your application's base URL as Assertion consumer service (ACS) URL, e.g. 'https://myapp.com/' or 'https://myapp.com/acs' or 'https://myapp.com/theappsite'.</div>
                                        </div>
                                        <FInputTextList @bind-ValueList="newDownPartyModal.SamlForm.Model.AcsUrls" For="@(() => newDownPartyModal.SamlForm.Model.AcsUrls)" />
                                        @if (newDownPartyModal.ShowAdvanced)
                                        {
                                            <div class="info-text pt-2">
                                                Enable Absolute URLs if you know the exact URL in your application that the user should be redirected back to when logged in, and enter the absolute URL as the Assertion consumer service (ACS) URL.
                                            </div>
                                            <FInputToggle @bind-Value="newDownPartyModal.SamlForm.Model.DisableAbsoluteUrls" For="@(() => newDownPartyModal.SamlForm.Model.DisableAbsoluteUrls)" Negation="true" TextType="e.d" />
                                        }
                                    </div>
                                </div>
                                <div class="@summaryColumnClass">
                                    <div class="card bg-light border">
                                        <div class="card-body">
                                            <h6 class="card-title mb-4">
                                                @(!newDownPartyModal.Created ? "The application will have the following information" : "Application information")
                                            </h6>
                                            @{
                                                var hasSamlMetadataDetails = !newDownPartyModal.SamlForm.Model.MetadataIssuer.IsNullOrWhiteSpace() ||
                                                    !newDownPartyModal.SamlForm.Model.MetadataAuthn.IsNullOrWhiteSpace() ||
                                                    !newDownPartyModal.SamlForm.Model.MetadataLogout.IsNullOrWhiteSpace();
                                            }
                                            <div class="mb-3">
                                                <FFieldTextClipboard Class="@(newDownPartyModal.ShowSamlMetadataDetails ? string.Empty : "pb-1")" @bind-Value="newDownPartyModal.SamlForm.Model.Metadata" For="@(() => newDownPartyModal.SamlForm.Model.Metadata)" />
                                                @if (!newDownPartyModal.ShowSamlMetadataDetails && !newDownPartyModal.SamlForm.Model.Name.IsNullOrWhiteSpace() && hasSamlMetadataDetails)
                                                {
                                                    <button type="button" class="btn btn-link btn-xs pl-1 pb-3" @onclick="() => newDownPartyModal.ShowSamlMetadataDetails = true">Show more</button>
                                                }
                                                @if (newDownPartyModal.ShowSamlMetadataDetails && !newDownPartyModal.SamlForm.Model.Name.IsNullOrWhiteSpace())
                                                {
                                                    <div class="mt-2">
                                                        <div class="mb-2">
                                                            <FFieldTextClipboard @bind-Value="newDownPartyModal.SamlForm.Model.MetadataIssuer" For="@(() => newDownPartyModal.SamlForm.Model.MetadataIssuer)" />
                                                        </div>
                                                        <div class="mb-2">
                                                            <FFieldTextClipboard @bind-Value="newDownPartyModal.SamlForm.Model.MetadataAuthn" For="@(() => newDownPartyModal.SamlForm.Model.MetadataAuthn)" />
                                                        </div>
                                                        <div>
                                                            <FFieldTextClipboard @bind-Value="newDownPartyModal.SamlForm.Model.MetadataLogout" For="@(() => newDownPartyModal.SamlForm.Model.MetadataLogout)" />
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                            <div>
                                                <FFieldTextClipboard @bind-Value="newDownPartyModal.SamlForm.Model.Issuer" For="@(() => newDownPartyModal.SamlForm.Model.Issuer)" />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            @if (!newDownPartyModal.Created)
                            {
                                <div class="mr-auto">
                                    <button type="button" class="btn btn-link pl-0 @(newDownPartyModal.CreateWorking ? "disabled" : "")" @onclick="@(() => ChangeNewDownPartyState())"><i class="bi bi-caret-left bi-right-space"></i>Back</button>
                                </div>
                                <div>
                                    <button type="submit" class="btn btn-primary @(newDownPartyModal.CreateWorking ? "disabled" : "")">Create</button>
                                    <button type="button" class="btn btn-secondary ml-2 @(newDownPartyModal.CreateWorking ? "disabled" : "")" @onclick="CancelNewDownParty">Cancel</button>
                                </div>
                            }
                            else
                            {
                                <button type="button" class="btn btn-link" @onclick="EditCreatedDownParty">Change application</button>
                                <div>
                                    <button type="button" class="btn btn-secondary" @onclick="CancelNewDownParty">Close</button>
                                </div>
                            }
                        </div>
                    </PageEditForm>
                }
                else
                {
                    throw new Exception("New down-party type and selection not supported.");
                }
            </li>
        }

        @if (downParties != null)
        {
            if (downParties.Count() > 0)
            {
                foreach (var downParty in downParties)
                {
                    <li class="list-group-item @(downParty.Edit ? "active" : "d-flex justify-content-between align-items-center")">
                        @if (!downParty.Error.IsNullOrWhiteSpace())
                        {
                            <div class="alert alert-danger" role="alert">
                                @downParty.Error
                            </div>
                        }
                        @if (downParty.Edit)
                        {
                            if (downParty.Type == PartyTypes.Oidc)
                            {
                                <EOidcDownParty OnStateHasChanged="OnStateHasChangedAsync" DownParties="downParties" DownParty="downParty" TenantName="@TenantName" />
                            }
                            else if (downParty.Type == PartyTypes.OAuth2)
                            {
                                <EOAuthDownParty OnStateHasChanged="OnStateHasChangedAsync" DownParties="downParties" DownParty="downParty" TenantName="@TenantName" />
                            }
                            else if (downParty.Type == PartyTypes.Saml2)
                            {
                                <ESamlDownParty OnStateHasChanged="OnStateHasChangedAsync" DownParties="downParties" DownParty="downParty" TenantName="@TenantName" />
                            }
                            else if (downParty.Type == PartyTypes.TrackLink)
                            {
                                <ETrackLinkDownParty OnStateHasChanged="OnStateHasChangedAsync" DownParties="downParties" DownParty="downParty" TenantName="@TenantName" />
                            }
                        }
                        else
                        {
                            <button type="button" class="btn btn-link text-left pl-0" style="min-width: 0; overflow: hidden;" @onclick="@(() => ShowUpdateDownParty(downParty))">
                                <span class="d-flex align-items-center flex-nowrap text-truncate overflow-hidden" style="min-width: 0;">
                                    <span class="text-truncate flex-grow-1" style="min-width: 0">@GetDownPartyDisplayName(downParty)</span>
                                    <span class="badge badge-light border ml-2 mt-1 flex-shrink-0 d-inline-flex">@GetDownPartyTypeLabel(downParty)</span>
                                </span>
                            </button>
                        }
                    </li>
                }
            }
            else if (!downPartyFilterForm.Model.FilterName.IsNullOrWhiteSpace())
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <div class="font-italic pl-1">No match</div>
                </li>
            }
        }
    </ul>
    @if (paginationToken != null)
    {
        <div class="pl-3 pt-3">
            <button type="button" class="btn btn-secondary" @onclick="LoadMorePartiesAsync">
                Load more
            </button>
        </div>
    }
</div>

@if (testDownPartyModal != null)
{
    <Modal @ref="testDownPartyModal.Modal" Title="Test Application" SubTitle="test all authentication methods">
        <div class="modal-body">
            <FFieldText @bind-Value="testDownPartyModal.DisplayName" For="@(() => testDownPartyModal.DisplayName)" />
            @if (!testDownPartyModal.Error.IsNullOrWhiteSpace())
            {
                <div class="alert alert-danger" role="alert">
                    @testDownPartyModal.Error
                </div>
            }
            <div class="pt-4 text-center">
                <a class="btn btn-primary @(testDownPartyModal.TestUrl.IsNullOrEmpty() ? "disabled" : "")" target="_blank" href="@testDownPartyModal.TestUrl">Start the test</a>
            </div>
            <div class="font-italic text-center">
                The test is lunched in a new browser tab.
            </div>
            <div class="pt-5 text-break">
                <FFieldTextClipboard @bind-Value="testDownPartyModal.TestUrl" For="@(() => testDownPartyModal.TestUrl)" />
            </div>
            @if (testDownPartyModal.TestExpireAt > 0)
            {
                <div class="pt-2 font-italic">
                    The test application is valid until @DateTimeOffset.FromUnixTimeSeconds(testDownPartyModal.TestExpireAt).LocalDateTime.ToShortTimeString().
                </div>
            }
            <div class="d-flex modal-footer px-0 pb-0 mt-4">
                <div class="mr-auto"></div>
                <button type="button" class="btn btn-secondary" @onclick="@(() => testDownPartyModal.Modal.Hide())">Close</button>
            </div>
        </div>
    </Modal>
}

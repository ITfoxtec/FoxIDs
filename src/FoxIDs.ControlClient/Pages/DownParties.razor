@page "/{tenantName}/downparties"
@inherits PageBase

<div class="d-flex">
    <div class="mr-auto info-text">
        Configure <DocsLink Page="parties">parties</DocsLink> in the track and connect tracks with <DocsLink Page="howto-tracklink-foxids">track links</DocsLink>.
    </div>
</div>

<ul class="nav nav-tabs my-3">
    <li class="nav-item">
        <a class="nav-link active">Down-parties</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" href="@upPartyHref">Up-parties</a>
    </li>
</ul>

<div class="tab-content">
    <div class="d-flex">
        <div class="mr-auto info-text">
            Add a down-party to connect an application. You can connect web apps with <DocsLink Page="down-party-oidc">OpenID Connect</DocsLink> and <DocsLink Page="down-party-saml-2.0">SAML 2.0</DocsLink>, connect APIs with <DocsLink Page="down-party-oauth-2.0" Fragment="oauth-20-resource">OAuth 2.0 Resource</DocsLink> and connect services with <DocsLink Page="down-party-oauth-2.0" Fragment="client-credentials-grant">OAuth 2.0 Client Credentials Grant</DocsLink>.
        </div>
        <div class="p-2">
            <div class="btn-group" role="group">
                <button id="btnGroupCreateDownParty" type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    <span class="oi oi-plus" aria-hidden="true"></span> Create Down-party
                </button>
                <div class="dropdown-menu dropdown-menu-right" aria-labelledby="btnGroupCreateDownParty">
                    <button class="dropdown-item btn btn-link" type="button" @onclick="@(() => ShowCreateDownParty(PartyTypes.Oidc))">OpenID Connect</button>
                    <button class="dropdown-item btn btn-link" type="button" @onclick="@(() => ShowCreateDownParty(PartyTypes.OAuth2, OAuthSubPartyTypes.Resource))">OAuth 2.0 - Resource (API)</button>
                    <button class="dropdown-item btn btn-link" type="button" @onclick="@(() => ShowCreateDownParty(PartyTypes.OAuth2, OAuthSubPartyTypes.ClientCredentialsGrant))">OAuth 2.0 - Client Credentials Grant</button>
                    <button class="dropdown-item btn btn-link" type="button" @onclick="@(() => ShowCreateDownParty(PartyTypes.Saml2))">SAML 2.0</button>
                    <div class="dropdown-divider"></div>
                    <button class="dropdown-item btn btn-link" type="button" @onclick="@(() => ShowCreateDownParty(PartyTypes.TrackLink))">Track link</button>
                </div>
            </div>
        </div>
    </div>
    <PageEditForm @ref="downPartyFilterForm" TModel="FilterPartyViewModel" OnValidSubmit="OnDownPartyFilterValidSubmitAsync">
        <FInputTextFilter @bind-Value="downPartyFilterForm.Model.FilterName" For="@(() => downPartyFilterForm.Model.FilterName)" />
    </PageEditForm>

    <ul class="list-group">
        @foreach (var downParty in downParties)
        {
            <li class="list-group-item @(downParty.Edit ? "active" : string.Empty)">
                @if (!downParty.Error.IsNullOrWhiteSpace())
                {
                    <div class="alert alert-danger" role="alert">
                        @downParty.Error
                    </div>
                }
                @if (downParty.Edit)
                {
                    if (downParty.Type == PartyTypes.Oidc)
                    {
                        <EOidcDownParty OnStateHasChanged="OnStateHasChangedAsync" DownParties="downParties" DownParty="downParty" TenantName="@TenantName" />
                    }
                    else if (downParty.Type == PartyTypes.OAuth2)
                    {
                        <EOAuthDownParty OnStateHasChanged="OnStateHasChangedAsync" DownParties="downParties" DownParty="downParty" TenantName="@TenantName" />
                    }
                    else if (downParty.Type == PartyTypes.Saml2)
                    {
                        <ESamlDownParty OnStateHasChanged="OnStateHasChangedAsync" DownParties="downParties" DownParty="downParty" TenantName="@TenantName" />
                    }
                    else if (downParty.Type == PartyTypes.TrackLink)
                    {
                        <ETrackLinkDownParty OnStateHasChanged="OnStateHasChangedAsync" DownParties="downParties" DownParty="downParty" TenantName="@TenantName" />
                    }
                }
                else
                {
                    <button class="btn btn-link" @onclick="@(() => ShowUpdateDownParty(downParty))">
                        @DownPartyInfoText(downParty)
                    </button>
                }
            </li>
        }
    </ul>
</div>

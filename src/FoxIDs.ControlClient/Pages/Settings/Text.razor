@page "/{tenantName}/texts"
@inherits PageBase

<ul class="nav nav-tabs">
    <li class="nav-item">
        <a class="nav-link" href="@trackSettingsHref">Environment</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" href="@mailSettingsHref">Mail</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" href="@claimMappingsHref">Claim mappings</a>
    </li>
    <li class="nav-item">
        <a class="nav-link active">Texts</a>
    </li>
    @if (IsMasterTenant)
    {
        if (ClientSettings.EnablePayment)
        {
            <li class="nav-item">
                <a class="nav-link" href="@smsPricesHref">SMS Prices</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="@plansHref">Plans</a>
            </li>
        }
        <li class="nav-item">
            <a class="nav-link" href="@riskPasswordsHref">Risk Passwords</a>
        </li>
    }
</ul>

<div class="d-flex pt-2">
    <div class="info-text mr-auto">
        The texts are used in the FoxIDs login pages. It is possible to <DocsLink Page="language">change the text</DocsLink> shown depending on culture in the environment.
    </div>
    <div class="pb-2 d-block">
        <div class="row">
            <div class="col-12">
                <button type="button" class="btn btn-primary" @onclick="ShowNewText">
                    <span class="oi oi-plus" aria-hidden="true"></span> New text
                </button>
            </div>
        </div>
        <div class="row">
            <div class="col-12 pt-2">
                <button type="button" class="btn btn-sm btn-outline-dark" @onclick="@(async () => await ShowUpdateTextSettingsModalAsync())">
                    Text debugging
                </button>
            </div>
        </div>
    </div>
</div>

<PageEditForm @ref="resourceFilterForm" TModel="FilterResourceViewModel" OnValidSubmit="OnResourceFilterValidSubmitAsync">
    <FInputTextFilter @bind-Value="resourceFilterForm.Model.FilterName" For="@(() => resourceFilterForm.Model.FilterName)" />
</PageEditForm>

<ul class="list-group">
    @foreach (var resource in resources)
    {
        <li class="list-group-item @(resource.Edit ? "active" : string.Empty)">
            @if (!resource.Error.IsNullOrWhiteSpace())
            {
                <div class="alert alert-danger" role="alert">
                    @resource.Error
                </div>
            }
            @if (resource.Edit)
            {
                <PageEditForm @ref="resource.Form" TModel="ResourceItemViewModel" OnValidSubmit="@(async (editContext) => await OnEditResourceValidSubmitAsync(resource, editContext))">
                    <div class="modal-header">
                        Resource @(!resource.Form.Model.Name.IsNullOrEmpty() ? $"(ID: {resource.Form.Model.Id})" : "")
                    </div>
                    <div class="modal-body">
                        @if (!resource.Form.Model.Name.IsNullOrEmpty())
                        {
                            <FFieldText @bind-Value="resource.Form.Model.Name" For="@(() => resource.Form.Model.Name)" />
                            <div class="form-group active-group active">
                                <label class="label-control">Translations</label>
                                <div class="card">
                                    <div class="card-body">
                                        @foreach (var item in resource.Form.Model.Items)
                                        {

                                            <div class="pt-2">
                                                <div class="active-group active pb-0">
                                                    <div class="card">
                                                        <div class="card-body">
                                                            <FInputText Class="pb-0" @bind-Value="item.Value" For="@(() => item.Value)" LabelText="Custom translation" />
                                                        </div>
                                                    </div>
                                                    <label class="label-control">@($"({item.Culture}) {item.DefaultValue}")</label>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                                <ValidationMessage For="@(() => resource.Form.Model.Items)" />
                            </div>

                        }
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Update</button>
                        <button type="button" class="btn btn-secondary" @onclick="@(() => ResourceCancel(resource))">Cancel</button>
                    </div>
                </PageEditForm>
            }
            else
            {
                <button type="button" class="btn btn-link text-left p-0" @onclick="@(async () => await ShowUpdateResourceAsync(resource))">
                    @resource.Name
                </button><br />
                <span>ID: @resource.Id</span>
            }
        </li>
    }
</ul>

<Modal @ref="textSettingsModal" Title="Text debugging">
    <div class="info-text">
        Texts in FoxIDs have unique IDs. It is possible to display the IDs together with the text, which makes it possible to search for text elements using the ID.
    </div>

    @if (!generalTextSettings.Error.IsNullOrWhiteSpace())
    {
        <div class="alert alert-danger" role="alert">
            @generalTextSettings.Error
        </div>
    }
    <PageEditForm @ref="generalTextSettings.Form" TModel="Api.ResourceSettings" OnValidSubmit="OnUpdateTextSettingsValidSubmitAsync">
        @if (generalTextSettings.Form?.Model != null)
        {
            <div class="modal-header">
                Text settings
            </div>
            <div class="modal-body">
                <FInputToggle @bind-Value="generalTextSettings.Form.Model.ShowResourceId" For="@(() => generalTextSettings.Form.Model.ShowResourceId)" TextType="e.d" />
            </div>
            <div class="modal-footer">
                <button type="submit" class="btn btn-primary">Update</button>
                <button type="button" class="btn btn-secondary" @onclick="@(() => { generalTextSettings.Edit = false; textSettingsModal.Hide(); })">Cancel</button>
            </div>
        }
    </PageEditForm>
</Modal>


@page "/{tenantName}/authentication"
@inherits PageBase

<div class="tab-content">
    <div class="d-flex">
        <div class="mr-auto info-text pt-0">
            Create authentication methods with <DocsLink Page="auth-method-oidc">OpenID Connect</DocsLink> or <DocsLink Page="auth-method-saml-2.0">SAML 2.0</DocsLink> to external identity providers.
            And configure user <DocsLink Page="login">log in and MFA</DocsLink>.
            <br />
            More about: <DocsLink Page="howto-connect">How to connect</DocsLink> | <DocsLink Page="bridge">SAML 2.0 bridge</DocsLink> | <DocsLink Page="token-exchange" Fragment="token-exchange-by-trust">Token exchange by trust</DocsLink> | <DocsLink Page="howto-environmentlink-foxids">Environment Link</DocsLink>
        </div>
        <div class="pb-2">
            <button type="button" class="btn btn-primary" @onclick="ShowNewUpParty">
                <span class="oi oi-plus" aria-hidden="true"></span> New method
            </button>
        </div>
    </div>
    <PageEditForm @ref="upPartyFilterForm" TModel="FilterUpPartyViewModel" OnValidSubmit="OnUpPartyFilterValidSubmitAsync">
        <FInputTextFilter @bind-Value="upPartyFilterForm.Model.FilterName" For="@(() => upPartyFilterForm.Model.FilterName)" />
    </PageEditForm>

    <ul class="list-group">
        @if (upParties != null)
        {
            @if (upParties.Count() > 0)
            {
                @foreach (var upParty in upParties)
                {
                    <li class="list-group-item @(upParty.Edit ? "active" : string.Empty)">
                        @if (!upParty.Error.IsNullOrWhiteSpace())
                        {
                            <div class="alert alert-danger" role="alert">
                                @upParty.Error
                            </div>
                        }
                        @if (upParty.Edit)
                        {
                            if (upParty.Type == PartyTypes.Login)
                            {
                                <ELoginUpParty OnStateHasChanged="OnStateHasChangedAsync" UpParties="upParties" UpParty="upParty" TenantName="@TenantName" />
                            }
                            else if (upParty.Type == PartyTypes.OAuth2)
                            {
                                <EOAuthUpParty OnStateHasChanged="OnStateHasChangedAsync" UpParties="upParties" UpParty="upParty" TenantName="@TenantName" />
                            }
                            else if (upParty.Type == PartyTypes.Oidc)
                            {
                                <EOidcUpParty OnStateHasChanged="OnStateHasChangedAsync" UpParties="upParties" UpParty="upParty" TenantName="@TenantName" />
                            }
                            else if (upParty.Type == PartyTypes.Saml2)
                            {
                                <ESamlUpParty OnStateHasChanged="OnStateHasChangedAsync" UpParties="upParties" UpParty="upParty" TenantName="@TenantName" />
                            }
                            else if (upParty.Type == PartyTypes.TrackLink)
                            {
                                <ETrackLinkUpParty OnStateHasChanged="OnStateHasChangedAsync" UpParties="upParties" UpParty="upParty" TenantName="@TenantName" />
                            }
                        }
                        else
                        {
                            <button class="btn btn-link" @onclick="@(() => ShowUpdateUpParty(upParty))">
                                @UpPartyInfoText(upParty)
                            </button>
                        }
                    </li>
                }
            }
            else if (!upPartyFilterForm.Model.FilterName.IsNullOrWhiteSpace())
            {
                <div class="font-italic pl-1">No match</div>
            }
        }
    </ul>
</div>

@if (newUpPartyModal != null)
{
    <Modal @ref="newUpPartyModal.Modal" Title="New method">
        <div class="modal-body">
            <div class="d-flex">
                <div class="mr-auto"><h6>@newUpPartyModal.AppTitle</h6></div>
                <div class="pt-0 pb-2">
                    @if (newUpPartyModal.Type == null)
                    {
                        <FInputSwitch @bind-Value="newUpPartyModal.ShowAll" Text="Show advanced" />
                    }
                    else if (!newUpPartyModal.Created)
                    {
                        <FInputSwitchAdvancedOptions @bind-Value="newUpPartyModal.ShowAdvanced" />
                    }
                </div>
            </div>
            @if (newUpPartyModal.Type == null)
            {
                <div class="form-group">
                    <div class="row">
                        <div class="col-6 py-3 @(newUpPartyModal.ShowAll ? "col-lg-4" : string.Empty)">
                            <a href="" class="d-flex flex-column btn btn-wrap btn-max btn-outline-secondary" onclick="@(async () => await ChangeNewUpPartyStateAsync("OpenID Provider", PartyTypes.Oidc))" @onclick:preventDefault>
                                <h5 class="pt-2">OpenID Provider <div class="small">(OpenID Connect)</div></h5>
                                <div class="py-0 font-italic">E.g., Microsoft Entra ID, AD FS, IdentityServer, Google, Auth0, Okta, Ping Identity, Keycloak, Facebook, LinkedIn</div>
                                <div class="py-2">Identity Provider that support OpenID Connect.</div>
                            </a>
                        </div>
                        <div class="col-6 py-3 @(newUpPartyModal.ShowAll ? "col-lg-4" : string.Empty)">
                            <a href="" class="d-flex flex-column btn btn-wrap btn-max btn-outline-secondary" onclick="@(async () => await ChangeNewUpPartyStateAsync("Identity Provider", PartyTypes.Saml2))" @onclick:preventDefault>
                                <h5 class="pt-2">Identity Provider <div class="small">(SAML 2.0)</div></h5>
                                <div class="py-0 font-italic">E.g., Microsoft Entra ID, AD FS, Google Workspace, Okta, Ping Identity, National IdPs</div>
                                <div class="py-2">Identity Provider that support SAML 2.0.</div>
                            </a>
                        </div>


                        @if (newUpPartyModal.ShowAll)
                        {
                            <div class="col-6 py-3 @(newUpPartyModal.ShowAll ? "col-lg-4" : string.Empty)">
                                <a href="" class="d-flex flex-column btn btn-wrap btn-max btn-outline-secondary" onclick="@(async () => await ChangeNewUpPartyStateAsync("Identity Provider - Token Exchange", PartyTypes.OAuth2))" @onclick:preventDefault>
                                    <h5 class="pt-2">Identity Provider - Token Exchange <div class="small">(OAuth 2.0)</div></h5>
                                    <div class="py-0 font-italic">E.g., Microsoft Entra ID, AD FS, IdentityServer, Google, Auth0, Okta, Ping Identity, Keycloak, Facebook, LinkedIn</div>
                                    <div class="py-2">Exchange token issued from Identity Provider to application access token.</div>
                                </a>
                            </div>

                            <div class="col-6 py-3 @(newUpPartyModal.ShowAll ? "col-lg-4" : string.Empty)">
                                <a href="" class="d-flex flex-column btn btn-wrap btn-max btn-outline-secondary" onclick="@(async () => await ChangeNewUpPartyStateAsync("Environment Link", PartyTypes.TrackLink))" @onclick:preventDefault>
                                    <h5 class="pt-2">Environment Link</h5>
                                    <div class="py-2">Connect this environment to another FoxIDs environment and reuse functionality and connections.</div>
                                </a>
                            </div>

                            <div class="col-6 py-3 @(newUpPartyModal.ShowAll ? "col-lg-4" : string.Empty)">
                                <a href="" class="d-flex flex-column btn btn-wrap btn-max btn-outline-secondary" onclick="@(async () => await ChangeNewUpPartyStateAsync("User log in", PartyTypes.Login))" @onclick:preventDefault>
                                    <h5 class="pt-2">User log in</h5>
                                    <div class="py-2">User log in for the users in the environment's user store.</div>
                                </a>
                            </div>
                        }
                    </div>
                </div>
            }
            else if (newUpPartyModal.Type == PartyTypes.TrackLink)
            {
                <PageEditForm @ref="newUpPartyModal.EnvironmentLinkForm" TModel="NewUpPartyEnvironmentLinkViewModel" OnAfterInit="@(m => OnNewUpPartyOAuthEnvironmentLinkModalValidAfterInit())" OnValidSubmit="@(async (editContext) => await OnNewUpPartyOAuthEnvironmentLinkModalValidSubmitAsync(newUpPartyModal, newUpPartyModal.EnvironmentLinkForm, editContext))">
                    @if (!newUpPartyModal.Created)
                    {
                        <div class="info-text">
                            Add new <DocsLink Page="howto-environmentlink-foxids">Environment Link</DocsLink> to another FoxIDs environment and reuse functionality and connections.
                        </div>

                        <div>
                            <FInputText @bind-Value="newUpPartyModal.EnvironmentLinkForm.Model.DisplayName" For="@(() => newUpPartyModal.EnvironmentLinkForm.Model.DisplayName)" Focus="true" />

                            <ValidationMessage For="@(() => newUpPartyModal.EnvironmentLinkForm.Model.ToDownTrackName)" />
                            @if (@newUpPartyModal.EnvironmentLinkForm.Model.ToDownTrackName.IsNullOrWhiteSpace())
                            {
                                <div class=" form-group active-group active">
                                    <label class="label-control">Select the environment to link to</label>
                                    <div class="card pb-3">
                                        <PageEditForm @ref="newUpPartyModal.SelectTrackFilterForm" TModel="FilterTrackViewModel" OnValidSubmit="OnSelectTrackFilterValidSubmitAsync">
                                            <div class="form-group active-group px-3 mt-4 pb-2">
                                                <FInputTextFilter @bind-Value="newUpPartyModal.SelectTrackFilterForm.Model.FilterName" For="@(() => newUpPartyModal.SelectTrackFilterForm.Model.FilterName)" IncludeActiveFormGroup="false" />
                                            </div>
                                        </PageEditForm>

                                        @if (newUpPartyModal.SelectTrackTasks != null)
                                        {
                                            @if (newUpPartyModal.SelectTrackTasks.Count() > 0)
                                            {
                                                @foreach (var track in newUpPartyModal.SelectTrackTasks)
                                                {
                                                    @if (newUpPartyModal.SelectTrackTasks.Count() > 1 && Constants.Routes.MasterTenantName.Equals(track.Name, StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        <div class="dropdown-divider"></div>
                                                        <div class="info-text px-4 pb-1">
                                                            Your tenant access is configured in the master environment.
                                                        </div>
                                                    }
                                                    <button class="dropdown-item btn btn-link px-4" @onclick="@(() => SelectTrack(track))">
                                                        @if (track.DisplayName.IsNullOrWhiteSpace())
                                                        {
                                                            @track.Name <small class="text-muted">@track.Name.GetProdTrackName()</small>
                                                        }
                                                        else
                                                        {
                                                            @track.DisplayName
                                                        }
                                                    </button>
                                                }
                                            }
                                            else if (!newUpPartyModal.SelectTrackFilterForm.Model.FilterName.IsNullOrWhiteSpace())
                                            {
                                                <div class="font-italic px-4">No match</div>
                                            }
                                        }
                                    </div>
                                </div>
                            }
                            else
                            {
                                @if (!newUpPartyModal.EnvironmentLinkForm.Model.ToDownTrackDisplayName.IsNullOrWhiteSpace())
                                {
                                    <FFieldText Class="pb-0" @bind-Value="newUpPartyModal.EnvironmentLinkForm.Model.ToDownTrackDisplayName" For="@(() => newUpPartyModal.EnvironmentLinkForm.Model.ToDownTrackDisplayName)" />
                                }
                                else
                                {
                                    <FFieldText Class="pb-0" @bind-Value="newUpPartyModal.EnvironmentLinkForm.Model.ToDownTrackName" For="@(() => newUpPartyModal.EnvironmentLinkForm.Model.ToDownTrackName)" />
                                }
                                <button class="btn btn-link btn-sm pt-0 pb-3" onclick="@(() => ShowSelectTrack(newUpPartyModal.EnvironmentLinkForm.Model))">Link to a different environment</button>
                            }

                            @if (newUpPartyModal.ShowAdvanced)
                            {
                                <div class="info-text">Enter the Client ID you want, otherwise auto generated.</div>
                                <FInputText @bind-Value="newUpPartyModal.EnvironmentLinkForm.Model.Name" For="@(() => newUpPartyModal.EnvironmentLinkForm.Model.Name)" />
                            }
                        </div>
                    }
                    else
                    {
                        <div class="info-text">
                            The two FoxIDs environments are linked together.
                        </div>

                        <div class="info-text">
                            Remember the following information, you need them to configure your application.
                        </div>
                    }
                    <div class="d-flex modal-footer px-0 pb-0">
                        @if (!newUpPartyModal.Created)
                        {
                            <div class="mr-auto">
                                <button type="button" class="btn btn-link pl-0 @(newUpPartyModal.CreateWorking ? "disabled" : "")" onclick="@(async () => await ChangeNewUpPartyStateAsync())"><i class="bi bi-caret-left bi-right-space"></i>Back</button>
                            </div>
                            <button type="submit" class="btn btn-primary @(newUpPartyModal.CreateWorking ? "disabled" : "")">Create</button>
                            <button type="button" class="btn btn-secondary @(newUpPartyModal.CreateWorking ? "disabled" : "")" @onclick="@(() => newUpPartyModal.Modal.Hide())">Cancel</button>
                        }
                        else
                        {
                            <div class="mr-auto"></div>
                            <button type="button" class="btn btn-secondary" @onclick="@(() => newUpPartyModal.Modal.Hide())">Close</button>
                        }
                    </div>
                </PageEditForm>
            }
            else
            {
                throw new Exception("New up-party type and selection not supported.");
            }
        </div>
    </Modal>
}
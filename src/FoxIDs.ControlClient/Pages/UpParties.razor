@page "/{tenantName}/authentication"
@inherits PageBase

<div class="tab-content">
    <div class="d-flex">
        <div class="mr-auto info-text pt-0">
            Create authentication methods with <DocsLink Page="auth-method-oidc">OpenID Connect</DocsLink> or <DocsLink Page="auth-method-saml-2.0">SAML 2.0</DocsLink> to external identity providers.
            And configure user <DocsLink Page="login">log in and MFA</DocsLink>.
            <br />
            More about: <DocsLink Page="howto-connect">How to connect</DocsLink> | <DocsLink Page="bridge">SAML 2.0 bridge</DocsLink> | <DocsLink Page="howto-environmentlink-foxids">Environment Link</DocsLink>
        </div>
        <div class="pb-2">
            <button type="button" class="btn btn-primary" @onclick="ShowNewUpParty">
                <span class="oi oi-plus" aria-hidden="true"></span> New authentication
            </button>
        </div>
    </div>
    <PageEditForm @ref="upPartyFilterForm" TModel="FilterUpPartyViewModel" OnValidSubmit="OnUpPartyFilterValidSubmitAsync">
        <FInputTextFilter @bind-Value="upPartyFilterForm.Model.FilterName" For="@(() => upPartyFilterForm.Model.FilterName)" />
    </PageEditForm>

    <ul class="list-group">
        @if (upParties != null)
        {
            @if (upParties.Count() > 0)
            {
                @foreach (var upParty in upParties)
                {
                    <li class="list-group-item @(upParty.Edit ? "active" : "d-flex justify-content-between align-items-center")">
                        @if (!upParty.Error.IsNullOrWhiteSpace())
                        {
                            <div class="alert alert-danger" role="alert">
                                @upParty.Error
                            </div>
                        }
                        @if (upParty.Edit)
                        {
                            if (upParty.Type == PartyTypes.Login)
                            {
                                <ELoginUpParty OnStateHasChanged="OnStateHasChangedAsync" OnTestUpParty="InitAndShowTestUpPartyAsync" UpParties="upParties" UpParty="upParty" TenantName="@TenantName" />
                            }
                            else if (upParty.Type == PartyTypes.OAuth2)
                            {
                                <EOAuthUpParty OnStateHasChanged="OnStateHasChangedAsync" UpParties="upParties" UpParty="upParty" TenantName="@TenantName" />
                            }
                            else if (upParty.Type == PartyTypes.Oidc)
                            {
                                <EOidcUpParty OnStateHasChanged="OnStateHasChangedAsync" OnTestUpParty="InitAndShowTestUpPartyAsync" UpParties="upParties" UpParty="upParty" TenantName="@TenantName" />
                            }
                            else if (upParty.Type == PartyTypes.Saml2)
                            {
                                <ESamlUpParty OnStateHasChanged="OnStateHasChangedAsync" OnTestUpParty="InitAndShowTestUpPartyAsync" UpParties="upParties" UpParty="upParty" TenantName="@TenantName" />
                            }
                            else if (upParty.Type == PartyTypes.TrackLink)
                            {
                                <ETrackLinkUpParty OnStateHasChanged="OnStateHasChangedAsync" OnTestUpParty="InitAndShowTestUpPartyAsync" UpParties="upParties" UpParty="upParty" TenantName="@TenantName" />
                            }
                            else if (upParty.Type == PartyTypes.ExternalLogin)
                            {
                                <EExternalLoginUpParty OnStateHasChanged="OnStateHasChangedAsync" OnTestUpParty="InitAndShowTestUpPartyAsync" UpParties="upParties" UpParty="upParty" TenantName="@TenantName" />
                            }
                        }
                        else
                        {
                            <button class="btn btn-link" @onclick="@(() => ShowUpdateUpParty(upParty))">
                                @UpPartyInfoText(upParty)
                            </button>
                            @if (upParty.Type != PartyTypes.OAuth2)
                            {
                                <button type="button" class="btn btn-sm btn-outline-dark" @onclick="@(async () => await InitAndShowTestUpPartyAsync(upParty))">
                                    Test authentication
                                </button>
                            }
                        }
                    </li>
                }
            }
            else if (!upPartyFilterForm.Model.FilterName.IsNullOrWhiteSpace())
            {
                <div class="font-italic pl-1">No match</div>
            }
        }
    </ul>
</div>

@if (newUpPartyModal != null)
{
    <Modal @ref="newUpPartyModal.Modal" Title="New Authentication Method">
        <div class="modal-body">
            @if (newUpPartyModal.Type != null)
            {
                <div class="d-flex pb-2">
                    @if (!newUpPartyModal.AppTitleImage.IsNullOrEmpty())
                    {
                        <img class="pr-2" style="height: @(newUpPartyModal.AppTitleImageHeight)" src="@newUpPartyModal.AppTitleImage" />
                    }
                    <div class="mr-auto"><h5>@(newUpPartyModal.AppTitle) @if (!newUpPartyModal.AppSubTitle.IsNullOrEmpty()) { <div class="small">(@(newUpPartyModal.AppSubTitle))</div> } </h5></div>
                    <div class="pt-0 pb-2">
                        @if (!newUpPartyModal.Created && newUpPartyModal.Type != PartyTypes.TrackLink)
                        {
                            <FInputSwitchAdvancedOptions @bind-Value="newUpPartyModal.ShowAdvanced" />
                        }
                    </div>
                </div>
            }
            <div class="@(newUpPartyModal.Type == null ? string.Empty : "d-none")">
                <div class="accordion" id="accordionAuthMethods">
                    <div class="card">
                        <div class="card-header" id="headingOneS">
                            <h2 class="mb-0">
                                <button class="btn btn-link btn-block text-left" type="button" data-toggle="collapse" data-target="#collapseOneS" aria-expanded="true" aria-controls="collapseOneS">
                                    Connect to Social
                                </button>
                            </h2>
                        </div>

                        <div id="collapseOneS" class="collapse show" aria-labelledby="headingOneS" data-parent="#accordionAuthMethods">
                            <div class="card-body">
                            </div>
                        </div>
                    </div>
                    <div class="card">
                        <div class="card-header" id="headingOneE">
                            <h2 class="mb-0">
                                <button class="btn btn-link btn-block text-left" type="button" data-toggle="collapse" data-target="#collapseOneE" aria-expanded="true" aria-controls="collapseOneE">
                                    Connect to Enterprise
                                </button>
                            </h2>
                        </div>

                        <div id="collapseOneE" class="collapse" aria-labelledby="headingOneE" data-parent="#accordionAuthMethods">
                            <div class="card-body">
                                <div class="row">
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card">
                        <div class="card-header" id="headingOneI">
                            <h2 class="mb-0">
                                <button class="btn btn-link btn-block text-left" type="button" data-toggle="collapse" data-target="#collapseOneI" aria-expanded="true" aria-controls="collapseOneI">
                                    Connect to Danish ID Provider
                                </button>
                            </h2>
                        </div>

                        <div id="collapseOneI" class="collapse" aria-labelledby="headingOneI" data-parent="#accordionAuthMethods">
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-6 py-2">
                                        @{
                                            var nemlogin = new UpPartyInfo
                                            {
                                                Title = "NemLog-in (Danish IdP)",
                                                SubTitle = "SAML 2.0",
                                                Image = "./images/logos/nemlogin.png",
                                                ImageHeight = "45px"
                                            };
                                        }
                                        <a href="" class="d-flex flex-column btn btn-wrap btn-max btn-left btn-outline-secondary" onclick="@(async () => await ChangeNewUpPartyStateAsync(nemlogin, PartyTypes.Saml2, IdPTypes.NemLogin))" @onclick:preventDefault>
                                            <div class="d-flex">
                                                <img class="my-2 pr-2" style="height: @(nemlogin.ImageHeight)" src="@(nemlogin.Image)" />
                                                <h5 class="my-2">@(nemlogin.Title) <div class="small">(@(nemlogin.SubTitle))</div></h5>
                                            </div>
                                            <div class="py-2">Connect to NemLog-in and let the uses login with MitID or other methods supported by NemLog-in.</div>
                                            <div class="py-2 font-italic">Convert to OpenID Connect and let FoxIDs handle the OIOSAML 3.0 connection and NemLog-in requirements including message logging.</div>
                                        </a>
                                    </div>
                                    <div class="col-6 py-2">
                                        @{
                                            var contextHandler = new UpPartyInfo
                                            {
                                                Title = "Context Handler / FKA (Danish IdP)",
                                                SubTitle = "SAML 2.0",
                                                Image = "./images/logos/contexthandler.svg",
                                                ImageHeight = "45px"
                                            };
                                        }
                                        <a href="" class="d-flex flex-column btn btn-wrap btn-max btn-left btn-outline-secondary" onclick="@(async () => await ChangeNewUpPartyStateAsync(contextHandler, PartyTypes.Saml2, IdPTypes.ContextHandler))" @onclick:preventDefault>
                                            <div class="d-flex">
                                                <img class="my-2 pr-2" style="height: @(contextHandler.ImageHeight)" src="@(contextHandler.Image)" />
                                                <h5 class="my-2">@(contextHandler.Title) <div class="small">(@(contextHandler.SubTitle))</div></h5>
                                            </div>
                                            <div class="py-2">Connect to Context Handler, in Danish called 'Fælleskommunal Adgangsstyring' (FKA), and leverage the municipal login.</div>
                                            <div class="py-2 font-italic">Convert to OpenID Connect and let FoxIDs handle the OIOSAML 3.0 connection.</div>
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card">
                        <div class="card-header" id="headingTwo">
                            <h2 class="mb-0">
                                <button class="btn btn-link btn-block text-left collapsed" type="button" data-toggle="collapse" data-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                                    Connect by Security Standard
                                </button>
                            </h2>
                        </div>
                        <div id="collapseTwo" class="collapse" aria-labelledby="headingTwo" data-parent="#accordionAuthMethods">
                            <div class="card-body">
                                <div class="d-flex">
                                    <div class="mr-auto"></div>
                                    <div class="pt-0 pb-2">
                                        <FInputSwitch @bind-Value="newUpPartyModal.ShowAll" Text="Show advanced" />
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-6 py-2">
                                        <a href="" class="d-flex flex-column btn btn-wrap btn-max btn-left btn-outline-secondary" onclick="@(async () => await ChangeNewUpPartyStateAsync("OpenID Provider", PartyTypes.Oidc))" @onclick:preventDefault>
                                            <h5 class="py-2">OpenID Provider <div class="small">(OpenID Connect)</div></h5>
                                            <div class="py-2 font-italic">E.g., Microsoft Entra ID, AD FS, IdentityServer, Google, Auth0, Okta, Ping Identity, Keycloak, Facebook, LinkedIn.</div>
                                            <div class="py-2">Identity Provider that support OpenID Connect.</div>
                                        </a>
                                    </div>
                                    <div class="col-6 py-2">
                                        <a href="" class="d-flex flex-column btn btn-wrap btn-max btn-left btn-outline-secondary" onclick="@(async () => await ChangeNewUpPartyStateAsync("Identity Provider", PartyTypes.Saml2))" @onclick:preventDefault>
                                            <h5 class="py-2">Identity Provider <div class="small">(SAML 2.0)</div></h5>
                                            <div class="py-2 font-italic">E.g., Microsoft Entra ID, AD FS, Google Workspace, Okta, Ping Identity, National IdPs.</div>
                                            <div class="py-2">Identity Provider that support SAML 2.0.</div>
                                        </a>
                                    </div>
                                    @if (newUpPartyModal.ShowAll)
                                    {
                                        <div class="col-6 py-2">
                                            <a href="" class="d-flex flex-column btn btn-wrap btn-max btn-left btn-outline-secondary" onclick="@(async () => await ChangeNewUpPartyStateAsync("Identity Provider - Token Exchange", PartyTypes.OAuth2, tokenExchange: true))" @onclick:preventDefault>
                                                <h5 class="py-2">Identity Provider - Token Exchange <div class="small">(OAuth 2.0)</div></h5>
                                                <div class="py-2 font-italic">E.g., Microsoft Entra ID, AD FS, IdentityServer, Google, Auth0, Okta, Ping Identity, Keycloak, Facebook, LinkedIn.</div>
                                                <div class="py-2">Exchange access token issued from Identity Provider to application / API access token.</div>
                                            </a>
                                        </div>
                                        <div class="col-6 py-2">
                                            <a href="" class="d-flex flex-column btn btn-wrap btn-max btn-left btn-outline-secondary" onclick="@(async () => await ChangeNewUpPartyStateAsync("Identity Provider - Token Exchange", PartyTypes.Saml2, tokenExchange: true))" @onclick:preventDefault>
                                                <h5 class="py-2">Identity Provider - Token Exchange <div class="small">(SAML 2.0)</div></h5>
                                                <div class="py-2 font-italic">E.g., Microsoft Entra ID, AD FS, Google Workspace, Okta, Ping Identity, National IdPs.</div>
                                                <div class="py-2">Exchange SAML 2.0 token issued from Identity Provider to application / API access token.</div>
                                            </a>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card">
                        <div class="card-header" id="headingThree">
                            <h2 class="mb-0">
                                <button class="btn btn-link btn-block text-left collapsed" type="button" data-toggle="collapse" data-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
                                    Connect User Store
                                </button>
                            </h2>
                        </div>
                        <div id="collapseThree" class="collapse" aria-labelledby="headingThree" data-parent="#accordionAuthMethods">
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-6 py-2">
                                        <a href="" class="d-flex flex-column btn btn-wrap btn-max btn-left btn-outline-secondary" onclick="@(async () => await ChangeNewUpPartyStateAsync("External API login", PartyTypes.ExternalLogin))" @onclick:preventDefault>
                                            <h5 class="py-2">External API login</h5>
                                            <div class="py-2">Users can authenticate in a external user store, where FoxIDs call an external API to validate the user.<br />The user interface is customizable.</div>
                                        </a>
                                    </div>
                                    <div class="col-6 py-2">
                                        <a href="" class="d-flex flex-column btn btn-wrap btn-max btn-left btn-outline-secondary" onclick="@(async () => await ChangeNewUpPartyStateAsync("User login UI", PartyTypes.Login))" @onclick:preventDefault>
                                            <h5 class="py-2">User login UI</h5>
                                            <div class="py-2">Users can authenticate with the environment's user store or have the option to choose another authentication method.<br />The user interface is customizable.</div>
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card">
                        <div class="card-header" id="headingFour">
                            <h2 class="mb-0">
                                <button class="btn btn-link btn-block text-left collapsed" type="button" data-toggle="collapse" data-target="#collapseFour" aria-expanded="false" aria-controls="collapseFour">
                                    Connect two Environments
                                </button>
                            </h2>
                        </div>
                        <div id="collapseFour" class="collapse" aria-labelledby="headingFour" data-parent="#accordionAuthMethods">
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-6 py-2">
                                        <a href="" class="d-flex flex-column btn btn-wrap btn-max btn-left btn-outline-secondary" onclick="@(async () => await ChangeNewUpPartyStateAsync("Environment Link", PartyTypes.TrackLink))" @onclick:preventDefault>
                                            <h5 class="py-2">Environment Link</h5>
                                            <div class="py-2">Connect this environment to another FoxIDs environment to reuse functionality and connections.</div>
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            @if (newUpPartyModal.Type == PartyTypes.TrackLink)
            {
                <PageEditForm @ref="newUpPartyModal.EnvironmentLinkForm" TModel="NewUpPartyEnvironmentLinkViewModel" OnValidSubmit="@(async (editContext) => await OnNewUpPartyEnvironmentLinkModalValidSubmitAsync(newUpPartyModal, newUpPartyModal.EnvironmentLinkForm, editContext))">
                    @if (!newUpPartyModal.Created)
                    {
                        <div class="info-text">
                            Add new <DocsLink Page="howto-environmentlink-foxids">Environment Link</DocsLink> to another FoxIDs environment to reuse functionality and connections.
                            <br />
                            An application registration with the same name will be created in the connected environment where authentication method(s) can be selected.
                        </div>

                        <div>
                            <FInputText @bind-Value="newUpPartyModal.EnvironmentLinkForm.Model.DisplayName" For="@(() => newUpPartyModal.EnvironmentLinkForm.Model.DisplayName)" Focus="true" />

                            <ValidationMessage For="@(() => newUpPartyModal.EnvironmentLinkForm.Model.ToDownTrackName)" />
                            @if (@newUpPartyModal.EnvironmentLinkForm.Model.ToDownTrackName.IsNullOrWhiteSpace())
                            {
                                <div class=" form-group active-group active">
                                    <label class="label-control">Select the environment to link to</label>
                                    <div class="card px-3 pt-3">
                                        <PageEditForm @ref="newUpPartyModal.SelectTrackFilterForm" TModel="FilterTrackViewModel" OnValidSubmit="OnSelectTrackFilterValidSubmitAsync">
                                            <div class="form-group active-group pb-2">
                                                <FInputTextFilter @bind-Value="newUpPartyModal.SelectTrackFilterForm.Model.FilterName" For="@(() => newUpPartyModal.SelectTrackFilterForm.Model.FilterName)" IncludeActiveFormGroup="false" />
                                            </div>
                                        </PageEditForm>

                                        @if (newUpPartyModal.SelectTracks != null)
                                        {
                                            @if (newUpPartyModal.SelectTracks.Count() > 0)
                                            {
                                                <div class="list-striped">
                                                    @foreach (var track in newUpPartyModal.SelectTracks)
                                                    {
                                                        @if (newUpPartyModal.SelectTracks.Count() > 1 && Constants.Routes.MasterTenantName.Equals(track.Name, StringComparison.OrdinalIgnoreCase))
                                                        {
                                                            <div class="info-text pl-1 pb-1">
                                                                Your tenant access is configured in the master environment.
                                                            </div>
                                                        }
                                                        <button class="dropdown-item btn btn-link pl-1 pr-1" @onclick="@(() => SelectTrack(track))">
                                                            @if (track.DisplayName.IsNullOrWhiteSpace())
                                                            {
                                                                @track.Name <small class="text-muted">@track.Name.GetProdTrackName()</small>
                                                            }
                                                            else
                                                            {
                                                                @track.DisplayName
                                                            }
                                                        </button>
                                                        <div class="list-striped-item"></div>
                                                    }
                                                </div>
                                            }
                                            else if (!newUpPartyModal.SelectTrackFilterForm.Model.FilterName.IsNullOrWhiteSpace())
                                            {
                                                <div class="font-italic pl-1">No match</div>
                                            }
                                        }
                                    </div>
                                </div>
                            }
                            else
                            {
                                @if (!newUpPartyModal.EnvironmentLinkForm.Model.ToDownTrackDisplayName.IsNullOrWhiteSpace())
                                {
                                    <FFieldText Class="pb-0" @bind-Value="newUpPartyModal.EnvironmentLinkForm.Model.ToDownTrackDisplayName" For="@(() => newUpPartyModal.EnvironmentLinkForm.Model.ToDownTrackDisplayName)" />
                                }
                                else
                                {
                                    <FFieldText Class="pb-0" @bind-Value="newUpPartyModal.EnvironmentLinkForm.Model.ToDownTrackName" For="@(() => newUpPartyModal.EnvironmentLinkForm.Model.ToDownTrackName)" />
                                }
                                <button class="btn btn-link btn-sm pt-0 pb-3" onclick="@(() => ShowSelectTrack(newUpPartyModal.EnvironmentLinkForm.Model))">Link to a different environment</button>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="info-text">
                            The two FoxIDs environments are linked together.
                        </div>

                        <div class="info-text">
                            This authentication method '@newUpPartyModal.EnvironmentLinkForm.Model.DisplayName' can be selected as an allowed authentication method in your application registrations.
                            <br />
                            You can find the application registration '@newUpPartyModal.EnvironmentLinkForm.Model.DisplayName' in the connected environment where authentication method(s) can be selected.
                        </div>
                    }
                    <div class="d-flex modal-footer px-0 pb-0">
                        @if (!newUpPartyModal.Created)
                        {
                            <div class="mr-auto">
                                <button type="button" class="btn btn-link pl-0 @(newUpPartyModal.CreateWorking ? "disabled" : "")" onclick="@(async () => await ChangeNewUpPartyStateAsync())"><i class="bi bi-caret-left bi-right-space"></i>Back</button>
                            </div>
                            <button type="submit" class="btn btn-primary @(newUpPartyModal.CreateWorking ? "disabled" : "")">Create</button>
                            <button type="button" class="btn btn-secondary @(newUpPartyModal.CreateWorking ? "disabled" : "")" @onclick="@(() => newUpPartyModal.Modal.Hide())">Cancel</button>
                        }
                        else
                        {
                            <div class="mr-auto"></div>
                            <button type="button" class="btn btn-secondary" @onclick="@(() => newUpPartyModal.Modal.Hide())">Close</button>
                        }
                    </div>
                </PageEditForm>
            }
            else if (newUpPartyModal.Type == PartyTypes.Saml2 && newUpPartyModal.IdPType == IdPTypes.NemLogin)
            {
                <PageEditForm @ref="newUpPartyModal.NemLoginForm" TModel="NewUpPartyNemLoginViewModel" OnValidSubmit="@(async (editContext) => await OnNewUpPartyNemLoginModalValidSubmitAsync(newUpPartyModal, newUpPartyModal.NemLoginForm, editContext))">
                    @if (!newUpPartyModal.Created)
                    {
                        <div class="info-text">
                            Add new <DocsLink Page="auth-method-howto-saml-2.0-nemlogin">NemLog-in connection</DocsLink> for either test or production.
                            <br />
                            <div class="font-italic pt-2">NemLog-in require different OCES3 certificates in test and production. Therefore, consider whether NemLog-in connections should be configured in dedicated environments.</div>
                        </div>
                        <div>
                            <FInputText @bind-Value="newUpPartyModal.NemLoginForm.Model.DisplayName" For="@(() => newUpPartyModal.NemLoginForm.Model.DisplayName)" Focus="true" />

                            <div class="info-text">
                                Select <strong>public sector service</strong> and create a public IT-system in <DocsLink External="nemlogin-admin">NemLog-in administration</DocsLink> (no transaction cost) if your service is for the public sector. This also applies for a private company.
                                <br />
                                Otherwise, select <strong>private company service</strong> and create a private IT-system in <DocsLink External="nemlogin-admin">NemLog-in administration</DocsLink> (low transaction cost).
                            </div>

                            <FInputSelect @bind-Value="newUpPartyModal.NemLoginForm.Model.ServiceType" For="@(() => newUpPartyModal.NemLoginForm.Model.ServiceType)">
                                <option value="@NemLoginServiceTypes.PublicSector">Public sector service</option>
                                <option value="@NemLoginServiceTypes.Private">Private company service</option>
                            </FInputSelect>

                            <div class="info-text">
                                Each IT-system in NemLog-in holds two configurations, one for <strong>integration test</strong> and one for <strong>production</strong> (two different tabs).
                                First you need to configure the integration test and upload the test rapport, and then it become possible to configure production in <DocsLink External="nemlogin-admin">NemLog-in administration</DocsLink>.
                            </div>

                            <FInputSelect @bind-Value="newUpPartyModal.NemLoginForm.Model.Environment" For="@(() => newUpPartyModal.NemLoginForm.Model.Environment)">
                                <option value="@WizardEnvironments.Test">Integration test</option>
                                <option value="@WizardEnvironments.Production">Production</option>
                            </FInputSelect>

                            @if (newUpPartyModal.NemLoginForm.Model.Environment == WizardEnvironments.Test)
                            {
                                <div class="info-text pb-4">
                                    NemLog-in require a OCES3 test certificate as the <DocsLink Page="certificates">environment certificate</DocsLink>. This wizard will change the environment to use a OCES3 test certificate.
                                </div>
                            }
                            else
                            {
                                <div class="info-text pb-4">
                                    NemLog-in require you to configure a OCES3 certificate as the environment certificate. Create a OCES3 certificate in <DocsLink External="odes3-create">NemLog-in business administration</DocsLink> and change the <DocsLink Page="certificates">environment certificate</DocsLink> to your new OCES3 certificate.
                                    <br />
                                    <div class="font-italic pt-2">With the certificate in place continue the wizard.</div>                                    
                                </div>
                            }

                            @if (newUpPartyModal.NemLoginForm.Model.Environment == WizardEnvironments.Production)
                            {
                                <div class="active-group active py-3">
                                    <label class="label-control">Contact information</label>
                                    <div class="card">
                                        <div class="card-body">
                                            <FInputText @bind-Value="newUpPartyModal.NemLoginForm.Model.Company" For="@(() => newUpPartyModal.NemLoginForm.Model.Company)" />
                                            <FInputText @bind-Value="newUpPartyModal.NemLoginForm.Model.EmailAddress" For="@(() => newUpPartyModal.NemLoginForm.Model.EmailAddress)" />
                                        </div>
                                    </div>
                                </div>
                            }
                            @if (!newUpPartyModal.ShowAdvanced)
                            {
                                <button type="button" class="btn btn-link pt-0 pb-3" @onclick="@(() => newUpPartyModal.ShowAdvanced = true)">Show and edit claims (optional)</button>
                            }
                            else
                            {
                                <div class="info-text">
                                    Select the NemLog-in privileges claim <small class="font-weight-bold">'https://data.gov.dk/model/core/eid/privilegesIntermediate'</small> if you want to grant access based on privileges.
                                </div>
                                <FInputCheckboxSelect Items="newUpPartyModal.NemLoginForm.Model.Claims" SelectedItems="newUpPartyModal.NemLoginForm.Model.SelectedClaims" DisableItems="newUpPartyModal.NemLoginForm.Model.DisabledClaims" NewLine="true" For="@(() => newUpPartyModal.NemLoginForm.Model.Claims)" />
                            }
                        </div>
                    }
                    else
                    {
                        <div class="info-text">
                            Your NemLog-in authentication method has been created.
                        </div>

                        <div class="info-text">
                            @if (newUpPartyModal.NemLoginForm.Model.Environment == WizardEnvironments.Test)
                            {
                                <div>Use the metadata URL to download the metadata file and store it locally.</div>
                            }
                            else
                            {
                                <div>
                                    Save the metadata URL and make sure your OCES3 certificate is in place as the <DocsLink Page="certificates">environment certificate</DocsLink>. Then use the metadata URL to download the metadata file and store it locally.
                                </div>
                            }
                            <div class="pt-2">Upload the metadata file to your NemLog-in IT-system in <DocsLink External="nemlogin-admin">NemLog-in administration</DocsLink>, please see the <DocsLink Page="auth-method-howto-saml-2.0-nemlogin">NemLog-in guide</DocsLink></div>
                        </div>
                        <FFieldTextLinkClipboard @bind-Value="newUpPartyModal.NemLoginForm.Model.Metadata" For="@(() => newUpPartyModal.NemLoginForm.Model.Metadata)" />
                    }
                    <div class="d-flex modal-footer px-0 pb-0">
                        @if (!newUpPartyModal.Created)
                        {
                            <div class="mr-auto">
                                <button type="button" class="btn btn-link pl-0 @(newUpPartyModal.CreateWorking ? "disabled" : "")" onclick="@(async () => await ChangeNewUpPartyStateAsync())"><i class="bi bi-caret-left bi-right-space"></i>Back</button>
                            </div>
                            <button type="submit" class="btn btn-primary @(newUpPartyModal.CreateWorking ? "disabled" : "")">Create</button>
                            <button type="button" class="btn btn-secondary @(newUpPartyModal.CreateWorking ? "disabled" : "")" @onclick="@(() => newUpPartyModal.Modal.Hide())">Cancel</button>
                        }
                        else
                        {
                            <div class="mr-auto"></div>
                            <button type="button" class="btn btn-secondary" @onclick="@(() => newUpPartyModal.Modal.Hide())">Close</button>
                        }
                    </div>
                </PageEditForm>
            }
            else if (newUpPartyModal.Type == PartyTypes.Saml2 && newUpPartyModal.IdPType == IdPTypes.ContextHandler)
            {
                <PageEditForm @ref="newUpPartyModal.ContextHandlerForm" TModel="NewUpPartyContextHandlerViewModel" OnValidSubmit="@(async (editContext) => await OnNewUpPartyContextHandlerModalValidSubmitAsync(newUpPartyModal, newUpPartyModal.ContextHandlerForm, editContext))">
                    @if (!newUpPartyModal.Created)
                    {
                        <div class="info-text">
                            Add new <DocsLink Page="howto-saml-2.0-context-handler">Context Handler connection</DocsLink> for either test or production.
                            <br />
                            <div class="font-italic pt-2">Context Handler require unique OCES3 certificates in both test and production. Therefore, consider whether Context Handler connections should be configured in dedicated environments.</div>
                        </div>
                        <div>
                            <FInputText @bind-Value="newUpPartyModal.ContextHandlerForm.Model.DisplayName" For="@(() => newUpPartyModal.ContextHandlerForm.Model.DisplayName)" Focus="true" />

                            @if (newUpPartyModal.ContextHandlerForm.Model.Environment == WizardEnvironments.Test)
                            {
                                <div class="info-text">
                                    The test IT-system is configured as a user-facing system in <DocsLink External="contexthandler-admin-test">Context Handler test administration</DocsLink>.
                                </div>
                            }
                            else
                            {
                                <div class="info-text">
                                    The IT-system is configured as a user-facing system in <DocsLink External="contexthandler-admin">Context Handler administration</DocsLink>.
                                </div>
                            }

                            <FInputSelect @bind-Value="newUpPartyModal.ContextHandlerForm.Model.Environment" For="@(() => newUpPartyModal.ContextHandlerForm.Model.Environment)">
                                <option value="@WizardEnvironments.Test">Test</option>
                                <option value="@WizardEnvironments.Production">Production</option>
                            </FInputSelect>

                            <div class="info-text pb-4">
                                Context Handler require you to configure an OCES3 certificate as the environment certificate. Create an OCES3 certificate in <DocsLink External="odes3-create">NemLog-in business administration</DocsLink> and change the <DocsLink Page="certificates">environment certificate</DocsLink> to be your new OCES3 certificate.
                                <br />
                                <div class="font-italic pt-2">With the certificate in place continue the wizard.</div>
                            </div>

                            @if (newUpPartyModal.ContextHandlerForm.Model.Environment == WizardEnvironments.Production)
                            {
                                <div class="active-group active py-3">
                                    <label class="label-control">Contact information</label>
                                    <div class="card">
                                        <div class="card-body">
                                            <FInputText @bind-Value="newUpPartyModal.ContextHandlerForm.Model.Company" For="@(() => newUpPartyModal.ContextHandlerForm.Model.Company)" />
                                            @*                           <FInputText @bind-Value="newUpPartyModal.ContextHandlerForm.Model.GivenName" For="@(() => newUpPartyModal.ContextHandlerForm.Model.GivenName)" />
                            <FInputText @bind-Value="newUpPartyModal.ContextHandlerForm.Model.Surname" For="@(() => newUpPartyModal.ContextHandlerForm.Model.Surname)" /> *@
                                            <FInputText @bind-Value="newUpPartyModal.ContextHandlerForm.Model.EmailAddress" For="@(() => newUpPartyModal.ContextHandlerForm.Model.EmailAddress)" />
                                            @*                      <FInputText @bind-Value="newUpPartyModal.ContextHandlerForm.Model.TelephoneNumber" For="@(() => newUpPartyModal.ContextHandlerForm.Model.TelephoneNumber)" /> *@
                                        </div>
                                    </div>
                                </div>
                            }
                            @if (!newUpPartyModal.ShowAdvanced)
                            {
                                <button type="button" class="btn btn-link pt-0 pb-3" @onclick="@(() => newUpPartyModal.ShowAdvanced = true)">Show and edit claims (optional)</button>
                            }
                            else
                            {
                                <FInputCheckboxSelect Items="newUpPartyModal.ContextHandlerForm.Model.Claims" SelectedItems="newUpPartyModal.ContextHandlerForm.Model.SelectedClaims" DisableItems="newUpPartyModal.ContextHandlerForm.Model.DisabledClaims" NewLine="true" For="@(() => newUpPartyModal.ContextHandlerForm.Model.Claims)" />
                            }
                        </div>
                    }
                    else
                    {
                        <div class="info-text">
                            Your Context Handler authentication method has been created.
                        </div>

                        <div class="info-text">
                            <div>
                                Save the metadata URL and make sure your OCES3 certificate is in place as the <DocsLink Page="certificates">environment certificate</DocsLink>.
                            </div>

                            <div class="pt-2">
                                Use the metadata URL to configure your Context Handler user-facing IT-system in
                                @if (newUpPartyModal.ContextHandlerForm.Model.Environment == WizardEnvironments.Test)
                                {
                                    <DocsLink External="ContextHandler-admin-test">Context Handler test administration</DocsLink>
                                }
                                else
                                {
                                    <DocsLink External="ContextHandler-admin">Context Handler administration</DocsLink>
                                }, please see the <DocsLink Page="howto-saml-2.0-context-handler">Context Handler guide</DocsLink>
                            </div>
                        </div>

                        <FFieldTextLinkClipboard @bind-Value="newUpPartyModal.ContextHandlerForm.Model.Metadata" For="@(() => newUpPartyModal.ContextHandlerForm.Model.Metadata)" />
                    }
                    <div class="d-flex modal-footer px-0 pb-0">
                        @if (!newUpPartyModal.Created)
                        {
                            <div class="mr-auto">
                                <button type="button" class="btn btn-link pl-0 @(newUpPartyModal.CreateWorking ? "disabled" : "")" onclick="@(async () => await ChangeNewUpPartyStateAsync())"><i class="bi bi-caret-left bi-right-space"></i>Back</button>
                            </div>
                            <button type="submit" class="btn btn-primary @(newUpPartyModal.CreateWorking ? "disabled" : "")">Create</button>
                            <button type="button" class="btn btn-secondary @(newUpPartyModal.CreateWorking ? "disabled" : "")" @onclick="@(() => newUpPartyModal.Modal.Hide())">Cancel</button>
                        }
                        else
                        {
                            <div class="mr-auto"></div>
                            <button type="button" class="btn btn-secondary" @onclick="@(() => newUpPartyModal.Modal.Hide())">Close</button>
                        }
                    </div>
                </PageEditForm>
            }
            else if (newUpPartyModal.Type != null)
            {
                throw new Exception("New up-party type and selection not supported.");
            }
        </div>
    </Modal>
}

@if (testDownPartyModal != null)
{
    <Modal @ref="testDownPartyModal.Modal" Title="Test Authentication Method">
        <div class="modal-body">
            <FFieldText @bind-Value="testDownPartyModal.DisplayName" For="@(() => testDownPartyModal.DisplayName)" />
            @if (!testDownPartyModal.Error.IsNullOrWhiteSpace())
            {
                <div class="alert alert-danger" role="alert">
                    @testDownPartyModal.Error
                </div>
            }
            <div class="pt-4 text-center">
                <a class="btn btn-primary @(testDownPartyModal.TestUrl.IsNullOrEmpty() ? "disabled" : "")" target="_blank" href="@testDownPartyModal.TestUrl">Start the test</a>
            </div>
            <div class="font-italic text-center">
                The test is lunched in a new browser tab.
            </div>
            <div class="pt-5 text-break">
                <FFieldTextClipboard @bind-Value="testDownPartyModal.TestUrl" For="@(() => testDownPartyModal.TestUrl)" />
            </div>
            @if (testDownPartyModal.TestExpireAt > 0)
            {
                <div class="pt-2 font-italic">
                    The test application is valid until @DateTimeOffset.FromUnixTimeSeconds(testDownPartyModal.TestExpireAt).LocalDateTime.ToShortTimeString().
                </div>
            }
            <div class="d-flex modal-footer px-0 pb-0 mt-4">
                <div class="mr-auto"></div>
                <button type="button" class="btn btn-secondary" @onclick="@(() => testDownPartyModal.Modal.Hide())">Close</button>
            </div>
        </div>
    </Modal>
}
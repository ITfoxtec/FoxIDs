@page "/{tenantName}/authentication"
@inherits PageBase

@* <div class="d-flex">
    <div class="mr-auto info-text">
        Add connections to <DocsLink Page="parties">parties</DocsLink> in the environment and connecting tracks with <DocsLink Page="howto-tracklink-foxids">track links</DocsLink> to compose elements and connections.
        <br />
        | <DocsLink Page="howto-connect">How to connect</DocsLink> | <DocsLink Page="bridge">SAML 2.0 to OpenID Connect bridge</DocsLink>
    </div>
</div> *@

<div class="tab-content">
    <div class="d-flex">
        <div class="mr-auto info-text pt-0">
            Add an Identity Provider as authentication method with <DocsLink Page="up-party-oidc">OpenID Connect</DocsLink> or <DocsLink Page="up-party-saml-2.0">SAML 2.0</DocsLink>.
            <br />
            Configure <DocsLink Page="login">Login and MFA</DocsLink> in the existing login authentication method or optionally add more.
            <br />
            More about: <DocsLink Page="token-exchange" Fragment="token-exchange-by-trust">Token exchange by trust</DocsLink> | <DocsLink Page="howto-tracklink-foxids">Environment link</DocsLink>
        </div>
        <div class="pb-2">
            <div class="btn-group" role="group">
                <button id="btnGroupCreateUpParty" type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    <span class="oi oi-plus" aria-hidden="true"></span> New method
                </button>
                <div class="dropdown-menu dropdown-menu-right" aria-labelledby="btnGroupCreateUpParty">
                    <button class="dropdown-item btn btn-link" type="button" @onclick="@(() => ShowCreateUpParty(PartyTypes.Login))">Login</button>
                    <button class="dropdown-item btn btn-link" type="button" @onclick="@(() => ShowCreateUpParty(PartyTypes.Oidc))">OpenID Connect</button>
                    <button class="dropdown-item btn btn-link" type="button" @onclick="@(() => ShowCreateUpParty(PartyTypes.OAuth2))">OAuth 2.0 - Token Exchange</button>
                    <button class="dropdown-item btn btn-link" type="button" @onclick="@(() => ShowCreateUpParty(PartyTypes.Saml2))">SAML 2.0</button>
                    <div class="dropdown-divider"></div>
                    <button class="dropdown-item btn btn-link" type="button" @onclick="@(() => ShowCreateUpParty(PartyTypes.TrackLink))">Track link</button>
                </div>
            </div>
        </div>
    </div>
    <PageEditForm @ref="upPartyFilterForm" TModel="FilterUpPartyViewModel" OnValidSubmit="OnUpPartyFilterValidSubmitAsync">
        <FInputTextFilter @bind-Value="upPartyFilterForm.Model.FilterName" For="@(() => upPartyFilterForm.Model.FilterName)" />
    </PageEditForm>

    <ul class="list-group">
        @foreach (var upParty in upParties)
        {
            <li class="list-group-item @(upParty.Edit ? "active" : string.Empty)">
                @if (!upParty.Error.IsNullOrWhiteSpace())
                {
                    <div class="alert alert-danger" role="alert">
                        @upParty.Error
                    </div>
                }
                @if (upParty.Edit)
                {
                    if (upParty.Type == PartyTypes.Login)
                    {
                        <ELoginUpParty OnStateHasChanged="OnStateHasChangedAsync" UpParties="upParties" UpParty="upParty" TenantName="@TenantName" />
                    }
                    else if (upParty.Type == PartyTypes.OAuth2)
                    {
                        <EOAuthUpParty OnStateHasChanged="OnStateHasChangedAsync" UpParties="upParties" UpParty="upParty" TenantName="@TenantName" />
                    }
                    else if (upParty.Type == PartyTypes.Oidc)
                    {
                        <EOidcUpParty OnStateHasChanged="OnStateHasChangedAsync" UpParties="upParties" UpParty="upParty" TenantName="@TenantName" />
                    }
                    else if (upParty.Type == PartyTypes.Saml2)
                    {
                        <ESamlUpParty OnStateHasChanged="OnStateHasChangedAsync" UpParties="upParties" UpParty="upParty" TenantName="@TenantName" />
                    }
                    else if (upParty.Type == PartyTypes.TrackLink)
                    {
                        <ETrackLinkUpParty OnStateHasChanged="OnStateHasChangedAsync" UpParties="upParties" UpParty="upParty" TenantName="@TenantName" />
                    }
                }
                else
                {
                    <button class="btn btn-link" @onclick="@(() => ShowUpdateUpParty(upParty))">
                        @UpPartyInfoText(upParty)
                    </button>
                }
            </li>
        }
    </ul>
</div>
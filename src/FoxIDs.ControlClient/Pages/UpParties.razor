@page "/{tenantName}/upparties"
@inherits PageBase

<div class="d-flex">
    <div class="mr-auto p-2">
    </div>
    <div class="p-2">
        <div class="btn-group" role="group">
            <button id="btnGroupCreateUpParty" type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <span class="oi oi-plus" aria-hidden="true"></span> Create up-party
            </button>
            <div class="dropdown-menu" aria-labelledby="btnGroupCreateUpParty">
                <button class="dropdown-item btn btn-link" type="button" @onclick="@(() => ShowCreateUpParty(PartyTypes.Login))">Login</button>
                <button class="dropdown-item btn btn-link" type="button" @onclick="@(() => ShowCreateUpParty(PartyTypes.Oidc))">OpenID Connect</button>
                <button class="dropdown-item btn btn-link" type="button" @onclick="@(() => ShowCreateUpParty(PartyTypes.OAuth2))">OAuth 2.0 - Token Exchange</button>
                <button class="dropdown-item btn btn-link" type="button" @onclick="@(() => ShowCreateUpParty(PartyTypes.Saml2))">SAML 2.0</button>
                <div class="dropdown-divider"></div>
                <button class="dropdown-item btn btn-link" type="button" @onclick="@(() => ShowCreateUpParty(PartyTypes.TrackLink))">Track link</button>
            </div>
        </div>
    </div>
</div>

<ul class="nav nav-tabs">
    <li class="nav-item">
        <a class="nav-link" href="@downPartyHref">Down-parties</a>
    </li>
    <li class="nav-item">
        <a class="nav-link active">Up-parties</a>
    </li>
</ul>

<div class="tab-content">
    <PageEditForm @ref="upPartyFilterForm" TModel="FilterPartyViewModel" OnValidSubmit="OnUpPartyFilterValidSubmitAsync">
        <FInputTextFilter @bind-Value="upPartyFilterForm.Model.FilterName" For="@(() => upPartyFilterForm.Model.FilterName)" />
    </PageEditForm>

    <ul class="list-group">
        @foreach (var upParty in upParties)
        {
            <li class="list-group-item @(upParty.Edit ? "active" : string.Empty)">
                @if (!upParty.Error.IsNullOrWhiteSpace())
                {
                    <div class="alert alert-danger" role="alert">
                        @upParty.Error
                    </div>
                }
                @if (upParty.Edit)
                {
                    if (upParty.Type == PartyTypes.Login)
                    {
                        <ELoginUpParty OnStateHasChanged="OnStateHasChangedAsync" UpParties="upParties" UpParty="upParty" TenantName="@TenantName" />
                    }
                    else if (upParty.Type == PartyTypes.OAuth2)
                    {
                        <EOAuthUpParty OnStateHasChanged="OnStateHasChangedAsync" UpParties="upParties" UpParty="upParty" TenantName="@TenantName" />
                    }
                    else if (upParty.Type == PartyTypes.Oidc)
                    {
                        <EOidcUpParty OnStateHasChanged="OnStateHasChangedAsync" UpParties="upParties" UpParty="upParty" TenantName="@TenantName" />
                    }
                    else if (upParty.Type == PartyTypes.Saml2)
                    {
                        <ESamlUpParty OnStateHasChanged="OnStateHasChangedAsync" UpParties="upParties" UpParty="upParty" TenantName="@TenantName" />
                    }
                    else if (upParty.Type == PartyTypes.TrackLink)
                    {
                        <ETrackLinkUpParty OnStateHasChanged="OnStateHasChangedAsync" UpParties="upParties" UpParty="upParty" TenantName="@TenantName" />
                    }
                }
                else
                {
                    <button class="btn btn-link" @onclick="@(() => ShowUpdateUpParty(upParty))">
                        @UpPartyInfoText(upParty)
                    </button>
                }
            </li>
        }
    </ul>
</div>
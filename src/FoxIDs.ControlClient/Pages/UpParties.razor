@page "/{tenantName}/upparties"
@inherits PageBase

<div class="d-flex">
    <div class="mr-auto p-2">
        <h3>Parties</h3>
    </div>
    <div class="p-2">
        <div class="btn-group" role="group">
            <button id="btnGroupCreateUpParty" type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <span class="oi oi-plus" aria-hidden="true"></span> Create Up Party
            </button>
            <div class="dropdown-menu" aria-labelledby="btnGroupCreateUpParty">
                <button class="dropdown-item btn btn-link" @onclick="@(() => ShowCreateUpParty(PartyTypes.Login))">Login</button>
                @*<button class="dropdown-item btn btn-link" @onclick="@(() => ShowCreateUpParty(PartyTypes.Oidc))">OpenID Connect</button>*@
                <button class="dropdown-item btn btn-link" @onclick="@(() => ShowCreateUpParty(PartyTypes.Saml2))">Saml 2.0</button>
            </div>
        </div>
    </div>
</div>

<ul class="nav nav-tabs">
    <li class="nav-item">
        <a class="nav-link" href="@downPartyHref">Down Parties</a>
    </li>
    <li class="nav-item">
        <a class="nav-link active">Up Parties</a>
    </li>
</ul>

<div class="tab-content">
    <PageEditForm @ref="upPartyFilterForm" TModel="FilterPartyViewModel" OnValidSubmit="OnUpPartyFilterValidSubmitAsync">
        <FInputTextFilter @bind-Value="upPartyFilterForm.Model.FilterName" For="@(() => upPartyFilterForm.Model.FilterName)" />
    </PageEditForm>

    <ul class="list-group">
        @foreach (var upParty in upParties)
        {
            <li class="list-group-item @(upParty.Edit ? "active" : string.Empty)">
                @if (!upParty.Error.IsNullOrWhiteSpace())
                {
                    <div class="alert alert-danger" role="alert">
                        @upParty.Error
                    </div>
                }
                @if (upParty.Edit)
                {
                    if (upParty.Type == PartyTypes.Login)
                    {
                        var loginUpParty = upParty as GeneralLoginUpPartyViewModel;
                        <PageEditForm @ref="loginUpParty.Form" TModel="LoginUpPartyViewModel" OnValidSubmit="@(async (editContext) => await OnEditLoginUpPartyValidSubmitAsync(loginUpParty, editContext))">
                            <div class="modal-header">
                                Login
                                <button type="button" class="btn btn-link btn-xs" @onclick="@(() => loginUpParty.ShowAdvanced = !loginUpParty.ShowAdvanced)">@(loginUpParty.ShowAdvanced ? "Hide" : "Show") advanced settings</button>
                            </div>
                            <div class="modal-body">
                                @if (loginUpParty.CreateMode)
                                {
                                    <div class="mb-3 alert alert-info" role="alert">
                                        For every Login Up Party a separate user repository is created. User login sessions is also connected to a Login Up Party.
                                    </div>
                                }
                                <FInputText @bind-Value="loginUpParty.Form.Model.Name" For="@(() => loginUpParty.Form.Model.Name)" Focus="true" />
                                <FInputToggle @bind-Value="loginUpParty.Form.Model.EnableCancelLogin" For="@(() => loginUpParty.Form.Model.EnableCancelLogin)" TextType="e.d" />
                                <FInputToggle @bind-Value="loginUpParty.Form.Model.EnableCreateUser" For="@(() => loginUpParty.Form.Model.EnableCreateUser)" TextType="e.d" />
                                <FInputSelect @bind-Value="loginUpParty.Form.Model.LogoutConsent" For="@(() => loginUpParty.Form.Model.LogoutConsent)">
                                    <option value="@LoginUpPartyLogoutConsent.IfRequered">If requered</option>
                                    <option value="@LoginUpPartyLogoutConsent.Always">Always</option>
                                    <option value="@LoginUpPartyLogoutConsent.Never">Never</option>
                                </FInputSelect>
                                <FInputNumber @bind-Value="loginUpParty.Form.Model.SessionLifetime" For="@(() => loginUpParty.Form.Model.SessionLifetime)" />
                                @if (loginUpParty.ShowAdvanced)
                                {
                                    <FInputNumber @bind-Value="loginUpParty.Form.Model.SessionAbsoluteLifetime" For="@(() => loginUpParty.Form.Model.SessionAbsoluteLifetime)" />
                                    <FInputNumber @bind-Value="loginUpParty.Form.Model.PersistentSessionAbsoluteLifetime" For="@(() => loginUpParty.Form.Model.PersistentSessionAbsoluteLifetime)" />
                                    <FInputToggle @bind-Value="loginUpParty.Form.Model.PersistentSessionLifetimeUnlimited" For="@(() => loginUpParty.Form.Model.PersistentSessionLifetimeUnlimited)" />
                                    <FInputTextArea @bind-Value="loginUpParty.Form.Model.CssStyle" For="@(() => loginUpParty.Form.Model.CssStyle)" />
                                }
                            </div>
                            @if (!loginUpParty.CreateMode && loginUpParty.DeleteAcknowledge)
                            {
                                <div class="modal-footer">
                                    <div class="alert alert-danger" role="alert">
                                        <div>
                                            You are about to delete Login Up Party "@upParty.Name", are you sure?
                                        </div>

                                        <div class="mt-3">
                                            <button type="button" class="btn btn-secondary" @onclick="@(async () => await DeleteLoginUpPartyAsync(loginUpParty))">Yes delete</button>
                                            <button type="button" class="btn btn-secondary" @onclick="@(() => loginUpParty.DeleteAcknowledge = false)">No</button>
                                        </div>
                                    </div>
                                </div>
                            }
                            <div class="modal-footer">
                                <button type="button" class="btn btn-link btn-xs" @onclick="@(() => loginUpParty.ShowAdvanced = !loginUpParty.ShowAdvanced)">@(loginUpParty.ShowAdvanced ? "Hide" : "Show") advanced settings</button>
                                @if (!loginUpParty.CreateMode)
                                {
                                    <button type="button" class="btn btn-link" @onclick="@(() => loginUpParty.DeleteAcknowledge = true)">Delete</button>
                                }
                                <button type="submit" class="btn btn-primary">@(@loginUpParty.CreateMode ? "Create" : "Update")</button>
                                <button type="button" class="btn btn-secondary" @onclick="@(() => UpPartyCancel(upParty))">Cancel</button>
                            </div>
                        </PageEditForm>
                    }
                    //else if (upParty.Type == PartyTypes.Oidc)
                    //{
                    //}
                    else if (upParty.Type == PartyTypes.Saml2)
                    {
                        var samlUpParty = upParty as GeneralSamlUpPartyViewModel;
                        <PageEditForm @ref="samlUpParty.Form" TModel="SamlUpPartyViewModel" OnValidSubmit="@(async (editContext) => await OnEditSamlUpPartyValidSubmitAsync(samlUpParty, editContext))">
                            <div class="modal-header">
                                SAML 2.0
                                <button type="button" class="btn btn-link btn-xs" @onclick="@(() => samlUpParty.ShowAdvanced = !samlUpParty.ShowAdvanced)">@(samlUpParty.ShowAdvanced ? "Hide" : "Show") advanced settings</button>
                            </div>
                            <div class="modal-body">
                                <FInputText @bind-Value="samlUpParty.Form.Model.Name" For="@(() => samlUpParty.Form.Model.Name)" Focus="true" />
                                <FInputText @bind-Value="samlUpParty.Form.Model.Issuer" For="@(() => samlUpParty.Form.Model.Issuer)" />
                                <div class="form-group active-group active">
                                    <div class="drag-drop-zone input-control">
                                        <InputFile multiple OnChange="@(async (files) => await OnSamlUpPartyCertificateFileSelectedAsync(samlUpParty, files))" />
                                        @samlUpParty.CertificateFileStatus
                                    </div>
                                    <Label For="@(() => samlUpParty.Form.Model.Keys)" class="label-control" />
                                    <ValidationMessage For="@(() => samlUpParty.Form.Model.Keys)" />
                                    <ul class="list-group">
                                        @foreach (var certificateInfo in samlUpParty.CertificateInfoList)
                                        {
                                            <li class="list-group-item p-0">
                                                <div class="d-flex">
                                                    <div class="mr-auto p-2">
                                                        <strong>@certificateInfo.Subject</strong><br />                                                        
                                                        <span class="@(certificateInfo.IsValid ? "" : "text-danger")" >Valid from @certificateInfo.ValidFrom.ToShortDateString() to @certificateInfo.ValidTo.ToShortDateString()</span><br />
                                                        Thumbprint: @certificateInfo.Thumbprint
                                                    </div>
                                                    <div class="p-2">
                                                        <button type="button" class="btn btn-link p-0" title="Remove" @onclick="@(() => RemoveSamlUpPartyCertificate(samlUpParty, certificateInfo))"><span class="oi oi-delete" aria-hidden="true"></span></button>
                                                    </div>
                                                </div>
                                            </li>
                                        }
                                    </ul>
                                </div>
                                <FInputText @bind-Value="samlUpParty.Form.Model.AuthnUrl" For="@(() => samlUpParty.Form.Model.AuthnUrl)" />
                                <div class="row active-group-outline">
                                    <div class="col">
                                        <div class="form-group active-group">
                                            <FInputSelect @bind-Value="samlUpParty.Form.Model.AuthnRequestBinding" For="@(() => samlUpParty.Form.Model.AuthnRequestBinding)" IncludeActiveFormGroup="false">
                                                <option value="@SamlBindingTypes.Redirect">@SamlBindingTypes.Redirect</option>
                                                <option value="@SamlBindingTypes.Post">@SamlBindingTypes.Post</option>
                                            </FInputSelect>
                                        </div>
                                    </div>
                                    <div class="col">
                                        <div class="form-group active-group">
                                            <FInputSelect @bind-Value="samlUpParty.Form.Model.AuthnResponseBinding" For="@(() => samlUpParty.Form.Model.AuthnResponseBinding)" IncludeActiveFormGroup="false">
                                                <option value="@SamlBindingTypes.Redirect">@SamlBindingTypes.Redirect</option>
                                                <option value="@SamlBindingTypes.Post">@SamlBindingTypes.Post</option>
                                            </FInputSelect>
                                        </div>
                                    </div>
                                </div>
                                <FInputText @bind-Value="samlUpParty.Form.Model.LogoutUrl" For="@(() => samlUpParty.Form.Model.LogoutUrl)" />
                                <div class="row active-group-outline">
                                    <div class="col">
                                        <div class="form-group active-group">
                                            <FInputSelect @bind-Value="samlUpParty.Form.Model.LogoutRequestBinding" For="@(() => samlUpParty.Form.Model.LogoutRequestBinding)" IncludeActiveFormGroup="false">
                                                <option value="@SamlBindingTypes.Redirect">@SamlBindingTypes.Redirect</option>
                                                <option value="@SamlBindingTypes.Post">@SamlBindingTypes.Post</option>
                                            </FInputSelect>
                                        </div>
                                    </div>
                                    <div class="col">
                                        <div class="form-group active-group">
                                            <FInputSelect @bind-Value="samlUpParty.Form.Model.LogoutResponseBinding" For="@(() => samlUpParty.Form.Model.LogoutResponseBinding)" IncludeActiveFormGroup="false">
                                                <option value="@SamlBindingTypes.Redirect">@SamlBindingTypes.Redirect</option>
                                                <option value="@SamlBindingTypes.Post">@SamlBindingTypes.Post</option>
                                            </FInputSelect>
                                        </div>
                                    </div>
                                </div>
                                @if (samlUpParty.ShowAdvanced)
                                {
                                    <FInputSelect @bind-Value="samlUpParty.Form.Model.SignatureAlgorithm" For="@(() => samlUpParty.Form.Model.SignatureAlgorithm)">
                                        <option value="@Saml2SecurityAlgorithms.RsaSha1Signature">RSA-SHA-1</option>
                                        <option value="@Saml2SecurityAlgorithms.RsaSha256Signature">RSA-SHA-256</option>
                                        <option value="@Saml2SecurityAlgorithms.RsaSha384Signature">RSA-SHA-384</option>
                                        <option value="@Saml2SecurityAlgorithms.RsaSha512Signature">RSA-SHA-512</option>
                                    </FInputSelect>
                                    <FInputSelect @bind-Value="samlUpParty.Form.Model.CertificateValidationMode" For="@(() => samlUpParty.Form.Model.CertificateValidationMode)">
                                        <option value="@X509CertificateValidationMode.None">None</option>
                                        <option value="@X509CertificateValidationMode.ChainTrust">Chain trust</option>
                                        <option value="@X509CertificateValidationMode.PeerTrust">Peer trust</option>
                                        <option value="@X509CertificateValidationMode.PeerOrChainTrust">Peer or chain trust</option>
                                    </FInputSelect>
                                    <FInputSelect @bind-Value="samlUpParty.Form.Model.RevocationMode" For="@(() => samlUpParty.Form.Model.RevocationMode)">
                                        <option value="@X509RevocationMode.NoCheck">No check</option>
                                        <option value="@X509RevocationMode.Offline">Offline</option>
                                        <option value="@X509RevocationMode.Online">Online</option>
                                    </FInputSelect>
                                    <FInputText @bind-Value="samlUpParty.Form.Model.IdSIssuer" For="@(() => samlUpParty.Form.Model.IdSIssuer)" />
                                    <FInputNumber @bind-Value="samlUpParty.Form.Model.MetadataLifetime" For="@(() => samlUpParty.Form.Model.MetadataLifetime)" />
                                }
                            </div>
                            @if (!upParty.CreateMode && upParty.DeleteAcknowledge)
                            {
                                <div class="modal-footer">
                                    <div class="alert alert-danger" role="alert">
                                        <div>
                                            You are about to delete SAML 2.0 Up Party "@upParty.Name", are you sure?
                                        </div>

                                        <div class="mt-3">
                                            <button type="button" class="btn btn-secondary" @onclick="@(async () => await DeleteSamlUpPartyAsync(samlUpParty))">Yes delete</button>
                                            <button type="button" class="btn btn-secondary" @onclick="@(() => upParty.DeleteAcknowledge = false)">No</button>
                                        </div>
                                    </div>
                                </div>
                            }
                            <div class="modal-footer">
                                <button type="button" class="btn btn-link btn-xs" @onclick="@(() => samlUpParty.ShowAdvanced = !samlUpParty.ShowAdvanced)">@(samlUpParty.ShowAdvanced ? "Hide" : "Show") advanced settings</button>
                                @if (!upParty.CreateMode)
                                {
                                    <button type="button" class="btn btn-link" @onclick="@(() => upParty.DeleteAcknowledge = true)">Delete</button>
                                }
                                <button type="submit" class="btn btn-primary">@(@upParty.CreateMode ? "Create" : "Update")</button>
                                <button type="button" class="btn btn-secondary" @onclick="@(() => UpPartyCancel(upParty))">Cancel</button>
                            </div>
                        </PageEditForm>
                    }
                }
                else
                {
                    <button class="btn btn-link" @onclick="@(async () => await ShowUpdateUpPartyAsync(upParty))">
                        @UpPartyInfoText(upParty)
                    </button>
                }
            </li>
        }
    </ul>
</div>
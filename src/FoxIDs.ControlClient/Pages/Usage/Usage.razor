@page "/{tenantName}/usage"
@inherits PageBase

<ul class="nav nav-tabs">
    <li class="nav-item">
        <a class="nav-link active">Usage</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" href="@usageTenantsHref">Usage tenants</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" href="@usageSettingsHref">Usage settings</a>
    </li>
</ul>

<div class="tab-content">
    <div class="d-flex pt-2">
        <div class="info-text mr-auto">
            Add usage for a tenant in a month and register time spend and other tasks.
        </div>
        <div class="py-2">
            <button type="button" class="btn btn-primary" @onclick="@(() => ShowCreateUsage())">
                <span class="oi oi-plus" aria-hidden="true"></span> Create Usage
            </button>
        </div>
    </div>

    <PageEditForm @ref="searchUsageForm" TModel="FilterUsageViewModel" OnAfterInit="OnUsageFilterAfterInit" OnValidSubmit="OnUsageFilterValidSubmitAsync">
        <div class="row">
            <div class="col-6">
                <FInputNumber @bind-Value="searchUsageForm.Model.PeriodYear" For="@(() => searchUsageForm.Model.PeriodYear)" />
            </div>
            <div class="col-6">
                <FInputNumber @bind-Value="searchUsageForm.Model.PeriodMonth" For="@(() => searchUsageForm.Model.PeriodMonth)" />
            </div>
        </div>
        <FInputTextFilter @bind-Value="searchUsageForm.Model.FilterTenantValue" For="@(() => searchUsageForm.Model.FilterTenantValue)" />
    </PageEditForm>


    <ul class="list-group">
        @foreach (var used in usedList)
        {
            <li class="list-group-item @(used.Edit ? "active" : "d-flex justify-content-between align-items-center")">
                @if (!used.Error.IsNullOrWhiteSpace())
                {
                    <div class="alert alert-danger" role="alert">
                        @used.Error
                    </div>
                }
                @if (used.Edit)
                {
                    <PageEditForm @ref="used.Form" TModel="UsedViewModel" OnAfterInit="@(m => UsedViewModelAfterInit(used, m))" OnValidSubmit="@(async (editContext) => await OnEditUsedValidSubmitAsync(used, editContext))">
                        <div class="modal-header">
                            User
                        </div>
                        <div class="modal-body">
                            @if (used.CreateMode)
                            {
                                <div class="row">
                                    <div class="col-6">
                                        <FInputNumber @bind-Value="used.Form.Model.PeriodYear" For="@(() => used.Form.Model.PeriodYear)" />
                                    </div>
                                    <div class="col-6">
                                        <FInputNumber @bind-Value="used.Form.Model.PeriodMonth" For="@(() => used.Form.Model.PeriodMonth)" />
                                    </div>
                                </div>
                                <FInputText @bind-Value="used.Form.Model.TenantName" For="@(() => used.Form.Model.TenantName)" Focus="true" />
                            }
                            else
                            {
                                <FFieldText @bind-Value="used.Form.Model.TenantName" For="@(() => used.Form.Model.TenantName)" />
                            }

                            <div class="form-group active-group active">
                                <div class="info-text mr-auto">
                                    Add items and register time spend.
                                </div>
                                <ul class="list-group">
                                    @foreach (var item in used.Form.Model.Items)
                                    {
                                        <li class="list-group-item">
                                            <div class="row">
                                                <div class="col-11">
                                                    @if (item.Type == UsedItemTypes.Hours)
                                                    {
                                                        <div class="row">
                                                            <div class="col-2">
                                                                <FInputNumberN @bind-Value="item.Day" For="@(() => item.Day)" />
                                                            </div>
                                                            <div class="col-6">
                                                                <FInputText @bind-Value="item.Text" For="@(() => item.Text)" />
                                                            </div>
                                                            <div class="col-2">
                                                                <FInputNumberDN @bind-Value="item.Quantity" For="@(() => item.Quantity)" />
                                                            </div>
                                                            <div class="col-2">
                                                                <FInputNumberD @bind-Value="item.UnitPrice" For="@(() => item.UnitPrice)" />
                                                            </div>
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <div class="row">
                                                            <div class="col-10">
                                                                <FInputText @bind-Value="item.Text" For="@(() => item.Text)" />
                                                            </div>
                                                            <div class="col-2">
                                                                <FInputNumberD @bind-Value="item.UnitPrice" For="@(() => item.UnitPrice)" />
                                                            </div>
                                                        </div>
                                                    }
                                                </div>
                                                <div class="col-1 text-right">
                                                    <button type="button" class="btn btn-link px-0" title="Remove" @onclick="@(e => RemoveItem(e, used.Form.Model.Items, item))"><span class="oi oi-circle-x" aria-hidden="true"></span></button>
                                                </div>
                                            </div>
                                        </li>
                                    }
                                </ul>
                                <ValidationMessage For="@(() => used.Form.Model.Items)" />
                                <button type="button" class="btn btn-link btn-xs" @onclick="@(e => AddItem(e, used.Form.Model.Items, UsedItemTypes.Text))"><span class="oi oi-plus" aria-hidden="true"></span> Add Text item</button>
                                <button type="button" class="btn btn-link btn-xs" @onclick="@(e => AddItem(e, used.Form.Model.Items, UsedItemTypes.Hours))"><span class="oi oi-plus" aria-hidden="true"></span> Add Hours</button>
                            </div>
                        </div>
                        <div class="modal-footer">
                            @if (ShowSendInvoiceAgainButton(used))
                            {
                                @if (!used.InvoicingActionButtonDisabled)
                                {
                                    <button type="button" class="btn btn-outline-dark" @onclick="@(async () => await SendInvoiceAgainAsync(used))">
                                        Send invoice again
                                    </button>
                                }
                                else
                                {
                                    <button type="button" class="btn btn-outline-dark" disabled="disabled">
                                        Send invoice again
                                    </button>
                                }
                            }
                            @if (ShowDoCreditNoteButton(used))
                            {
                                @if (!used.InvoicingActionButtonDisabled)
                                {
                                    <button type="button" class="btn btn-outline-dark mr-2" @onclick="@(async () => await DoCreditNoteAsync(used))">
                                        Do credit note
                                    </button>
                                }
                                else
                                {
                                    <button type="button" class="btn btn-outline-dark mr-2" disabled="disabled">
                                        Do credit note
                                    </button>
                                }
                            }
                            @if (ShowSendCreditNoteAgainButton(used))
                            {
                                @if (!used.InvoicingActionButtonDisabled)
                                {
                                    <button type="button" class="btn btn-outline-dark mr-2" @onclick="@(async () => await SendCreditNoteAgainAsync(used))">
                                        Send credit note again
                                    </button>
                                }
                                else
                                {
                                    <button type="button" class="btn btn-outline-dark mr-2" disabled="disabled">
                                        Send credit note again
                                    </button>
                                }
                            }
                            @if (ShowDoPaymentButton(used))
                            {
                                @if (!used.InvoicingActionButtonDisabled)
                                {
                                    <button type="button" class="btn btn-outline-dark" @onclick="@(async () => await DoPaymentAgainAsync(used))">
                                        Do payment again
                                    </button>
                                }
                                else
                                {
                                    <button type="button" class="btn btn-outline-dark" disabled="disabled">
                                        Do payment again
                                    </button>
                                }
                            }
                            <button type="submit" class="btn btn-primary">@(used.CreateMode ? "Create" : "Update")</button>
                            <button type="button" class="btn btn-secondary" @onclick="@(() => UsedCancel(used))">@(@used.CreateMode ? "Cancel" : "Close")</button>
                        </div>
                    </PageEditForm>
                }
                else
                {
                    <button class="btn btn-link mr-auto" @onclick="@(async () => await ShowUpdateUsageAsync(used))">
                        @UsageInfoText(used)
                    </button>
                    @if (ShowSendInvoiceAgainButton(used))
                    {
                        @if (!used.InvoicingActionButtonDisabled)
                        {
                            <button type="button" class="btn btn-sm btn-outline-dark" @onclick="@(async () => await SendInvoiceAgainAsync(used))">
                                Send invoice again
                            </button>
                        }
                        else
                        {
                            <button type="button" class="btn btn-sm btn-outline-dark" disabled="disabled">
                                Send invoice again
                            </button>
                        }
                    }
                    @if (ShowDoCreditNoteButton(used))
                    {
                        @if (!used.InvoicingActionButtonDisabled)
                        {
                            <button type="button" class="btn btn-sm btn-outline-dark mr-2" @onclick="@(async () => await DoCreditNoteAsync(used))">
                                Do credit note
                            </button>
                        }
                        else
                        {
                            <button type="button" class="btn btn-sm btn-outline-dark mr-2" disabled="disabled">
                                Do credit note
                            </button>
                        }
                    }
                    @if (ShowSendCreditNoteAgainButton(used))
                    {
                        @if (!used.InvoicingActionButtonDisabled)
                        {
                            <button type="button" class="btn btn-sm btn-outline-dark mr-2" @onclick="@(async () => await SendCreditNoteAgainAsync(used))">
                                Send credit note again
                            </button>
                        }
                        else
                        {
                            <button type="button" class="btn btn-sm btn-outline-dark mr-2" disabled="disabled">
                                Send credit note again
                            </button>
                        }
                    }
                    @if (ShowDoPaymentButton(used))
                    {
                        @if (!used.InvoicingActionButtonDisabled)
                        {
                            <button type="button" class="btn btn-sm btn-outline-dark" @onclick="@(async () => await DoPaymentAgainAsync(used))">
                                Do payment again
                            </button>
                        }
                        else
                        {
                            <button type="button" class="btn btn-sm btn-outline-dark" disabled="disabled">
                                Do payment again
                            </button>
                        }
                    }
                }
            </li>
        }
    </ul>
</div>
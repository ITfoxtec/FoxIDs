@page "/{tenantName}/users"
@inherits PageBase

<ul class="nav nav-tabs">
    <li class="nav-item">
        <a class="nav-link active">Users</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" href="@externalUsersHref">External Users</a>
    </li>
</ul>

<div class="d-flex pt-2">
    <div class="info-text mr-auto">
        The user store in the environment where you can add more <DocsLink Page="users">users</DocsLink>.
        <br />
        More about: <DocsLink Page="login">Login and MFA</DocsLink>
    </div>
    <div class="py-2">
        <button type="button" class="btn btn-primary" @onclick="@(() => ShowCreateUser())">
            <span class="oi oi-plus" aria-hidden="true"></span> Create User
        </button>
    </div>
</div>

<PageEditForm @ref="userFilterForm" TModel="FilterUserViewModel" OnValidSubmit="OnUserFilterValidSubmitAsync">
    <FInputTextFilter @bind-Value="userFilterForm.Model.FilterEmail" For="@(() => userFilterForm.Model.FilterEmail)" />
</PageEditForm>

<ul class="list-group">
    @foreach (var user in users)
    {
        <li class="list-group-item @(user.Edit ? "active" : string.Empty)">
            @if (!user.Error.IsNullOrWhiteSpace())
            {
                <div class="alert alert-danger" role="alert">
                    @user.Error
                </div>
            }
            @if (user.Edit)
            {
                <PageEditForm @ref="user.Form" TModel="UserViewModel" OnAfterInit="@(m => UserViewModelAfterInit(user, m))" OnValidSubmit="@(async (editContext) => await OnEditUserValidSubmitAsync(user, editContext))">
                    <div class="modal-header">
                        User
                    </div>
                    <div class="modal-body">
                        @if (user.CreateMode)
                        {
                            <FInputText @bind-Value="user.Form.Model.Email" For="@(() => user.Form.Model.Email)" Focus="true" />
                            <FInputPassword @bind-Value="user.Form.Model.Password" For="@(() => user.Form.Model.Password)" />
                        }
                        else
                        {
                            <FFieldText @bind-Value="user.Form.Model.Email" For="@(() => user.Form.Model.Email)" />
                            <input type="hidden" @bind="user.Form.Model.Email" />
                            <FFieldText @bind-Value="user.Form.Model.Password" For="@(() => user.Form.Model.Password)" />
                            <input type="hidden" @bind="user.Form.Model.Password" />
                            <FFieldText @bind-Value="user.Form.Model.UserId" For="@(() => user.Form.Model.UserId)" />
                        }
                        <FInputToggle @bind-Value="user.Form.Model.ConfirmAccount" For="@(() => user.Form.Model.ConfirmAccount)" TextType="y.n" />
                        <FInputToggle @bind-Value="user.Form.Model.EmailVerified" For="@(() => user.Form.Model.EmailVerified)" TextType="y.n" />
                        <FInputToggle @bind-Value="user.Form.Model.ChangePassword" For="@(() => user.Form.Model.ChangePassword)" TextType="y.n" />
                        <FInputToggle @bind-Value="user.Form.Model.DisableAccount" For="@(() => user.Form.Model.DisableAccount)" Negation="true" TextType="e.d" />
                        <div class="info-text">The user must verify the account as part of multi-factor.</div>
                        <FInputToggle @bind-Value="user.Form.Model.ActiveTwoFactorApp" For="@(() => user.Form.Model.ActiveTwoFactorApp)" TextType="y.n" />
                        <FInputToggle @bind-Value="user.Form.Model.RequireMultiFactor" For="@(() => user.Form.Model.RequireMultiFactor)" TextType="y.n" />

                        <div class="form-group active-group active">
                            <Label For="@(() => user.Form.Model.Claims)" class="label-control" />
                            <ul class="list-group">
                                @foreach (var claimAndValues in user.Form.Model.Claims)
                                {
                                    <li class="list-group-item">
                                        <div class="row">
                                            <div class="col-11">
                                                <FInputText @bind-Value="claimAndValues.Claim" For="@(() => claimAndValues.Claim)" />
                                                <FInputTextList @bind-ValueList="claimAndValues.Values" For="@(() => claimAndValues.Values)" AddOneMoreName="Value" />
                                            </div>
                                            <div class="col-1 text-right">
                                                <button type="button" class="btn btn-link px-0" title="Remove" @onclick="@(e => RemoveClaim(e, user.Form.Model.Claims, claimAndValues))"><span class="oi oi-circle-x" aria-hidden="true"></span></button>
                                            </div>
                                        </div>
                                    </li>
                                }
                            </ul>
                            <ValidationMessage For="@(() => user.Form.Model.Claims)" />
                            <button type="button" class="btn btn-link btn-xs" @onclick="@(e => AddClaim(e, user.Form.Model.Claims))"><span class="oi oi-plus" aria-hidden="true"></span> Add Claims</button>
                        </div>
                    </div>
                    @if (!user.CreateMode && user.DeleteAcknowledge)
                    {
                        <div class="modal-footer">
                            <div class="alert alert-danger" role="alert">
                                <div>
                                    You are about to delete User "@user.Email", are you sure?
                                </div>

                                <div class="mt-3">
                                    <button type="button" class="btn btn-secondary" @onclick="@(async () => await DeleteUserAsync(user))">Yes delete user</button>
                                    <button type="button" class="btn btn-secondary" @onclick="@(() => user.DeleteAcknowledge = false)">No</button>
                                </div>
                            </div>
                        </div>
                    }
                    <div class="modal-footer">
                        @if (!user.CreateMode)
                        {
                            <button type="button" class="btn btn-link" @onclick="@(() => user.DeleteAcknowledge = true)">Delete</button>
                        }
                        <button type="submit" class="btn btn-primary">@(user.CreateMode ? "Create" : "Update")</button>
                        <button type="button" class="btn btn-secondary" @onclick="@(() => UserCancel(user))">@(@user.CreateMode ? "Cancel" : "Close")</button>
                    </div>
                </PageEditForm>
            }
            else
            {
                <button class="btn btn-link" @onclick="@(async () => await ShowUpdateUserAsync(user))">
                    @user.Email
                </button>
            }
        </li>
    }
</ul>
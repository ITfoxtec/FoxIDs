@page "/{tenantName}/externalusers"
@inherits PageBase

<ul class="nav nav-tabs">
    <li class="nav-item">
        <a class="nav-link" href="@internalUsersHref">Internal Users</a>
    </li>
    <li class="nav-item">
        <a class="nav-link active">External Users</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" href="@failingLoginsHref">Failing Login Lockout</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" href="@refreshTokenGrantsHref">Refresh Token Grants</a>
    </li>
</ul>

<div class="d-flex pt-2">
    <div class="info-text mr-auto">
        The <DocsLink Page="users-external">external linked users</DocsLink> are stored in the environment per authentication method and connected to the external user with a link claim.
    </div>
    <div class="py-2">
        <button type="button" class="btn btn-primary" @onclick="@(() => ShowCreateExternalUser())">
            <span class="oi oi-plus" aria-hidden="true"></span> Create External User
        </button>
    </div>
</div>

<PageEditForm @ref="externalUserFilterForm" TModel="FilterExternalUserViewModel" OnValidSubmit="OnExternalUserFilterValidSubmitAsync">
    <FInputTextFilter @bind-Value="externalUserFilterForm.Model.FilterValue" For="@(() => externalUserFilterForm.Model.FilterValue)" />
</PageEditForm>

<ul class="list-group">
    @foreach (var externalUser in externalUsers)
    {
        <li class="list-group-item @(externalUser.Edit ? "active" : "d-flex justify-content-between align-items-center")">
            @if (!externalUser.Error.IsNullOrWhiteSpace())
            {
                <div class="alert alert-danger" role="alert">
                    @externalUser.Error
                </div>
            }
            @if (externalUser.Edit)
            {
                <PageEditForm @ref="externalUser.Form" TModel="ExternalUserViewModel" OnAfterInit="@(async m => await ExternalUserViewModelAfterInitAsync(externalUser, m))" OnValidSubmit="@(async (editContext) => await OnEditExternalUserValidSubmitAsync(externalUser, editContext))">
                    <div class="modal-header sticky-header">
                        <div class="h5 d-flex flex-nowrap align-items-center mb-0" style="min-width: 0; overflow: hidden;">
                            <span class="text-nowrap" style="flex-grow: 0; flex-shrink: 1; min-width: 0; overflow: hidden; text-overflow: clip; white-space: nowrap;">External User</span>
                            <span class="ml-2 text-muted text-truncate" style="flex-grow: 1; flex-shrink: 100; min-width: 0; overflow: hidden;">@GetInfoText(externalUser)</span>
                        </div>
                    </div>
                    <div class="modal-body">
                        @if (externalUser.CreateMode)
                        {
                            <div class="info-text">The external user can be redeemed by a redemption claim type (e.g. <code>email</code>) and the user are then automatically linked with the link claim type. You should know the redemption claim value in advanced.</div>
                            <FInputText @bind-Value="externalUser.Form.Model.RedemptionClaimValue" For="@(() => externalUser.Form.Model.RedemptionClaimValue)" Focus="externalUser.CreateMode" />

                            <div class="info-text">The external user are linked with the link claim type (e.g. <code>sub</code>). Most of the time, the link claim value is not known in advance. You can add the value if you know it.</div>
                            <FInputText @bind-Value="externalUser.Form.Model.LinkClaimValue" For="@(() => externalUser.Form.Model.LinkClaimValue)" />

                            <ValidationMessage For="@(() => externalUser.Form.Model.UpPartyName)" />
                            <div class="pt-2">                                
                                @if (@externalUser.Form.Model.UpPartyName.IsNullOrWhiteSpace())
                                {
                                    <div class=" form-group active-group active">
                                        <label class="label-control">Connect the external user to an authentication method</label>
                                        <div class="card pb-3">
                                            <PageEditForm @ref="SelectUpPartyFilterForm" TModel="FilterUpPartyViewModel" OnValidSubmit="OnSelectUpPartyFilterValidSubmitAsync">
                                                <div class="form-group active-group px-3 mt-4 pb-2">
                                                    <FInputTextFilter @bind-Value="SelectUpPartyFilterForm.Model.FilterName" For="@(() => SelectUpPartyFilterForm.Model.FilterName)" IncludeActiveFormGroup="false" />
                                                </div>
                                            </PageEditForm>

                                            @if (selectUpParties != null)
                                            {
                                                <div class="overflow-auto" style="max-height: 500px">
                                                    @if (selectUpParties.Count() > 0)
                                                    {
                                                        @foreach (var upParty in selectUpParties)
                                                        {
                                                            <button type="button" class="dropdown-item btn btn-link px-4" @onclick="@(() => SelectUpParty(externalUser, upParty))">
                                                                @(upParty.DisplayName ?? upParty.Name)
                                                            </button>
                                                        }
                                                    }
                                                    else if (!SelectUpPartyFilterForm.Model.FilterName.IsNullOrWhiteSpace())
                                                    {
                                                        <div class="font-italic px-4">No match</div>
                                                    }
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    @if (!externalUser.Form.Model.UpPartyDisplayName.IsNullOrWhiteSpace())
                                    {
                                        <FFieldText Class="pb-0" @bind-Value="externalUser.Form.Model.UpPartyDisplayName" For="@(() => externalUser.Form.Model.UpPartyDisplayName)" />
                                    }
                                    else
                                    {
                                        <FFieldText Class="pb-0" @bind-Value="externalUser.Form.Model.UpPartyName" For="@(() => externalUser.Form.Model.UpPartyName)" />
                                    }
                                    <button type="button" class="btn btn-link btn-sm pt-0 pb-3" onclick="@(() => ShowSelectUpParty(externalUser))">Link to a different authentication method</button>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="info-text">You can change the redemption claim value, but it will not have effect unless the link claim value is empty.</div>
                            <FInputText @bind-Value="externalUser.Form.Model.RedemptionClaimValue" For="@(() => externalUser.Form.Model.RedemptionClaimValue)" Focus="externalUser.CreateMode" />
                            <FInputText @bind-Value="externalUser.Form.Model.LinkClaimValue" For="@(() => externalUser.Form.Model.LinkClaimValue)" />

                            @if (!externalUser.Form.Model.UpPartyDisplayName.IsNullOrWhiteSpace())
                            {
                                <FFieldText @bind-Value="externalUser.Form.Model.UpPartyDisplayName" For="@(() => externalUser.Form.Model.UpPartyDisplayName)" />
                            }
                            else
                            {
                                <FFieldText @bind-Value="externalUser.Form.Model.UpPartyName" For="@(() => externalUser.Form.Model.UpPartyName)" />
                            }
                            <FFieldText @bind-Value="externalUser.Form.Model.UserId" For="@(() => externalUser.Form.Model.UserId)" />
                        }
                        <FInputToggle @bind-Value="externalUser.Form.Model.DisableAccount" For="@(() => externalUser.Form.Model.DisableAccount)" Negation="true" TextType="e.d" />

                        <div class="form-group active-group active">
                            <Label For="@(() => externalUser.Form.Model.Claims)" class="label-control" />
                            <ul class="list-group">
                                @foreach (var claimAndValues in externalUser.Form.Model.Claims)
                                {
                                    <li class="list-group-item">
                                        <div class="row">
                                            <div class="col-11">
                                                <FInputText @bind-Value="claimAndValues.Claim" For="@(() => claimAndValues.Claim)" />
                                                <FInputTextList @bind-ValueList="claimAndValues.Values" For="@(() => claimAndValues.Values)" AddOneMoreName="Value" />
                                            </div>
                                            <div class="col-1 text-right">
                                                <button type="button" class="btn btn-link px-0" title="Remove" @onclick="@(e => RemoveClaim(e, externalUser.Form.Model.Claims, claimAndValues))"><span class="oi oi-circle-x" aria-hidden="true"></span></button>
                                            </div>
                                        </div>
                                    </li>
                                }
                            </ul>
                            <ValidationMessage For="@(() => externalUser.Form.Model.Claims)" />
                            <button type="button" class="btn btn-link btn-xs" @onclick="@(e => AddClaim(e, externalUser.Form.Model.Claims))"><span class="oi oi-plus" aria-hidden="true"></span> Add Claim</button>
                        </div>
                    </div>
                    @if (!externalUser.CreateMode && externalUser.DeleteAcknowledge)
                    {
                        <div class="modal-footer">
                            <div class="alert alert-danger" role="alert">
                                <div>
                                    You are about to delete external user "@externalUser.LinkClaimValue (@(externalUser.UpPartyDisplayName ?? externalUser.UpPartyName))", are you sure?
                                </div>

                                <div class="mt-3">
                                    <button type="button" class="btn btn-secondary" @onclick="@(async () => await DeleteExternalUserAsync(externalUser))">Yes delete external user</button>
                                    <button type="button" class="btn btn-secondary" @onclick="@(() => externalUser.DeleteAcknowledge = false)">No</button>
                                </div>
                            </div>
                        </div>
                    }
                    <div class="modal-footer">
                        @if (!externalUser.CreateMode)
                        {
                            <button type="button" class="btn btn-link" @onclick="@(() => externalUser.DeleteAcknowledge = true)">Delete</button>
                        }
                        <button type="submit" class="btn btn-primary">@(externalUser.CreateMode ? "Create" : "Update")</button>
                        <button type="button" class="btn btn-secondary" @onclick="@(() => ExternalUserCancel(externalUser))">@(@externalUser.CreateMode ? "Cancel" : "Close")</button>
                    </div>
                </PageEditForm>
            }
            else
            {
                <button type="button" class="btn btn-link text-left" style="min-width: 0; overflow: hidden;" @onclick="@(async () => await ShowUpdateExternalUserAsync(externalUser))">
                    <span class="d-flex align-items-center flex-nowrap text-truncate overflow-hidden" style="min-width: 0;">
                        <span class="badge badge-light border mr-2 mt-1 flex-shrink-0 d-inline-flex">@GetInfoTextType(externalUser)</span>
                        <span class="text-truncate" style="min-width: 0">@GetInfoText(externalUser, includeIdentifiers: true)</span>
                    </span>
                </button>
            }
        </li>
    }
</ul>
@if (paginationToken != null)
{
    <div class="pl-3 pt-3">
        <button type="button" class="btn btn-secondary" @onclick="LoadMoreExternalUsersAsync">
            Load more
        </button>
    </div>
}
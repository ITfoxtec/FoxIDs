<div class="form-group active-group active pt-0">
    <div class="info-text">Dynamic elements shown in order (use the move up and down arrows to change the order)</div>
    <ul class="list-group">
        @if (Model.Elements.Count() > 0) 
        {
            foreach (var element in Model.Elements)
            {
                <li class="list-group-item">
                    <div class="row">
                        <div class="col-9">
                            @switch (element.Type)
                            {
                                case DynamicElementTypes.Email:
                                    <div class="p-0 alert alert-light font-weight-bold small" role="alert">Email (claim: <code>@JwtClaimTypes.Email</code>)</div>
                                    break;
                                case DynamicElementTypes.Phone:
                                    <div class="p-0 alert alert-light font-weight-bold small" role="alert">Phone (claim: <code>@JwtClaimTypes.PhoneNumber</code>)</div>
                                    break;
                                case DynamicElementTypes.Username:
                                    <div class="p-0 alert alert-light font-weight-bold small" role="alert">Username (claim: <code>@JwtClaimTypes.PreferredUsername</code>)</div>
                                    break;

                                case DynamicElementTypes.EmailAndPassword:
                                    <div class="p-0 alert alert-light font-weight-bold small" role="alert">Email (claim: <code>@JwtClaimTypes.Email</code>) and password</div>
                                    break;
                                case DynamicElementTypes.Password:
                                    <div class="p-0 alert alert-light font-weight-bold small" role="alert">Password</div>
                                    break;

                                case DynamicElementTypes.Name:
                                    <div class="p-0 alert alert-light font-weight-bold small" role="alert">Full name (claim: <code>@JwtClaimTypes.Name</code>)</div>
                                    break;

                                case DynamicElementTypes.GivenName:
                                    <div class="p-0 alert alert-light font-weight-bold small" role="alert">Given name (claim: <code>@JwtClaimTypes.GivenName</code>)</div>
                                    break;

                                case DynamicElementTypes.FamilyName:
                                    <div class="p-0 alert alert-light font-weight-bold small" role="alert">Family name (claim: <code>@JwtClaimTypes.FamilyName</code>)</div>
                                    break;

                                default:
                                    throw new NotSupportedException($"Dynamic element type '{element.Type}' not supported.");
                            }
                        </div>
                        <div class="col-2">
                            @if (Model.Elements.IndexOf(element) > 0)
                            {
                                <button type="button" class="btn btn-link p-0" title="Move up" @onclick="@(() => MoveUp(element))"><span class="oi oi-caret-top" aria-hidden="true"></span></button>
                            }
                            else
                            {
                                <button type="button" class="btn btn-link p-0 disabled"><span class="oi oi-caret-top" aria-hidden="true"></span></button>
                            }
                            @if (Model.Elements.IndexOf(element) < Model.Elements.Count() - 1)
                            {
                                <button type="button" class="btn btn-link p-0" title="Move down" @onclick="@(() => MoveDown(element))"><span class="oi oi-caret-bottom" aria-hidden="true"></span></button>
                            }
                            else
                            {
                                <button type="button" class="btn btn-link p-0 disabled"><span class="oi oi-caret-bottom" aria-hidden="true"></span></button>
                            }
                        </div>
                        <div class="col-1 text-right">
                            <button type="button" class="btn btn-link px-0" title="Remove" @onclick="@(() => RemoveElement(element))"><span class="oi oi-circle-x" aria-hidden="true"></span></button>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-11">
                            <FInputToggle @bind-Value="element.Required" For="@(() => element.Required)" TextType="y.n" />
                        </div>
                    </div>
                    @if (InternalUsers && (element.Type == DynamicElementTypes.Email || element.Type == DynamicElementTypes.Phone || element.Type == DynamicElementTypes.Username))
                    {
                        <div class="row">
                            <div class="col-11">
                                <FInputToggle @bind-Value="element.IsUserIdentifier" For="@(() => element.IsUserIdentifier)" TextType="y.n" />
                            </div>
                        </div>
                    }
                </li>
            }
        }
        else
        {
            <li class="list-group-item"></li>
        }
    </ul>
    <ValidationMessage For="@(() => Model.Elements)" />
    @if (!(Model.Elements.Where(e => e.Type == DynamicElementTypes.Email).Any() && Model.Elements.Where(e => e.Type == DynamicElementTypes.Phone).Any() && Model.Elements.Where(e => e.Type == DynamicElementTypes.Username).Any() && Model.Elements.Where(e => e.Type == DynamicElementTypes.Password).Any() && Model.Elements.Where(e => e.Type == DynamicElementTypes.Name).Any() && Model.Elements.Where(e => e.Type == DynamicElementTypes.GivenName).Any() && Model.Elements.Where(e => e.Type == DynamicElementTypes.FamilyName).Any()))
    {
        <div class="btn-group" role="group">
            <button id="btnGroupCreateDownParty" type="button" class="btn btn-link btn-xs dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <span class="oi oi-plus" aria-hidden="true"></span> Add dynamic element
            </button>
            <div class="dropdown-menu" aria-labelledby="btnGroupCreateDownParty">
                @if (!Model.Elements.Where(e => e.Type == DynamicElementTypes.Email).Any())
                {
                    <button type="button" class="dropdown-item btn btn-link" @onclick="@(() => AddElement(DynamicElementTypes.Email, @InternalUsers))">Email (claim: <code>@JwtClaimTypes.Email</code>)</button>
                }
                @if (!Model.Elements.Where(e => e.Type == DynamicElementTypes.Phone).Any())
                {
                    <button type="button" class="dropdown-item btn btn-link" @onclick="@(() => AddElement(DynamicElementTypes.Phone, @InternalUsers))">Phone (claim: <code>@JwtClaimTypes.PhoneNumber</code>)</button>
                }
                @if (!Model.Elements.Where(e => e.Type == DynamicElementTypes.Username).Any())
                {
                    <button type="button" class="dropdown-item btn btn-link" @onclick="@(() => AddElement(DynamicElementTypes.Username, @InternalUsers))">Username (claim: <code>@JwtClaimTypes.PreferredUsername</code>)</button>
                }
                @if (InternalUsers && !Model.Elements.Where(e => e.Type == DynamicElementTypes.Password).Any())
                {
                    <button type="button" class="dropdown-item btn btn-link" @onclick="@(() => AddElement(DynamicElementTypes.Password))">Password</button>
                }
                @if (!Model.Elements.Where(e => e.Type == DynamicElementTypes.Name).Any())
                {
                    <button type="button" class="dropdown-item btn btn-link" @onclick="@(() => AddElement(DynamicElementTypes.Name))">Full name (claim: <code>@JwtClaimTypes.Name</code>)</button>
                }
                @if (!Model.Elements.Where(e => e.Type == DynamicElementTypes.GivenName).Any())
                {
                    <button type="button" class="dropdown-item btn btn-link" @onclick="@(() => AddElement(DynamicElementTypes.GivenName))">Given name (claim: <code>@JwtClaimTypes.GivenName</code>)</button>
                }
                @if (!Model.Elements.Where(e => e.Type == DynamicElementTypes.FamilyName).Any())
                {
                    <button type="button" class="dropdown-item btn btn-link" @onclick="@(() => AddElement(DynamicElementTypes.FamilyName))">Family name (claim: <code>@JwtClaimTypes.FamilyName</code>)</button>
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public IDynamicElementsViewModel Model { get; set; }

    [Parameter]
    public bool InternalUsers { get; set; }

    private void AddElement(DynamicElementTypes dynamicElementTypes, bool isUserIdentifier = false)
    {
        switch (dynamicElementTypes)
        {
            case DynamicElementTypes.Email:
                Model.Elements.Add(new DynamicElementViewModel
                    {
                        Type = DynamicElementTypes.Email,
                        Required = InternalUsers,
                        IsUserIdentifier = isUserIdentifier
                    });
                break;
            case DynamicElementTypes.Phone:
                Model.Elements.Add(new DynamicElementViewModel
                    {
                        Type = DynamicElementTypes.Phone,
                        Required = InternalUsers,
                        IsUserIdentifier = isUserIdentifier
                    });
                break;
            case DynamicElementTypes.Username:
                Model.Elements.Add(new DynamicElementViewModel
                    {
                        Type = DynamicElementTypes.Username,
                        Required = InternalUsers,
                        IsUserIdentifier = isUserIdentifier
                    });
                break;
            case DynamicElementTypes.Password:
                Model.Elements.Add(new DynamicElementViewModel
                    {
                        Type = DynamicElementTypes.Password,
                        Required = true
                    });
                break;
            case DynamicElementTypes.Name:
                Model.Elements.Add(new DynamicElementViewModel
                    {
                        Type = DynamicElementTypes.Name
                    });
                break;
            case DynamicElementTypes.GivenName:
                Model.Elements.Add(new DynamicElementViewModel
                    {
                        Type = DynamicElementTypes.GivenName
                    });
                break;
            case DynamicElementTypes.FamilyName:
                Model.Elements.Add(new DynamicElementViewModel
                    {
                        Type = DynamicElementTypes.FamilyName
                    });
                break;

            default:
                throw new NotSupportedException("Dynamic element type not supported.");
        }
    }

    private void RemoveElement(DynamicElementViewModel element)
    {
        Model.Elements.Remove(element);
    }

    private void MoveUp(DynamicElementViewModel element)
    {
        var index = Model.Elements.IndexOf(element);
        Model.Elements.RemoveAt(index);
        Model.Elements.Insert(--index, element);
        StateHasChanged();
    }

    private void MoveDown(DynamicElementViewModel element)
    {
        var index = Model.Elements.IndexOf(element);
        Model.Elements.RemoveAt(index);
        Model.Elements.Insert(++index, element);
        StateHasChanged();
    }
}

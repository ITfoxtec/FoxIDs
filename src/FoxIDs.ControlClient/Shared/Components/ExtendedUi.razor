@using FoxIDs.Util
<div class="info-text">
    Create on or more extended UIs which can be shown for the user in the login flow.
    <div class="pb-2"></div>
    You select an extended UI page in the login flow by adding the claim type <code>@Constants.JwtClaimTypes.OpenExtendedUi</code> with the extended UI page name in the first-level claim transforms.
    @if (IsSaml)
    {
        <div class="small">
            Optionally select with the corresponding SAML 2.0 claim in first-level claim transforms:<br />
            <ul>
                <li><code>@Constants.JwtClaimTypes.OpenExtendedUi</code> equals to <code>@Constants.SamlClaimTypes.OpenExtendedUi</code></li>
            </ul>
        </div>
    }
    Subsequently extended UI pages can be selected in the extended UI claim transforms.
    <div class="pb-2"></div>
    In order to support multiple languages, the different texts are written as English texts and translations are added under Settings and Texts.
</div>

<div class="form-group active-group active">
    <Label LabelText="Extended UIs" class="label-control" />
    @if (Model.Count() <= 0)
    {
        <div class="card">
            <div class="card-body">
            </div>
        </div>
    }
    <ul class="list-group">
        @foreach (var extendedUi in Model)
        {
            <li class="list-group-item">
                <div class="row">
                    <div class="col-11">
                        <FInputText @bind-Value="extendedUi.Name" For="@(() => extendedUi.Name)" />
                        <FInputText @bind-Value="extendedUi.Title" For="@(() => extendedUi.Title)" />
                        <FInputText @bind-Value="extendedUi.SubmitButtonText" For="@(() => extendedUi.SubmitButtonText)" />
                    </div>
                    <div class="col-1 text-right">
                        <button type="button" class="btn btn-link px-0" title="Remove" @onclick="@(e => RemoveExtendedUi(e, extendedUi))"><span class="oi oi-circle-x" aria-hidden="true"></span></button>
                    </div>
                </div>
                <div class="row">
                    <div class="col-11">
                        @if (extendedUi.ShowDetails)
                        {
                            <DynamicElements Model="extendedUi" />

                            <div class="info-text">The claims from the dynamic elements are added, unless you call an API, in which case the claims returned from the API are added instead.</div>
                            <div class="pt-2">
                                <div class="active-group active">
                                    <div class="card">
                                        <div class="card-body">
                                            <div class="info-text">Optionally call an API on submit to validate input and return claims or an error.</div>
                                            <FInputTextList @bind-ValueList="extendedUi.ExternalClaimsIn" For="@(() => extendedUi.ExternalClaimsIn)" DynamicFirstRow="true" />
                                            <FInputText @bind-Value="extendedUi.ApiUrl" For="@(() => extendedUi.ApiUrl)" />
                                            <FInputText @bind-Value="extendedUi.Secret" For="@(() => extendedUi.Secret)" />
                                            <div class="info-text">The generic error message is displayed for the user if the API returns a generic error.</div>
                                            <FInputText @bind-Value="extendedUi.ErrorMessage" For="@(() => extendedUi.ErrorMessage)" />
                                        </div>
                                    </div>
                                    <label class="label-control">API validation</label>
                                </div>
                            </div>

                            <div class="info-text">The claim transforms run after successful completion of this external UI. You can optionally select the next external UI page by adding the claim type <code>@Constants.JwtClaimTypes.OpenExtendedUi</code> @(IsSaml ? "(JWT claim only)" : string.Empty) with the next extended UI page name.</div>
                            <OAuthClaimTransforms ClaimTransforms="extendedUi.ClaimTransforms" />
                        }
                        else
                        {
                            <div class="card">
                                <div class="card-body">
                                </div>
                            </div>
                        }
                    </div>
                    <div class="col-1 text-right">
                        @if (extendedUi.ShowDetails)
                        {
                            <button type="button" class="btn btn-link p-0" title="Hide" @onclick="@(e => extendedUi.ShowDetails = false)"><span class="oi oi-collapse-up" aria-hidden="true"></span></button>
                        }
                        else
                        {
                            <button type="button" class="btn btn-link p-0" title="Show" @onclick="@(e => extendedUi.ShowDetails = true)"><span class="oi oi-collapse-down" aria-hidden="true"></span></button>
                        }
                    </div>
                </div>
            </li>
        }
    </ul>
    <ValidationMessage For="@(() => Model)" />
    <button type="button" class="btn btn-link btn-xs" @onclick="AddExtendedUi"><span class="oi oi-plus" aria-hidden="true"></span> Add extended UI</button>
</div>

@code {
    [Parameter]
    public List<ExtendedUiViewModel> Model { get; set; }

    private void AddExtendedUi(MouseEventArgs e)
    {
        var extendedUi = new ExtendedUiViewModel
            {
                Name = RandomName.GenerateDefaultName(Model.Select(p => p.Name)),
                ShowDetails = true
            };
        Model.Add(extendedUi);
    }

    private void RemoveExtendedUi(MouseEventArgs e, ExtendedUiViewModel removeExtendedUi)
    {
        Model.Remove(removeExtendedUi);
    }

    [Parameter]
    public bool IsSaml { get; set; }
}

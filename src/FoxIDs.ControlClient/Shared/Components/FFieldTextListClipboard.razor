@using System.Linq.Expressions

<div class="active-group active">
    @foreach (var item in ValueList.Select((e, i) => new { Effect = e, Index = i }))
    {
        if (item.Index == 0)
        {
            <div class="card card-row bg-light d-flex align-items-center">
                <div class="card-body py-2 mb-0" style="flex: 1 1 auto; min-width: 0;">
                    <div class="d-flex flex-nowrap align-items-center" style="min-width: 0;">
                        <span class="text-truncate d-inline-block" style="flex: 1 1 auto; min-width: 0;" title="@item.Effect">@item.Effect</span>
                    </div>
                </div>
                <div class="pr-2 d-flex align-items-center">
                        <button type="button" class="btn btn-link" @onclick="@(async () => await ClipboardLogic.WriteTextAsync(@item.Effect))"><i class="bi bi-copy" title="Click to copy"></i></button>
                    </div>
            </div>
            <Label For="@For" class="label-control" />
        }
        else
        {
            <div class="card card-row bg-light d-flex align-items-center">
                <div class="card-body py-2 mb-0" style="flex: 1 1 auto; min-width: 0;">
                    <div class="d-flex flex-nowrap align-items-center" style="min-width: 0;">
                        <span class="text-truncate d-inline-block" style="flex: 1 1 auto; min-width: 0;" title="@item.Effect">@item.Effect</span>
                    </div>
                </div>
                <div class="pr-2 d-flex align-items-center">
                        <button type="button" class="btn btn-link" @onclick="@(async () => await ClipboardLogic.WriteTextAsync(@item.Effect))"><i class="bi bi-copy" title="Click to copy"></i></button>
                    </div>
            </div>
        }
    }
</div>

@code {
    [Inject]
    public ClipboardLogic ClipboardLogic { get; set; }

    [Parameter]
    public List<string> ValueList { get; set; }
    [Parameter]
    public EventCallback<List<string>> ValueListChanged { get; set; }

    [Parameter]
    public Expression<Func<object>> For { get; set; }
}

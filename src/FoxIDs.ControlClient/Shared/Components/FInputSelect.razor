@typeparam TValue
@inherits FInputBase<TValue>

<div class="@(IncludeActiveFormGroup ? "form-group active-group" : string.Empty)">
    <select @ref="inputElement" @bind="@CurrentValueAsString" class="form-control input-control">
        @if (ShowDefaultOption)
        {
            <option value="0" disabled="disabled">- Please Select -</option>
        }
        @ChildContent
    </select>
    <Label For="@For" class="label-control" />
    <ValidationMessage For="@For" />
</div>

@code {
    [Parameter]
    public bool IncludeActiveFormGroup { get; set; } = true;

    [Parameter]
    public bool ShowDefaultOption { get; set; } = false;

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public EventCallback<TValue> OnValidChange { get; set; }

    protected override void OnInitialized()
    {
        OnValueParsedAsync += OnValueParsedEventAsync;
    }

    private async Task OnValueParsedEventAsync(TValue value)
    {
        await OnValidChange.InvokeAsync(value);
        StateHasChanged();
    }

    protected override void Dispose(bool disposing)
    {
        OnValueParsedAsync -= OnValueParsedEventAsync;
        base.Dispose(disposing);
    }
}
@using System.Linq.Expressions

<div class="@(IncludeActiveFormGroup ? "form-group active-group" : string.Empty)">
    @foreach (var item in ValueList.Select((e, i) => new { Effect = e, Index = i }))
    {
        if (item.Index == 0 && !DynamicFirstRow)
        {
            <input type="text" value="@item.Effect" @onchange="@(async e => await OnChangeAsync(e, item.Index))" class="form-control input-control" />
            <Label For="@For" class="label-control" />
        }
        else
        {
            <div class="row">
                <div class="col-11">
                    <input type="text" value="@item.Effect" @onchange="@(async e => await OnChangeAsync(e, item.Index))" class="form-control input-control" />
                </div>
                <div class="col-1 p-0">
                    <button type="button" class="btn btn-link px-0" title="Remove" @onclick="@(async e => await RemoveAsync(e, item.Index))"><span class="oi oi-delete" aria-hidden="true"></span></button>
                </div>
            </div>
        }
    }
    <ValidationMessage For="@For" />
    <button type="button" class="btn btn-link btn-xs" @onclick="@(async e => await AddAsync(e))"><span class="oi oi-plus" aria-hidden="true"></span> Add@(AddOneMoreName.IsNullOrEmpty() ? string.Empty : $" {AddOneMoreName}")</button>
</div>

@code {
    [Parameter]
    public bool IncludeActiveFormGroup { get; set; } = true;

    [Parameter]
    public bool DynamicFirstRow { get; set; } = false;

    [Parameter]
    public List<string> ValueList { get; set; }
    [Parameter]
    public EventCallback<List<string>> ValueListChanged { get; set; }

    [Parameter]
    public Expression<Func<object>> For { get; set; }

    [Parameter]
    public string AddOneMoreName { get; set; } = null;

    [Parameter]
    public Func<string> AddValue { get; set; }

    protected override void OnParametersSet()
    {
        if (ValueList == null)
        {
            if(DynamicFirstRow)
            {
                ValueList = new List<string>();
            }
            else
            {
                ValueList = new List<string> { null };
            }
        }
        base.OnParametersSet();
    }

    private async Task OnChangeAsync(ChangeEventArgs e, int index)
    {
        ValueList[index] = e.Value.ToString();
        await ValueListChanged.InvokeAsync(ValueList);
    }

    private async Task AddAsync(MouseEventArgs e)
    {
        ValueList.Add(AddValue != null ? AddValue.Invoke() : null);
        await ValueListChanged.InvokeAsync(ValueList);
    }

    private async Task RemoveAsync(MouseEventArgs e, int index)
    {
        ValueList.RemoveAt(index);
        await ValueListChanged.InvokeAsync(ValueList);
    }
}
@*@typeparam TValue*@
@using System.Reflection
@using System.ComponentModel.DataAnnotations;
@using System.Linq.Expressions;

<label @attributes="AdditionalAttributes">@label</label>

@code {
    [Parameter]
    public Expression<Func<object>> For { get; set; }

    [Parameter]
    public string LabelText { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object> AdditionalAttributes { get; set; }

    private string label => GetDisplayName();

    private string GetDisplayName()
    {
        if (!LabelText.IsNullOrEmpty())
        {
            return LabelText;
        }

        try
        {
            if (For == null || For.Body == null)
            {
                return string.Empty;
            }

            var expression = For.Body as MemberExpression;
            if (expression == null)
            {
                var ue = For.Body as UnaryExpression;
                if (ue != null)
                {
                    expression = ue.Operand as MemberExpression;
                }
            }

            if (expression?.Member == null)
            {
                return For?.Name ?? string.Empty;
            }

            var all = expression.Member.GetCustomAttributes();
            var value = expression.Member.GetCustomAttribute(typeof(DisplayAttribute)) as DisplayAttribute;
            return value?.Name ?? expression.Member.Name ?? "";
        }
        catch
        {
            return For?.Name ?? string.Empty;
        }
    }
}
@*@typeparam TValue*@
@using System.Reflection
@using System.ComponentModel.DataAnnotations;
@using System.Linq.Expressions;

<label @attributes="mergedAttributes">@label</label>

@code {
    [Parameter]
    public Expression<Func<object>> For { get; set; }

    [Parameter]
    public string LabelText { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object> AdditionalAttributes { get; set; }

    private IDictionary<string, object> mergedAttributes;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        mergedAttributes = AdditionalAttributes != null ? new Dictionary<string, object>(AdditionalAttributes) : new Dictionary<string, object>();

        mergedAttributes["class"] = BuildClassAttribute(mergedAttributes.TryGetValue("class", out var existingClass) ? existingClass?.ToString() : null);
        mergedAttributes["style"] = BuildStyleAttribute(mergedAttributes.TryGetValue("style", out var existingStyle) ? existingStyle?.ToString() : null);
    }

    private static string BuildClassAttribute(string existingClass)
    {
        var classes = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
        if (!string.IsNullOrWhiteSpace(existingClass))
        {
            foreach (var part in existingClass.Split(' ', System.StringSplitOptions.RemoveEmptyEntries))
            {
                classes.Add(part);
            }
        }

        classes.Add("text-truncate");
        classes.Add("d-block");

        return string.Join(' ', classes);
    }

    private static string BuildStyleAttribute(string existingStyle)
    {
        var defaultStyle = "display:block; width:100%; max-width:100%;";
        if (string.IsNullOrWhiteSpace(existingStyle))
        {
            return defaultStyle;
        }

        existingStyle = existingStyle.Trim().TrimEnd(';');
        return $"{existingStyle}; {defaultStyle}";
    }

    private string label => GetDisplayName();

    private string GetDisplayName()
    {
        if(!LabelText.IsNullOrEmpty())
        {
            return LabelText;
        }

        try
        {
            if (For == null || For.Body == null)
            {
                return string.Empty;
            }

            var expression = For.Body as MemberExpression;
            if(expression == null)
            {
                var ue = For.Body as UnaryExpression;
                if (ue != null)
                {
                    expression = ue.Operand as MemberExpression;
                }
            }

            if (expression?.Member == null)
            {
                return For?.Name ?? string.Empty;
            }

            var all = expression.Member.GetCustomAttributes();
            var value = expression.Member.GetCustomAttribute(typeof(DisplayAttribute)) as DisplayAttribute;
            return value?.Name ?? expression.Member.Name ?? "";
        }
        catch
        {
            return For?.Name ?? string.Empty;
        }
    }
}
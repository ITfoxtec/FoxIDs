@using ITfoxtec.Identity.Util

@if (EnablePkce == true)
{
    <div class="form-group active-group active">
        <Label For="@(() => ClientSecret.Secrets)" class="label-control" />
        <div class="card">
            <div class="card-body px-3 py-2">
                <i>Disable PKCE to add secrets.</i>
            </div>
        </div>
    </div>
}
else
{
    <div class="form-group active-group active">
        <Label For="@(() => ClientSecret.Secrets)" class="label-control" />
        @if (ClientSecret.ExistingSecrets.Count <= 0 && ClientSecret.Secrets.Count <= 0)
        {
            <div class="card">
                <div class="card-body px-3 py-2">
                </div>
            </div>
        }
        <ul class="list-group">
            @foreach (var existingSecret in ClientSecret.ExistingSecrets)
            {
                @if (!existingSecret.Removed)
                {
                    <li class="list-group-item p-0">
                        <div class="d-flex">
                            <div class="mr-auto px-3 py-1">
                                @if (existingSecret.Info.IsNullOrWhiteSpace())
                                {
                                    <i>No info...</i>
                                }
                                else
                                {
                                    @existingSecret.Info<span>...</span>
                                }
                            </div>
                            <div class="p-0">
                                <button type="button" class="btn btn-link px-2 py-1" title="Remove" @onclick="@(e => RemoveClientSecret(e, ClientSecret.ExistingSecrets, existingSecret.Name))"><span class="oi oi-delete" aria-hidden="true"></span></button>
                            </div>
                        </div>
                    </li>
                }
            }
        </ul>
        <FInputTextList @bind-ValueList="ClientSecret.Secrets" For="@(() => ClientSecret.Secrets)" AddValue="NewClientSecret" IncludeActiveFormGroup="false" DynamicFirstRow="true" />
    </div>
}

@code {
    [Parameter]
    public bool? EnablePkce { get; set; }

    [Parameter]
    public IClientSecret ClientSecret { get; set; }

    private string NewClientSecret()
    {
        return RandomGenerator.Generate(32);
    }

    private void RemoveClientSecret(MouseEventArgs e, List<OAuthClientSecretViewModel> existingSecrets, string removeName)
    {
        var existingSecret = existingSecrets.Where(s => s.Name.Equals(removeName, StringComparison.Ordinal)).Single();
        existingSecret.Removed = true;
    }
}

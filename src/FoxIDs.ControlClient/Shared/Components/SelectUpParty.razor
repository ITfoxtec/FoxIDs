@using FoxIDs.Client.Services
@using FoxIDs.Infrastructure
<ValidationMessage For="@(() => Model.UpPartyName)" />
<div class="pt-2">
    @if (Model.UpPartyName.IsNullOrWhiteSpace())
    {
        <div class=" form-group active-group active">
            <label class="label-control">Authentication method</label>
            <div class="card pb-3">
                <PageEditForm @ref="upPartyNamesFilterForm" TModel="FilterUpPartyViewModel" OnValidSubmit="OnUpPartyNamesFilterValidSubmitAsync">
                    <div class="form-group active-group px-3 mt-4 pb-2">
                        <FInputTextFilter @bind-Value="upPartyNamesFilterForm.Model.FilterName" For="@(() => upPartyNamesFilterForm.Model.FilterName)" IncludeActiveFormGroup="false" />
                    </div>
                </PageEditForm>

                @if (upPartyFilters != null)
                {
                    @if (upPartyFilters.Count() > 0)
                    {
                        @foreach (var upPartyFilter in upPartyFilters)
                        {
                            <button type="button" class="dropdown-item btn btn-link px-4" @onclick="@(() => OnSelectUpParty(upPartyFilter))">
                                @(upPartyFilter.DisplayName ?? upPartyFilter.Name)
                            </button>
                        }
                    }
                    else if (!upPartyNamesFilterForm.Model.FilterName.IsNullOrWhiteSpace())
                    {
                        <div class="font-italic px-4">No match</div>
                    }
                }
            </div>
        </div>
    }
    else
    {
         <div class="card card-row">
            <div class="card-body px-2 py-1 d-flex">
                <div class="mr-auto">
                    <div>@Model.UpPartyDisplayName</div>
                    @if(!@Model.UpPartyDisplayProfileName.IsNullOrWhiteSpace())
                    {
                        <div>Profile: @Model.UpPartyDisplayProfileName</div>
                    }
                    <div class="small">@Model.UpPartyTypeText</div>
                </div>
            </div>
        </div>
        <button type="button" class="btn btn-link btn-sm pt-0 pb-3" onclick="@(() => ShowDefaultUpPartyFilter())">Select a different authentication method</button> 
    }
</div>

@code {
    [Inject]
    public OpenidConnectPkce OpenidConnectPkce { get; set; }

    [Inject]
    public UpPartyService UpPartyService { get; set; }

    [Parameter]
    public IUpPartySelection Model { get; set; }

    private PageEditForm<FilterUpPartyViewModel> upPartyNamesFilterForm;
    private List<UpParty> upParties;
    private List<UpPartyFilterViewModel> upPartyFilters;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await UpPartyNamesFilterAsync(null);
    }

    private async Task ShowDefaultUpPartyFilter()
    {
        await UpPartyNamesFilterAsync(null);
        Model.UpPartyName = null;
    }

    private async Task OnUpPartyNamesFilterValidSubmitAsync(EditContext editContext)
    {
        try
        {
            await UpPartyNamesFilterAsync(upPartyNamesFilterForm.Model.FilterName);
        }
        catch (FoxIDsApiException ex)
        {
            if (ex.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                upPartyNamesFilterForm.SetFieldError(nameof(upPartyNamesFilterForm.Model.FilterName), ex.Message);
            }
            else
            {
                throw;
            }
        }
    }

    private async Task UpPartyNamesFilterAsync(string filterName)
    {
        try
        {
            var ups = (await UpPartyService.GetUpPartiesAsync(filterName)).Data;
            if (upParties?.Count() > 0)
            {
                foreach (var up in ups)
                {
                    if (!upParties.Where(u => u.Name == up.Name).Any())
                    {
                        upParties.Add(up);
                    }
                }
            }
            else
            {
                upParties = ups?.ToList();
            }

            var tempUpPartyFilters = upPartyFilters;
            upPartyFilters = new List<UpPartyFilterViewModel>();
            foreach (var up in ups)
            {
                var typeText = GetTypeText(up);

                var item = tempUpPartyFilters?.Where(u => u.Name == up.Name && u.ProfileName.IsNullOrWhiteSpace()).FirstOrDefault();
                upPartyFilters.Add(new UpPartyFilterViewModel
                    {
                        Name = up.Name,
                        DisplayName = up.DisplayName ?? up.Name,
                        Type = up.Type,
                        TypeText = typeText
                    });
                if (tempUpPartyFilters != null && item != null)
                {
                    tempUpPartyFilters.Remove(item);
                }

                if (up.Profiles != null)
                {
                    foreach (var profile in up.Profiles)
                    {
                        var itemProfile = tempUpPartyFilters?.Where(u => u.Name == up.Name && u.ProfileName == profile.Name).FirstOrDefault();
                        upPartyFilters.Add(new UpPartyFilterViewModel
                            {
                                Name = up.Name,
                                DisplayName = up.DisplayName ?? up.Name,
                                ProfileName = profile.Name,
                                ProfileDisplayName = profile.DisplayName,
                                Type = up.Type,
                                TypeText = typeText
                            });
                        if (tempUpPartyFilters != null && itemProfile != null)
                        {
                            tempUpPartyFilters.Remove(itemProfile);
                        }
                    }
                }
            }

            if (tempUpPartyFilters?.Count() > 0)
            {
                tempUpPartyFilters.ForEach(u => u.Hide = true);
                upPartyFilters.AddRange(tempUpPartyFilters);
            }
        }
        catch (TokenUnavailableException)
        {
            await (OpenidConnectPkce as TenantOpenidConnectPkce).TenantLoginAsync();
        }
    }

    private void OnSelectUpParty(UpPartyFilterViewModel upPartyFilter)
    {
        Model.UpPartyType = upPartyFilter.Type;
        Model.UpPartyTypeText = upPartyFilter.TypeText;
        Model.UpPartyDisplayProfileName = upPartyFilter.ProfileDisplayName;
        Model.UpPartyProfileName = upPartyFilter.ProfileName;
        Model.UpPartyDisplayName = upPartyFilter.DisplayName;
        Model.UpPartyName = upPartyFilter.Name;
    }

    private (string displayName, string profileDisplayName, string type) UpPartyInfoText(UpPartyLink upPartyLink)
    {
        var upParty = upParties.Where(f => f.Name == upPartyLink.Name).FirstOrDefault();
        if (upParty == null)
        {
            return (upPartyLink.Name, upPartyLink.ProfileName, string.Empty);
        }
        else
        {
            return (upParty.DisplayName ?? upParty.Name, GetProfileDisplayName(upParty, upPartyLink.ProfileName), GetTypeText(upParty));
        }
    }

    private string GetProfileDisplayName(UpParty upParty, string profileName)
    {
        if (!profileName.IsNullOrEmpty() && upParty.Profiles != null)
        {
            var profileDisplayName = upParty.Profiles.Where(p => p.Name == profileName).Select(p => p.DisplayName).FirstOrDefault();
            return profileDisplayName ?? profileName;
        }

        return string.Empty;
    }

    private string GetTypeText(UpParty upParty)
    {
        if (upParty.Type == PartyTypes.Login)
        {
            return "Login";
        }
        else if (upParty.Type == PartyTypes.OAuth2)
        {
            return "OAuth 2.0";
        }
        else if (upParty.Type == PartyTypes.Oidc)
        {
            return "OpenID Connect";
        }
        else if (upParty.Type == PartyTypes.Saml2)
        {
            return "SAML 2.0";
        }
        else if (upParty.Type == PartyTypes.TrackLink)
        {
            return "Environment Link";
        }
        else if (upParty.Type == PartyTypes.ExternalLogin)
        {
            return "External API Login";
        }

        throw new NotSupportedException();
    }
}

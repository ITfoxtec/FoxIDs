@using System.Collections.Generic
@using Microsoft.AspNetCore.Mvc.Localization
@using FoxIDs.Models
@inject IViewLocalizer Localizer
@model PhoneConfirmationViewModel

@{
    ViewData["Title"] = Localizer["Phone confirmation"];
}

<h1 class="heading">@ViewData["Title"]</h1>

<div class="row page-container name-phone-confirmation">
    <div class="col-md page-content">
        <form method="post">
            <input type="hidden" asp-for="ConfirmationCodeSendStatus" autocomplete="off" />
            <div class="info-message">
                @if (Model.ConfirmationCodeSendStatus == ConfirmationCodeSendStatus.NewCode)
                {
                    @Localizer["A confirmation code has just been sent to your phone. Please verify your phone number with the confirmation code."]
                }
                else if (Model.ConfirmationCodeSendStatus == ConfirmationCodeSendStatus.ForceNewCode)
                {
                    @Localizer["A new confirmation code has been sent to your phone. Please verify your phone number with the confirmation code."]
                }
                else
                {
                    @Localizer["Please verify your phone number with the confirmation code sent to your phone."]
                }
            </div>
            <div asp-validation-summary="ModelOnly"></div>
            @foreach (var element in Model.Elements)
            {
                if (element is LoginInputDElement)
                {
                    await Html.RenderPartialAsync("_UserIdentifierPassword");
                    <div class="form-group active-group">
                        <input asp-for="ConfirmationCode" autocomplete="off" class="form-control input-control" autofocus />
                        <label asp-for="ConfirmationCode" class="label-control"></label>
                        <span asp-validation-for="ConfirmationCode"></span>
                    </div>
                }
                else if (element is LoginButtonDElement)
                {
                    <div class="form-group button-group">
                        <input type="submit" value="@Localizer["Confirm phone"]" class="btn btn-primary" />
                        @if (Model.ShowCancelLogin)
                        {
                            <a href="../../../@Constants.Routes.LoginController/@Constants.Endpoints.CancelLogin/_@Model.SequenceString" class="btn btn-light">@Localizer["Cancel"]</a>
                        }
                        <a href="../_@Model.SequenceString?newcode=true" class="btn btn-link float-right forgot-password">@Localizer["Send new confirmation code"]</a>
                    </div>
                }
                else if (element is ContentDElement)
                {
                    await Html.RenderPartialAsync("_DynamicContentElements", element);
                }
                else if (element is LoginLinkDElement || element is LoginHrdDElement)
                {
                    // Placeholder elements ignored on logged-in view.
                }
                else
                {
                    throw new NotSupportedException($"Dynamic element type '{element.GetTypeName()}' not supported.");
                }
            }
        </form>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
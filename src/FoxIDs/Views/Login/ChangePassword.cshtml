@using System.Collections.Generic
@using Microsoft.AspNetCore.Mvc.Localization
@using Microsoft.Extensions.Localization
@inject IViewLocalizer Localizer
@inject IStringLocalizer StringLocalizer
@model ChangePasswordViewModel

@{
    ViewData["Title"] = Localizer["Change password"];
}

<h1 class="heading">@ViewData["Title"]</h1>

<div class="row page-container name-change-password">
    <div class="col-md page-content">
        <form method="post">
            <div asp-validation-summary="ModelOnly"></div>

            @foreach (var element in Model.Elements)
            {
                if (element is LoginInputDElement)
                {
                    await Html.RenderPartialAsync("_UserIdentifierChangePassword", Model);
                    <div class="form-group active-group">
                        <input asp-for="CurrentPassword" autocomplete="current-password" class="form-control input-control" autofocus />
                        <label asp-for="CurrentPassword" class="label-control"></label>
                        <span asp-validation-for="CurrentPassword"></span>
                    </div>
                    <div class="form-group active-group">
                        <input asp-for="NewPassword" autocomplete="new-password" class="form-control input-control" />
                        <label asp-for="NewPassword" class="label-control"></label>
                        <span asp-validation-for="NewPassword"></span>
                    </div>
                    <div class="form-group active-group">
                        <input asp-for="ConfirmNewPassword" autocomplete="new-password" class="form-control input-control" />
                        <label asp-for="ConfirmNewPassword" class="label-control"></label>
                        <span asp-validation-for="ConfirmNewPassword"></span>
                    </div>
                }
                else if (element is LoginButtonDElement)
                {
                    <div class="form-group button-group">
                        <input type="submit" value="@Localizer["Change password"]" class="btn btn-primary" />
                        @if (Model.EnableCancelLogin)
                        {
                            <a href="../../@Constants.Endpoints.CancelLogin/_@Model.SequenceString" class="btn btn-light">@Localizer["Cancel"]</a>
                        }
                    </div>
                }
                else if (element is LoginLinkDElement)
                {
                    // Placeholder kept for ordering flexibility.
                }
                else if (element is ContentDElement contentDElement)
                {
                    <div class="form-group active-group login-dynamic-element">
                        @if (contentDElement.IsHtml)
                        {
                            @Html.GetHtmlControl(contentDElement.DContent, StringLocalizer)
                        }
                        else
                        {
                            @Html.GetTextControl(contentDElement.DContent, StringLocalizer)
                        }
                    </div>
                }
                else if (!(element is LoginHrdDElement))
                {
                    throw new NotSupportedException($"Dynamic element type '{element.GetTypeName()}' not supported.");
                }
            }
        </form>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

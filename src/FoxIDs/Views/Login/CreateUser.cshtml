@using System.Collections.Generic
@using Microsoft.AspNetCore.Mvc.Localization
@using Microsoft.Extensions.Localization
@inject IViewLocalizer Localizer
@inject IStringLocalizer StringLocalizer
@model CreateUserViewModel

@{
    ViewData["Title"] = Localizer["Create user"];
}

<h1 class="heading">@ViewData["Title"]</h1>

<div class="row page-container name-create-user">
    <div class="col-md page-content">
        <form method="post">
            <div asp-validation-summary="ModelOnly"></div>
            @foreach (var element in Model.Elements)
            {
                if (element is LoginInputDElement)
                {
                    await Html.RenderPartialAsync("_DynamicElements", Model.CreateUserElements);
                }
                else if (element is LoginButtonDElement)
                {
                    <div class="form-group button-group">
                        <div>
                            <input type="submit" value="@Localizer["Create"]" class="btn btn-primary" />
                        </div>
                    </div>
                }
                else if (element is LoginLinkDElement)
                {
                    <div class="form-group button-group existing-user-group">
                        <a href="../../_@Model.SequenceString" class="link">@Localizer["Log in with your existing user"]</a>
                    </div>
                }
                else if (element is ContentDElement contentDElement)
                {
                    <div class="form-group active-group login-dynamic-element">
                        @if (contentDElement.IsHtml)
                        {
                            @Html.GetHtmlControl(contentDElement.DContent, StringLocalizer)
                        }
                        else
                        {
                            @Html.GetTextControl(contentDElement.DContent, StringLocalizer)
                        }
                    </div>
                }
                else if (!(element is LoginHrdDElement))
                {
                    throw new NotSupportedException($"Dynamic element type '{element.GetTypeName()}' not supported.");
                }
            }
        </form>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

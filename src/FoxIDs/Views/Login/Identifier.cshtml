@using System.Linq
@using Microsoft.AspNetCore.Mvc.Localization
@using Microsoft.Extensions.Localization
@using FoxIDs.Models
@using FoxIDs.Models.ViewModels
@inject IViewLocalizer Localizer
@inject IStringLocalizer StringLocalizer
@model IdentifierViewModel

@{
    ViewData["Title"] = Localizer["Log in"];
}

<h1 class="heading">@ViewData["Title"]</h1>

<div class="row page-container name-identifier">
    <div class="col-md page-content">
        @if (Model.ShowUserIdentifierSelection)
        {
            <form method="post">
                <div asp-validation-summary="ModelOnly"></div>
@*                 @if (Model.Elements?.Count > 0)
                { *@
                    @foreach (var element in Model.Elements)
                    {
                        if (element is LognInputDElement)
                        {
                            await Html.RenderPartialAsync("_UserIdentifier", Model);
                        }
                        else if (element is ContentDElement contentDElement)
                        {
                            <div class="form-group active-group login-dynamic-element">
                                @if (contentDElement.IsHtml)
                                {
                                    @Html.GetHtmlControl(contentDElement.DContent, StringLocalizer)
                                }
                                else
                                {
                                    @Html.GetTextControl(contentDElement.DContent, StringLocalizer)
                                }
                            </div>
                        }
                        else
                        {
                            throw new NotSupportedException($"Dynamic element type '{element.GetTypeName()}' not supported.");
                        }
                    }
@*                 }
                else
                {
                    await Html.RenderPartialAsync("_UserIdentifier", Model);
                } *@
                <div class="form-group button-group">
                    <input type="submit" value="@Localizer["Next"]" class="btn btn-primary" />
                    @if (Model.EnableCancelLogin)
                    {
                        <a href="../@Constants.Endpoints.CancelLogin/_@Model.SequenceString" class="btn btn-light">@Localizer["Cancel"]</a>
                    }
                </div>
                @if (Model.EnableCreateUser)
                {
                    <div class="form-group button-group create-user-group">
                        @Localizer["Don't have an account?"]
                        <a href="../@Constants.Endpoints.CreateUser/_@Model.SequenceString" class="link create-user">@Localizer["Create user"]</a>
                    </div>
                }
            </form>
        }

        @if (Model.UpPatries?.Count() > 0)
        {
            <form id="form-filter">
                @if (Model.ShowUserIdentifierSelection)
                {
                    <hr class="dividing-line">
                }
                <div class="info-message info-message-filter">
                    @if (Model.ShowUserIdentifierSelection)
                    {
                        @Localizer["OR select where to log in"]
                    }
                    else
                    {
                        @Localizer["Select where to log in"]
                    }
                </div>
                @if (Model.UpPatries.Count() > 10)
                {
                    <div class="form-group active-group group-filter">
                        <div class="input-group">
                            <input asp-for="UpPartyFilter" class="form-control input-control" />
                            <label asp-for="UpPartyFilter" class="label-control"></label>
                            <div class="input-group-append">
                                <button class="btn btn-primary" type="submit">@Localizer["Search"]</button>
                            </div>
                        </div>
                    </div>
                }
                <div class="list-filter">
                    @foreach (var upParty in Model.UpPatries)
                    {
                        <a up-party-name="@upParty.Name" class="list-item-filter btn btn-light" href="../@nameof(FoxIDs.Controllers.LoginController.LoginUpParty).ToLower()/_@Model.SequenceString?name=@upParty.Name&profilename=@upParty.ProfileName">
                            @if (!upParty.LogoUrl.IsNullOrEmpty())
                            {
                                <img src="@upParty.LogoUrl" class="img-item-filter" alt="@upParty.DisplayName">
                            }
                            @if (!upParty.DisplayName.IsNullOrEmpty())
                            {
                                <span class="text-item-filter">@upParty.DisplayName</span>
                            }
                        </a>
                    }
                </div>
            </form>
        }
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
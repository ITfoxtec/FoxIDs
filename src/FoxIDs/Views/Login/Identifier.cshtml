@using System.Collections.Generic
@using System.Linq
@using Microsoft.AspNetCore.Mvc.Localization
@using Microsoft.Extensions.Localization
@using FoxIDs.Models
@using FoxIDs.Models.ViewModels
@inject IViewLocalizer Localizer
@inject IStringLocalizer StringLocalizer
@model IdentifierViewModel

@{
    ViewData["Title"] = Localizer["Log in"];
}

<h1 class="heading">@ViewData["Title"]</h1>

<div class="row page-container name-identifier">
    <div class="col-md page-content">
        @{
            var loginHrdIndex = Model.Elements.FindIndex(e => e is LoginHrdDElement);
            var hasLoginHrd = loginHrdIndex >= 0;
            var formElements = hasLoginHrd ? Model.Elements.Take(loginHrdIndex).ToList() : Model.Elements.ToList();
            var postFormElements = hasLoginHrd ? Model.Elements.Skip(loginHrdIndex + 1).ToList() : new List<DynamicElementBase>();
            var renderedLoginInput = false;
            var renderedLoginButton = false;
            var renderedLoginLink = false;
            var hasLoginLinkElement = formElements.OfType<LoginLinkDElement>().Any();
        }

        @if (Model.ShowUserIdentifierSelection)
        {
            <form method="post">
                <div asp-validation-summary="ModelOnly"></div>
                @foreach (var element in formElements)
                {
                    if (element is LognInputDElement && !renderedLoginInput)
                    {
                        renderedLoginInput = true;
                        await Html.RenderPartialAsync("_UserIdentifier", Model);
                    }
                    else if (element is LoginButtonDElement && !renderedLoginButton)
                    {
                        renderedLoginButton = true;
                        <div class="form-group button-group">
                            <input type="submit" value="@Localizer["Next"]" class="btn btn-primary" />
                            @if (Model.EnableCancelLogin)
                            {
                                <a href="../@Constants.Endpoints.CancelLogin/_@Model.SequenceString" class="btn btn-light">@Localizer["Cancel"]</a>
                            }
                        </div>
                    }
                    else if (element is LoginLinkDElement && !renderedLoginLink)
                    {
                        renderedLoginLink = true;
                        if (Model.EnableCreateUser)
                        {
                            <div class="form-group button-group create-user-group">
                                @Localizer["Don't have an account?"]
                                <a href="../@Constants.Endpoints.CreateUser/_@Model.SequenceString" class="link create-user">@Localizer["Create user"]</a>
                            </div>
                        }
                    }
                    else if (element is ContentDElement contentDElement)
                    {
                        <div class="form-group active-group login-dynamic-element">
                            @if (contentDElement.IsHtml)
                            {
                                @Html.GetHtmlControl(contentDElement.DContent, StringLocalizer)
                            }
                            else
                            {
                                @Html.GetTextControl(contentDElement.DContent, StringLocalizer)
                            }
                        </div>
                    }
                    else if (!(element is LoginHrdDElement))
                    {
                        throw new NotSupportedException($"Dynamic element type '{element.GetTypeName()}' not supported.");
                    }
                }

                @if (!renderedLoginInput)
                {
                    renderedLoginInput = true;
                    await Html.RenderPartialAsync("_UserIdentifier", Model);
                }
                @if (!renderedLoginButton)
                {
                    renderedLoginButton = true;
                    <div class="form-group button-group">
                        <input type="submit" value="@Localizer["Next"]" class="btn btn-primary" />
                        @if (Model.EnableCancelLogin)
                        {
                            <a href="../@Constants.Endpoints.CancelLogin/_@Model.SequenceString" class="btn btn-light">@Localizer["Cancel"]</a>
                        }
                    </div>
                }
                @if (!renderedLoginLink && hasLoginLinkElement && Model.EnableCreateUser)
                {
                    renderedLoginLink = true;
                    <div class="form-group button-group create-user-group">
                        @Localizer["Don't have an account?"]
                        <a href="../@Constants.Endpoints.CreateUser/_@Model.SequenceString" class="link create-user">@Localizer["Create user"]</a>
                    </div>
                }
            </form>
        }

        @{ var renderHrd = Model.UpPatries?.Any() == true && (!Model.ShowUserIdentifierSelection || hasLoginHrd); }
        @if (renderHrd)
        {
            <form id="form-filter">
                @if (Model.ShowUserIdentifierSelection)
                {
                    <hr class="dividing-line">
                }
                <div class="info-message info-message-filter">
                    @if (Model.ShowUserIdentifierSelection)
                    {
                        @Localizer["OR select where to log in"]
                    }
                    else
                    {
                        @Localizer["Select where to log in"]
                    }
                </div>
                @if (Model.UpPatries.Count() > 10)
                {
                    <div class="form-group active-group group-filter">
                        <div class="input-group">
                            <input asp-for="UpPartyFilter" class="form-control input-control" />
                            <label asp-for="UpPartyFilter" class="label-control"></label>
                            <div class="input-group-append">
                                <button class="btn btn-primary" type="submit">@Localizer["Search"]</button>
                            </div>
                        </div>
                    </div>
                }
                <div class="list-filter">
                    @foreach (var upParty in Model.UpPatries)
                    {
                        <a up-party-name="@upParty.Name" class="list-item-filter btn btn-light" href="../@nameof(FoxIDs.Controllers.LoginController.LoginUpParty).ToLower()/_@Model.SequenceString?name=@upParty.Name&profilename=@upParty.ProfileName">
                            @if (!upParty.LogoUrl.IsNullOrEmpty())
                            {
                                <img src="@upParty.LogoUrl" class="img-item-filter" alt="@upParty.DisplayName">
                            }
                            @if (!upParty.DisplayName.IsNullOrEmpty())
                            {
                                <span class="text-item-filter">@upParty.DisplayName</span>
                            }
                        </a>
                    }
                </div>
            </form>
        }

        @foreach (var element in postFormElements)
        {
            if (element is ContentDElement contentDElement)
            {
                <div class="form-group active-group login-dynamic-element">
                    @if (contentDElement.IsHtml)
                    {
                        @Html.GetHtmlControl(contentDElement.DContent, StringLocalizer)
                    }
                    else
                    {
                        @Html.GetTextControl(contentDElement.DContent, StringLocalizer)
                    }
                </div>
            }
            else if (element is LoginButtonDElement || element is LoginLinkDElement || element is LoginHrdDElement)
            {
                // Ignore placeholder elements rendered after the login form.
            }
            else
            {
                throw new NotSupportedException($"Dynamic element type '{element.GetTypeName()}' not supported.");
            }
        }
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

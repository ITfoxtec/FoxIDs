@using System.Collections.Generic
@using Microsoft.AspNetCore.Mvc.Localization
@using FoxIDs.Models
@inject IViewLocalizer Localizer
@model PasswordlessEmailViewModel

@{
    ViewData["Title"] = Localizer["Log in"];
}

<h1 class="heading">@ViewData["Title"]</h1>

<div class="row page-container name-password">
    <div class="col-md page-content">
        <form method="post">
            <input type="hidden" asp-for="ForceNewCode" autocomplete="off" />
            <div class="info-message">@(Model.ForceNewCode ? Localizer["A new one-time password has been sent to your email."] : Localizer["A one-time password has just been sent to your email."])</div>
            <div asp-validation-summary="ModelOnly"></div>
            @foreach (var element in Model.Elements)
            {
                if (element is LoginInputDElement)
                {
                    await Html.RenderPartialAsync("_UserIdentifierPassword", Model);
                    <div class="form-group active-group">
                        <input asp-for="OneTimePassword" autocomplete="off" class="form-control input-control" autofocus />
                        <label asp-for="OneTimePassword" class="label-control"></label>
                        <span asp-validation-for="OneTimePassword"></span>
                    </div>
                }
                else if (element is LoginButtonDElement)
                {
                    <div class="form-group button-group">
                        <input type="submit" value="@Localizer["Log in"]" class="btn btn-primary" />
                        @if (Model.ShowCancelLogin)
                        {
                            <a href="../@Constants.Endpoints.CancelLogin/_@Model.SequenceString" class="btn btn-light">@Localizer["Cancel"]</a>
                        }
                        <a href="../_@Model.SequenceString?newcode=true" class="btn btn-link float-right forgot-password">@Localizer["Send new one-time password"]</a>
                    </div>
                }
                else if (element is LoginLinkDElement)
                {
                    if (Model.ShowPasswordlessSms || Model.ShowPasswordAuth)
                    {
                        <div class="form-group button-group another-authentication-group">
                            @Localizer["Try another method?"]
                            @if (Model.ShowPasswordlessSms && Model.ShowPasswordAuth)
                            {
                                @Localizer["Use <a href=\"{0}\" class=\"{1}\">one-time password via SMS</a> or <a href=\"{2}\" class=\"{3}\">your password</a>.",
                                         $"../_{Model.SequenceString}?passwordlesssms=true", "link passwordless-sms",
                                         $"../_{Model.SequenceString}?passwordauth=true", "link password-auth"];
                            }
                            else if (Model.ShowPasswordlessSms)
                            {
                                @Localizer["<a href=\"{0}\" class=\"{1}\">Use one-time password via SMS.</a>", $"../_{Model.SequenceString}?passwordlesssms=true", "link passwordless-sms"];
                            }
                            else if (Model.ShowPasswordAuth)
                            {
                                @Localizer["<a href=\"{0}\" class=\"{1}\">Use your password.</a>", $"../_{Model.SequenceString}?passwordauth=true", "link password-auth"];
                            }
                        </div>
                    }
                    if (Model.ShowCreateUser)
                    {
                        <div class="form-group button-group create-user-group @(Model.ShowPasswordlessSms || Model.ShowPasswordAuth ? "nested-group" : string.Empty)">
                            @Localizer["Don't have an account?"]
                            <a href="../@Constants.Endpoints.CreateUser/_@Model.SequenceString" class="link create-user">@Localizer["Create user"]</a>
                        </div>
                    }
                }
                else if (element is ContentDElement contentDElement)
                {
                    await Html.RenderPartialAsync("_DynamicContentElements", element);
                }
                else if (!(element is LoginHrdDElement))
                {
                    throw new NotSupportedException($"Dynamic element type '{element.GetTypeName()}' not supported.");
                }
            }
        </form>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
